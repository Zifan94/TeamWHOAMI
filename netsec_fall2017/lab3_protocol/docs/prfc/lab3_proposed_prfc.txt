


Network Working Group                                       E. Hsia, Ed.
Request for Comments: 2                   JHU Network Security Fall 2017
Category: Standards Track                                  November 2017


                 Lab 3 Playground Request For Comments

Abstract

   PLS (Playground Layer Security Protocol) is a "middleware" protocol
   intended to provide secure transmission between two communicating
   applications.  The protocol is composed a six-way handshake, data
   transmission, and termination.  This document describes the functions
   to be performed by the PLS layer and the program that implements it.

Status of this Memo

   This document specifies a Playgrounds standards track protocol for
   the Playground Experiment, and requests discussion and suggestions
   for improvements.  Distribution of this memo is unlimited.

Copyright Notice

   Copyright (c) 2017 SETH JAMES NIELSON.  All rights reserved.

   This document is used solely for educational purposes.  Any citations
   within this document are also for educational purposes and also for
   technical reference.  If any of these cited elements are protected
   under copyright, their inclusion here falls under Fair Use
   provisions.





















Hsia                         Standards Track                    [Page 1]

RFC 2                           Lab3PRFC                   November 2017


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1.  Requirements Language  . . . . . . . . . . . . . . . . . .  3
   2.  Packet Description . . . . . . . . . . . . . . . . . . . . . .  3
     2.1.  PlsHello Packet  . . . . . . . . . . . . . . . . . . . . .  3
     2.2.  PlsKeyExchange Packet  . . . . . . . . . . . . . . . . . .  4
     2.3.  PlsHandshakeDone Packet  . . . . . . . . . . . . . . . . .  4
     2.4.  PlsData Packet . . . . . . . . . . . . . . . . . . . . . .  4
     2.5.  PlsClose Packet  . . . . . . . . . . . . . . . . . . . . .  4
   3.  Session Life . . . . . . . . . . . . . . . . . . . . . . . . .  5
     3.1.  Session Establishment  . . . . . . . . . . . . . . . . . .  5
       3.1.1.  Certificate Chain Validation . . . . . . . . . . . . .  5
       3.1.2.  Certificate Signing Request  . . . . . . . . . . . . .  6
       3.1.3.  Key Derivation . . . . . . . . . . . . . . . . . . . .  7
       3.1.4.  Error Handling . . . . . . . . . . . . . . . . . . . .  8
     3.2.  Data Transmission  . . . . . . . . . . . . . . . . . . . .  8
       3.2.1.  Error Handling . . . . . . . . . . . . . . . . . . . .  9
     3.3.  Session Termination  . . . . . . . . . . . . . . . . . . .  9
   4.  Normative References . . . . . . . . . . . . . . . . . . . . .  9
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . .  9
   Intellectual Property and Copyright Statements . . . . . . . . . . 10





























Hsia                         Standards Track                    [Page 2]

RFC 2                           Lab3PRFC                   November 2017


1.  Introduction

   The purpose of lab 3 is to design and implement a security layer to
   be used in the PLAYGROUND framework, designed by Dr. Seth James
   Nielson to give students an environment to learn about internet
   security attacks and defenses on a much smaller scale.

   In particular, the security layer in lab 3, dubbed PLS (Playground
   Layer Security Protocol) consists of the following parts: a six-way
   handshake to establish connection betweeen a server side application
   and a client side application, data transmission between the two
   protocols, and a termination that either protocol can initiate to
   close the session, either when the data is collected or in response
   to an error.  This PRFC will go into more detail about each process
   and descriptions of the PLS packets and error handling.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].


2.  Packet Description

   In this section, we will describe in detail each packet used in the
   PLS layer.  How each packet will be used, however, will be described
   in more detail in a later section.

   All PLS packets are descendents of the PacketType class from
   Playground, and as such the fields inherit the types that Playground
   defines: UINT, INT, STRING, BOOL, BUFFER, and LIST.  Here, BUFFER,
   LIST, STRING, and variations of UINT, were used in the field types.

2.1.  PlsHello Packet

   The PlsHello packet is a packet used specifically during session
   establishment as a means of connecting the client and server.  This
   packet MUST contain 2 fields: a UINT64 "Nonce" and a LIST of BUFFERs
   "Certs".

   Each "Nonce" is a 64 bit random integer.  "Certs" is a list of
   certificates required for authorization, with the first one being the
   certificate of the client or the server, depending on which one sent
   the packet.  The last certificate MAY be the root certificate.  The
   rest MUST be any intermediate CA's in order.





Hsia                         Standards Track                    [Page 3]

RFC 2                           Lab3PRFC                   November 2017


2.2.  PlsKeyExchange Packet

   The PlsKeyExchange packet is used after the PlsHello packets are
   sent.  Each packet MUST contain two fields: a "PreKey" of type
   BUFFER, and "NoncePlusOne" of type UINT64.

   The "PreKey" is a 128 bits of data that will be used by the client
   and the server to generate keys.  The specifics of this process will
   be discussed later.  The "PreKey" is encrypted under the public key
   contained in the other protocol's certificate (so, if it is the
   client's PreKey, it will be encrypted under the public key of the
   server).  "NoncePlusOne" is just the value of the Nonce of the other
   protocol (so, if we are discussing the client's PlsKeyExchange
   packet, then we take the Nonce of the server) plus one.

2.3.  PlsHandshakeDone Packet

   The PlsHandshakeDone packet is sent by both the client and server to
   signal that the handshake has finished and the session is
   established.  It contains one field: "ValidationHash" of type BUFFER.

   The "ValidationHash" is the hash of the previous packets used in the
   handshake: the PlsHello and PlsKeyExchange packets that both the
   client and server used.  So it hashes four packets in total, since
   both the client and server send one packet of each type.

2.4.  PlsData Packet

   The PlsData packet is sent during data transmission after the
   handshake is completed.  In order to be considered a PlsData packet,
   the packet MUST contain a "Ciphertext" field of type BUFFER and a
   "MAC" field of type BUFFER.

   The "Ciphertext" gets generated by sending the plaintext data through
   the client's or server's encryption engine.  The "MAC" gets generated
   by sending the "Ciphertext" through the client's or server's MAC
   engine.

   The data transmission will be discussed in more detail later.

2.5.  PlsClose Packet

   The PlsClose packet is sent by either the client or the server to
   close the session.  It contains an optional field "Error" of type
   STRING.

   When all the data is finished transmitting, either the client or the
   server can close the session by sending a PlsClose packet.  If it is



Hsia                         Standards Track                    [Page 4]

RFC 2                           Lab3PRFC                   November 2017


   a normal shutdown, then it omits the error message in the "Error"
   field.  If either client or server receive an error message at any
   point, they MUST close the session and include an error message in
   the "Error" field.


3.  Session Life

   Just like in other layers, there MUST be sessions to handle the case
   where multiple client protocols try connecting to the same server,
   and to handle the case where the server does not terminate properly
   when a client finishes sending information.  Even if different ports
   are used, the old protocol will still exist in memory.  Each session
   MUST include session establishment, data transmission, and session
   termination.

3.1.  Session Establishment

   Session establishment MUST use a six-way handshake.  The process
   starts with the client sendind a PlsHello packet to the server.  The
   "Nonce" is a 64-bit random number and the "Certs" is a list of
   certificates required for authorization, with the first one being the
   certificate of the client.

   The server then replies with a PlsHello packet of its own.  The
   "Nonce" is another 64-bit random number and the "Certs" field is
   another list of certificates required for authorization, with the
   first one being the certificate of the server.

   The certificate authorization will be explained in more detail later.

   The client then responds with a PlsKeyExchange packet.  The server
   then responds with a PlsKeyExchange packet of its own.  The "PreKeys"
   are generated as follows: the client uses RSA-2048 with OAEP padding
   of the server public key, and the server uses RSA-2048 with OAEP
   padding of the client public key.  The rest of the key generation is
   explained later.

   The client proceeds to send a PlsHandshakeDone packet after the
   PlsKeyExchange packets are sent and received.  The server also sends
   a PlsHandshakeDone packet at this time.  These packets can be sent
   simultaneously since they both contain hashes of the packets before
   this step, so they are not contingent on each other.

3.1.1.  Certificate Chain Validation

   The list of certificates sent by the PlsHello packets are as follows:
   Certs[0] MUST be the certificate of the host, Certs[n] MAY be the



Hsia                         Standards Track                    [Page 5]

RFC 2                           Lab3PRFC                   November 2017


   root certificate, and the certificates in between MUST be any
   intermediate CA's in order.

   The common name of the subject name of Certs[0] MUST be the same as
   the playground address of the host.

   The common name of each successive CA MUST be a prefix of the
   previous certificate.  For example, if Certs[0] is 20174.1.100.200,
   then Certs[1] is 20174.1.100.  The root MUST be 20174.1, however.

   Each certificate must be signed by the successive CA certificate back
   to the root.

   Then, to validate the incoming certificates, the protocol MUST verify
   that the common name of the subject name of the first certificate
   matches the playground address of the incoming connection.  It also
   MUST check that each CA is a prefix of the lower certificate.  And
   lastly, it MUST ensure that each certificate is signed by the root
   certificate.  More error checking can be made based on
   implementation.

3.1.2.  Certificate Signing Request

   To generate the certificates needed in the PlsHello packets, there
   exists a certificate signing process which will be described in this
   section.  There are six certificates we MUST consider: the root cert,
   the group cert that is signed by the root cert, a client private key,
   a server private key, a client cert signed by the group cert and a
   server cert signed by the group cert.

   The root cert is given and signs the group cert.  The private keys
   are generated using RSA-2048.  Next, the certificate signing request
   is made.  In the certificate signing request, the following
   information is entered (example information is used):

   Country Name (2 letter code): US

   State or Province Name: MD

   Locality Name (city): Baltimore

   Organizational Name (ex. company): JHUNetworkSecurityFall2017

   Organization Unit Name (ex. section): PETF

   Common Name(ex. server FQDN or YOUR name): 20174.1.n

   Email Address: ehsia1@jhu.edu



Hsia                         Standards Track                    [Page 6]

RFC 2                           Lab3PRFC                   November 2017


   Challenge: [LEAVE BLANK]

   Company: Evan Hsia

   The "n" in Common Name is a random number between 1 and 65536, coming
   from the PLAYGROUND address.  This generates the certificate signing
   request.

   The certificate signing request file with the value for n MUST then
   be signed by a CA and returned.

   More CSRs can be generated by following the same process, but with
   the Common Name adjusted to be 20174.1.n.x, where "x" is any number.
   After these are generated, they MUST still be signed by the private
   key of an intermediate CA.  These CSRs are optional and depend on
   implementation.

3.1.3.  Key Derivation

   The client needs to generate a client encryption key, a server
   encryption key which serves as the client's decryption key, a client
   MAC key and a server MAC key which serves as the client's
   verification key.  The server needs to generate the same 4 keys, with
   the roles being flipped (so the client MAC key serves as the server's
   verification key and the client's encryption key serves as the
   server's decryption key).  Each key is 128 bits.  Each side also
   generates an encryption IV of size 128 bits.

   To generate each key, we go through a hashing process.  We generate a
   stream using repeated SHA1 hashing of the seed "PLS1.0" + Nc + Ns +
   PKc + PKs.  Each hash generates 160 bits.  The first hash is the
   hashing of "PLS1.0 + Nc + Ns + PKc + PKs" with Nc and Ns being the
   Nonce of the client and of the server, respectively, and PKc and PKs
   being the PreKeys of the client and server, respectively.  Each of
   the next four hashes is the result of hashing the previous hash (for
   example, the second hash is the hash of the first hash and so on).
   This stream is now 800 bits.

   The keys then get created as follows: the encryption key of the
   client is the first 128 bits, the encryption key of the server is the
   next 128 bits, the IV of the client is the next 128 bits, the IV of
   the server is the 128 bits after, the MAC key of the client is the
   next 128 bits, and the MAC key of the server is the next 128 bits.
   The final 32 bits is discarded.







Hsia                         Standards Track                    [Page 7]

RFC 2                           Lab3PRFC                   November 2017


3.1.4.  Error Handling

   If either client or server detects an error, it should send a
   PlsClose packet with an error message.  The text of the error message
   is implementation specific, but the presence of an error message
   indicates that it was not a normal termination.

3.2.  Data Transmission

   After the handshake is completed and the session is created, data
   transmission can begin.  Each side creates an encryption and a
   decryption engine that differs for each side.

   For the client, the encryption engine is configured with the client
   encryption key and the client IV as the initial counter value.  The
   decryption engine is configured with the server encryption key as the
   key and server IV as the initial counter value.

   The server follows the same process with the client and server keys
   reversed.  So the encryption engine uses the server encryption key
   and server IV, and the decryption engine uses the client encryption
   key and IV.

   Each side also creates an HMAC-SHA1 MAC engine and a Verification
   engine.  The MAC engine is generated using the protocol's own MAC key
   and the Verification engine is created based on the other protocol's
   MAC key.

   To actually send data, plain text is encrypted through the encryption
   engine to create the Ciphertext of the data packet, and then the
   Ciphertext is passed through the MAC engine to produce the
   Verification of the data packet.  Then the packet is sent.

   When data is received, the protocol extracts the Ciphertext from the
   packet and passes it to the verification engine to see if it matches
   the Verification of the packet.  If it does not, the packet is
   discarded, but the connection is not necessarily closed.  Closing
   here depends on the implementation.  If the implementation chooses to
   close the session, it MUST send a PlsClose packet with an error
   message.

   If the Ciphertext is verified, then it is passed to the decryption
   engine to produce the plaintext.  Then the data is passed to the
   higher layer.

   All data is encrypted using AES-128 in CTR mode during this time.
   The encryption engine should be configured with the IV of the
   protocol as the initial counter.



Hsia                         Standards Track                    [Page 8]

RFC 2                           Lab3PRFC                   November 2017


   Data sent MUST be encrypted with the encryption key of the protocol.
   The Ciphertext is sent through the appropriate MAC engine using HMAC-
   SHA1 to verify.

3.2.1.  Error Handling

   At any point, if either the client or the server receives an error,
   the protocol MUST send a PlsClose packet with an implementation
   specific error message to terminate the session.

3.3.  Session Termination

   Either the client or the server can initiate the closing of the
   session by sending a PlsClose packet.  This will happen in two cases.

   The first case is a normal shutdown.  All the data has finished being
   transmitted, and the client or the server wishes to close the
   session.  To do so, a PlsClose packet is sent, but the error message
   is omitted.  The connection is then closed.

   The second case is an error case.  If at any point either the client
   or the server receives an error from the other side, during the
   handshake or during data transmission, the protocol MUST send a
   PlsClose packet with an implementation specific error message.  This
   terminates the session and lets the other side know why the session
   was closed.


4.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/
              RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.


Author's Address

   Evan Hsia (editor)
   JHU Network Security Fall 2017
   Johns Hopkins University 122 Malone Hall/3400 North Charles St.
   Baltimore, MD  21218
   USA

   Phone: +1 860-519-4112
   Email: ehsia1@jhu.edu





Hsia                         Standards Track                    [Page 9]

RFC 2                           Lab3PRFC                   November 2017


Full Copyright Statement

   Copyright (C) Seth James Nielson (2017).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the PLAYGROUND experiment or
   other associated organizations, except by explicit permission.

   The limited permissions granted above are perpetual and will not be
   revoked by SETH JAMES NIELSON or his successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and SETH JAMES NIELSON and associated academic
   institutions DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The PLAYGROUND framework and student submissions for PLAYGROUND are
   intended to be free of any intellectual property conflicts.  All
   submitting parties, especially students, are not allowed to submit
   source code, specifications, or other components that are known to be
   protected by copyright, patents, or other IP mechanisms.  Students
   submitting creative content grant shared rights and ownership of
   their content to the PLAYGROUND project.  Specifically, any
   submission can be used in future educational settings including
   subsequent PLAYGROUND experiments.

   Any interested party is invited to bring to the experiment director's
   attention any copyrights, patents or patent applications, or other
   proprietary rights which may cover technology that may be currently
   in use without permission.

   It should be noted that these statements have not been reviewed by
   legal counsel.  Moreover, the academic institutions at which
   PLAYGROUND experiments take place may have additional or even
   conflicting copyright and intellectual property rules.  Accordingly,
   concerned parties may need to contact their own lawyer and/or
   resources at their institution to understand the rights and



Hsia                         Standards Track                   [Page 10]

RFC 2                           Lab3PRFC                   November 2017


   limitations associated with code donated to a PLAYGROUND experiment.


















































Hsia                         Standards Track                   [Page 11]

