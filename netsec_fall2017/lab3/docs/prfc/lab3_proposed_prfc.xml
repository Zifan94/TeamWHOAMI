<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2360 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc strict="yes" ?>

<?rfc toc="yes"?>

<?rfc tocdepth="4"?>

<?rfc symrefs="yes"?>

<?rfc sortrefs="yes" ?>

<?rfc compact="yes" ?>

<?rfc subcompact="no" ?>

<rfc category="std" docName="rfc2" ipr="playgroundStd_v1_0" number="2">


  <front>
    <title abbrev="Lab3PRFC">Lab 3 Playground Request For Comments</title>
    <author fullname="Evan Hsia" initials="E.H." role="editor" surname="Hsia">
      <organization>JHU Network Security Fall 2017</organization>
      <address>
        <postal>
          <street>Johns Hopkins University 122 Malone Hall/3400 North Charles St.</street>
          <city>Baltimore</city>
          <region>MD</region>
          <code>21218</code>
          <country>USA</country>
        </postal>
        <phone>+1 860-519-4112</phone>
        <email>ehsia1@jhu.edu</email>
      </address>
    </author>
    <date year="2017" month="November"/>
    <area>General</area>
    <workgroup>WHOAMI</workgroup>
    <keyword>PRFC</keyword>
    <abstract>
      <t>PLS (Playground Layer Security Protocol) is a "middleware" protocol intended
      to provide secure transmission between two communicating applications. The
      protocol is composed a six-way handshake, data transmission, and termination.
      This document describes the functions to be performed by the PLS layer and the
      program that implements it.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The purpose of lab 3 is to design and implement a security layer to be
      used in the PLAYGROUND framework, designed by Dr. Seth James Nielson to give
      students an environment to lear about internet security attacks and defenses
      on a much smaller scale.</t>

      <t>In particular, the security layer in lab 3, dubbed PLS (Playground Layer
      Security Protocol) consists of the following parts: a six-way handshake to
      establish connection betweeen a server side application and a client side
      application, data transmission between the two protocols, and a termination
      that either protocol can initiate to close the session, either when the
      data is collected or in response to an error. This PRFC will go into more
      detail about each process and descriptions of the PLS packets and error handling.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>
    <section title="Packet Description">
      <t>In this section, we will describe in detail each packet used in the PLS
      layer. How each packet will be used, however, will be described in more
      detail in a later section.</t>

      <t>All PLS packets are descendents of the PacketType class from Playground,
      and as such the fields inherit the types that Playground defines: UINT, INT,
      STRING, BOOL, BUFFER, and LIST. Here, BUFFER, LIST, STRING, and variations
      of UINT, were used in the field types.</t>
      <section title="PlsHello Packet">
        <t>The PlsHello packet is a packet used specifically during session establishment
        as a means of connecting the client and server. This packet MUST contain 2 fields:
        a UINT64 "Nonce" and a LIST of BUFFERs "Certs".</t>

        <t>Each "Nonce" is a 64 bit random integer. "Certs" is a list of certificates
        required for authorization, with the first one being the certificate of the
        client or the server, depending on which one sent the packet.</t>
      </section>
      <section title="PlsKeyExchange Packet">
        <t>The PlsKeyExchange packet is used after the PlsHello packets are sent.
        Each packet MUST contain two fields: a "PreKey" of type BUFFER, and
        "NoncePlusOne" of type UINT64.</t>

        <t>The "PreKey" is a 128 bits of data that will be used by the client and
        the server to generate keys. The specifics of this process will be discussed
        later. The "PreKey" is encrypted under the public key contained in the
        other protocol's certificate (so, if it is the client's PreKey, it will
        be encrypted under the public key of the server). "NoncePlusOne" is just
        the value of the Nonce of the other protocol (so, if we are discussing
        the client's PlsKeyExchange packet, then we take the Nonce of the server)
        plus one.</t>
      </section>
      <section title="PlsHandshakeDone Packet">
        <t>The PlsHandshakeDone packet is sent by both the client and server to signal
        that the handshake has finished and the session is established. It contains
        one field: "ValidationHash" of type BUFFER.</t>

        <t>The "ValidationHash" is the hash of the previous packets used in the
        handshake: the PlsHello and PlsKeyExchange packets that both the client
        and server used. So it hashes four packets in total, since both the client
        and server send one packet of each type.</t>
      </section>
      <section title="PlsData Packet">
        <t>The PlsData packet is sent during data transmission after the handshake
        is completed. In order to be considered a PlsData packet, the packet MUST
        contain a "Ciphertext" field of type BUFFER and a "MAC" field of type
        BUFFER.</t>

        <t>The "Ciphertext" gets generated by sending the plaintext data through
        the client's or server's encryption engine. The "MAC" gets generated by sending
        the "Ciphertext" through the client's or server's MAC engine.</t>

        <t>The data transmission will be discussed in more detail later.</t>
      </section>
      <section title="PlsClose Packet">
        <t>The PlsClose packet is sent by either the client or the server to close
        the session. It contains an optional field "Error" of type STRING.</t>

        <t>When all the data is finished transmitting, either the client or the
        server can close the session by sending a PlsClose packet. If it is a normal
        shutdown, then it omits the error message in the "Error" field. If either client
        or server receive an error message at any point, they MUST close the session
        and include an error message in the "Error" field.</t>
      </section>
    </section>
    <section title="Session Life">
      <t></t>
      <section title="Session Establishment">
        <section title="Key Derivation">
        </section>
        <section title="Error Handling">
        </section>
      </section>
      <section title="Data Transmission">
        <section title="Error Handling">
        </section>
      </section>
      <section title="Session Termination">
      </section>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;
    </references>
  </back>
</rfc>
