Fnname b'll_os.ll_os_getenv'
Start b'll_os.ll_os_getenv'((b'PYPY_GENERATIONGC_NURSERY',))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_getenv'((b'PYPY_GENERATIONGC_NURSERY',)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_getenv'
Start b'll_os.ll_os_getenv'((b'PYPY_GC_DEBUG',))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_getenv'((b'PYPY_GC_DEBUG',)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_getenv'
Start b'll_os.ll_os_getenv'((b'PYTHONHASHSEED',))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_getenv'((b'PYTHONHASHSEED',)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/dev/urandom', 0, 511))
['', 'dev', 'urandom']
checking 
checking dev
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f319320>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/dev/urandom', 0, 511)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 16))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 16)) complete. Writing back b'\xccI?\xb7a\x16\x97/\x9fBph\x0edf\x14'
Write message g=<_io.BufferedWriter name=4>, msg=b'\xccI?\xb7a\x16\x97/\x9fBph\x0edf\x14', resulttype=None
dump b'\xccI?\xb7a\x16\x97/\x9fBph\x0edf\x14', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_envitems'
Start b'll_os.ll_os_envitems'(())
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_envitems'(()) complete. Writing back []
Write message g=<_io.BufferedWriter name=4>, msg=[], resulttype=None
dump [], type <class 'list'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/pypy3-c',))
['', 'bin', 'pypy3-c']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/pypy3-c',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=1, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=8600, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=1, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=8600, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 1, 1, 1, 0, 0, 8600, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 1, 1, 1, 0, 0, 8600, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 8600, type <class 'int'>
Dump int (long) 8600
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_access'
Start b'll_os.ll_os_access'((b'/bin/pypy3-c', 1))
['', 'bin', 'pypy3-c']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_access'((b'/bin/pypy3-c', 1)) complete. Writing back False
Write message g=<_io.BufferedWriter name=4>, msg=False, resulttype=None
dump False, type <class 'bool'>
Fnname b'll_os.ll_os_getcwd'
Start b'll_os.ll_os_getcwd'(())
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_getcwd'(()) complete. Writing back /tmp
Write message g=<_io.BufferedWriter name=4>, msg=/tmp, resulttype=None
dump /tmp, type <class 'str'>
Fnname b'll_os.ll_os_lstat'
Start b'll_os.ll_os_lstat'((b'/tmp/pypy3-c',))
['', 'tmp', 'pypy3-c']
checking 
checking tmp
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f332f98>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/tmp/pyvenv.cfg', 0, 0))
['', 'tmp', 'pyvenv.cfg']
checking 
checking tmp
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f332f98>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/tmp/lib-python/3',))
['', 'tmp', 'lib-python', '3']
checking 
checking tmp
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f332f98>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f332f98> []
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_lstat'
Start b'll_os.ll_os_lstat'((b'/tmp',))
['', 'tmp']
checking 
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lstat'((b'/tmp',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=2, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=2, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 2, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 2, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 2, type <class 'int'>
Dump int (long) 2
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/pyvenv.cfg', 0, 0))
['', 'pyvenv.cfg']
checking 
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/lib-python/3',))
['', 'lib-python', '3']
checking 
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_lstat'
Start b'll_os.ll_os_lstat'((b'/',))
['', '']
checking 
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lstat'((b'/',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=3, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=3, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 3, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 3, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 3, type <class 'int'>
Dump int (long) 3
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_sys.ll_get_pypy_path'
Start b'll_sys.ll_get_pypy_path'(())
Getting pypy path /bin/
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_sys.ll_get_pypy_path'(()) complete. Writing back /bin/
Write message g=<_io.BufferedWriter name=4>, msg=/bin/, resulttype=None
dump /bin/, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=4, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=4, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 4, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 4, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 4, type <class 'int'>
Dump int (long) 4
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/__extensions__',))
['', 'bin', 'lib_pypy', '__extensions__']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/__extensions__',))
['', 'bin', 'lib_pypy', '__extensions__']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_listdir'
Start b'll_os.ll_os_listdir'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_listdir'((b'/bin/lib_pypy',)) complete. Writing back ['audioop.py', 'cffi', 'cffi.egg-info', 'ctypes_config_cache', 'ctypes_support.py', 'future_builtins.py', 'greenlet.egg-info', 'greenlet.py', 'grp.py', 'identity_dict.py', 'marshal.py', 'msvcrt.py', 'pwd.py', 'pyrepl', 'readline.egg-info', 'readline.py', 'resource.py', 'stackless.py', 'syslog.py', 'testcapi_long.h', 'tputil.py', '_audioop_build.py', '_cffi_ssl', '_codecs_cn.py', '_codecs_hk.py', '_codecs_iso2022.py', '_codecs_jp.py', '_codecs_kr.py', '_codecs_tw.py', '_collections.py', '_csv.py', '_ctypes', '_ctypes_test.c', '_ctypes_test.py', '_curses.py', '_curses_build.py', '_curses_panel.py', '_dbm.py', '_decimal.py', '_decimal_build.py', '_ffi.py', '_functools.py', '_gdbm.py', '_gdbm_build.py', '_hashlib', '_libmpdec', '_lzma.py', '_lzma_build.py', '_marshal.py', '_md5.py', '_pwdgrp_build.py', '_pypy_collections.py', '_pypy_interact.py', '_pypy_irc_topic.py', '_pypy_testcapi.py', '_pypy_wait.py', '_pypy_winbase_build.py', '_pypy_winbase_cffi.py', '_resource_build.py', '_scproxy.py', '_sha1.py', '_sha256.py', '_sha512.py', '_sqlite3.py', '_sqlite3_build.py', '_ssl', '_ssl_build.py', '_stat.py', '_structseq.py', '_sysconfigdata.py', '_syslog_build.py', '_testcapi.py', '_testcapimodule.c', '_testmultiphase.c', '_testmultiphase.py', '_tkinter', '_winapi.py', '__init__.py']
Write message g=<_io.BufferedWriter name=4>, msg=['audioop.py', 'cffi', 'cffi.egg-info', 'ctypes_config_cache', 'ctypes_support.py', 'future_builtins.py', 'greenlet.egg-info', 'greenlet.py', 'grp.py', 'identity_dict.py', 'marshal.py', 'msvcrt.py', 'pwd.py', 'pyrepl', 'readline.egg-info', 'readline.py', 'resource.py', 'stackless.py', 'syslog.py', 'testcapi_long.h', 'tputil.py', '_audioop_build.py', '_cffi_ssl', '_codecs_cn.py', '_codecs_hk.py', '_codecs_iso2022.py', '_codecs_jp.py', '_codecs_kr.py', '_codecs_tw.py', '_collections.py', '_csv.py', '_ctypes', '_ctypes_test.c', '_ctypes_test.py', '_curses.py', '_curses_build.py', '_curses_panel.py', '_dbm.py', '_decimal.py', '_decimal_build.py', '_ffi.py', '_functools.py', '_gdbm.py', '_gdbm_build.py', '_hashlib', '_libmpdec', '_lzma.py', '_lzma_build.py', '_marshal.py', '_md5.py', '_pwdgrp_build.py', '_pypy_collections.py', '_pypy_interact.py', '_pypy_irc_topic.py', '_pypy_testcapi.py', '_pypy_wait.py', '_pypy_winbase_build.py', '_pypy_winbase_cffi.py', '_resource_build.py', '_scproxy.py', '_sha1.py', '_sha256.py', '_sha512.py', '_sqlite3.py', '_sqlite3_build.py', '_ssl', '_ssl_build.py', '_stat.py', '_structseq.py', '_sysconfigdata.py', '_syslog_build.py', '_testcapi.py', '_testcapimodule.c', '_testmultiphase.c', '_testmultiphase.py', '_tkinter', '_winapi.py', '__init__.py'], resulttype=None
dump ['audioop.py', 'cffi', 'cffi.egg-info', 'ctypes_config_cache', 'ctypes_support.py', 'future_builtins.py', 'greenlet.egg-info', 'greenlet.py', 'grp.py', 'identity_dict.py', 'marshal.py', 'msvcrt.py', 'pwd.py', 'pyrepl', 'readline.egg-info', 'readline.py', 'resource.py', 'stackless.py', 'syslog.py', 'testcapi_long.h', 'tputil.py', '_audioop_build.py', '_cffi_ssl', '_codecs_cn.py', '_codecs_hk.py', '_codecs_iso2022.py', '_codecs_jp.py', '_codecs_kr.py', '_codecs_tw.py', '_collections.py', '_csv.py', '_ctypes', '_ctypes_test.c', '_ctypes_test.py', '_curses.py', '_curses_build.py', '_curses_panel.py', '_dbm.py', '_decimal.py', '_decimal_build.py', '_ffi.py', '_functools.py', '_gdbm.py', '_gdbm_build.py', '_hashlib', '_libmpdec', '_lzma.py', '_lzma_build.py', '_marshal.py', '_md5.py', '_pwdgrp_build.py', '_pypy_collections.py', '_pypy_interact.py', '_pypy_irc_topic.py', '_pypy_testcapi.py', '_pypy_wait.py', '_pypy_winbase_build.py', '_pypy_winbase_cffi.py', '_resource_build.py', '_scproxy.py', '_sha1.py', '_sha256.py', '_sha512.py', '_sqlite3.py', '_sqlite3_build.py', '_ssl', '_ssl_build.py', '_stat.py', '_structseq.py', '_sysconfigdata.py', '_syslog_build.py', '_testcapi.py', '_testcapimodule.c', '_testmultiphase.c', '_testmultiphase.py', '_tkinter', '_winapi.py', '__init__.py'], type <class 'list'>
dump audioop.py, type <class 'str'>
dump cffi, type <class 'str'>
dump cffi.egg-info, type <class 'str'>
dump ctypes_config_cache, type <class 'str'>
dump ctypes_support.py, type <class 'str'>
dump future_builtins.py, type <class 'str'>
dump greenlet.egg-info, type <class 'str'>
dump greenlet.py, type <class 'str'>
dump grp.py, type <class 'str'>
dump identity_dict.py, type <class 'str'>
dump marshal.py, type <class 'str'>
dump msvcrt.py, type <class 'str'>
dump pwd.py, type <class 'str'>
dump pyrepl, type <class 'str'>
dump readline.egg-info, type <class 'str'>
dump readline.py, type <class 'str'>
dump resource.py, type <class 'str'>
dump stackless.py, type <class 'str'>
dump syslog.py, type <class 'str'>
dump testcapi_long.h, type <class 'str'>
dump tputil.py, type <class 'str'>
dump _audioop_build.py, type <class 'str'>
dump _cffi_ssl, type <class 'str'>
dump _codecs_cn.py, type <class 'str'>
dump _codecs_hk.py, type <class 'str'>
dump _codecs_iso2022.py, type <class 'str'>
dump _codecs_jp.py, type <class 'str'>
dump _codecs_kr.py, type <class 'str'>
dump _codecs_tw.py, type <class 'str'>
dump _collections.py, type <class 'str'>
dump _csv.py, type <class 'str'>
dump _ctypes, type <class 'str'>
dump _ctypes_test.c, type <class 'str'>
dump _ctypes_test.py, type <class 'str'>
dump _curses.py, type <class 'str'>
dump _curses_build.py, type <class 'str'>
dump _curses_panel.py, type <class 'str'>
dump _dbm.py, type <class 'str'>
dump _decimal.py, type <class 'str'>
dump _decimal_build.py, type <class 'str'>
dump _ffi.py, type <class 'str'>
dump _functools.py, type <class 'str'>
dump _gdbm.py, type <class 'str'>
dump _gdbm_build.py, type <class 'str'>
dump _hashlib, type <class 'str'>
dump _libmpdec, type <class 'str'>
dump _lzma.py, type <class 'str'>
dump _lzma_build.py, type <class 'str'>
dump _marshal.py, type <class 'str'>
dump _md5.py, type <class 'str'>
dump _pwdgrp_build.py, type <class 'str'>
dump _pypy_collections.py, type <class 'str'>
dump _pypy_interact.py, type <class 'str'>
dump _pypy_irc_topic.py, type <class 'str'>
dump _pypy_testcapi.py, type <class 'str'>
dump _pypy_wait.py, type <class 'str'>
dump _pypy_winbase_build.py, type <class 'str'>
dump _pypy_winbase_cffi.py, type <class 'str'>
dump _resource_build.py, type <class 'str'>
dump _scproxy.py, type <class 'str'>
dump _sha1.py, type <class 'str'>
dump _sha256.py, type <class 'str'>
dump _sha512.py, type <class 'str'>
dump _sqlite3.py, type <class 'str'>
dump _sqlite3_build.py, type <class 'str'>
dump _ssl, type <class 'str'>
dump _ssl_build.py, type <class 'str'>
dump _stat.py, type <class 'str'>
dump _structseq.py, type <class 'str'>
dump _sysconfigdata.py, type <class 'str'>
dump _syslog_build.py, type <class 'str'>
dump _testcapi.py, type <class 'str'>
dump _testcapimodule.c, type <class 'str'>
dump _testmultiphase.c, type <class 'str'>
dump _testmultiphase.py, type <class 'str'>
dump _tkinter, type <class 'str'>
dump _winapi.py, type <class 'str'>
dump __init__.py, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=6, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=6, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 6, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 6, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 6, type <class 'int'>
Dump int (long) 6
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=7, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=7, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 7, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 7, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 7, type <class 'int'>
Dump int (long) 7
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_listdir'
Start b'll_os.ll_os_listdir'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_listdir'((b'/bin/lib-python/3',)) complete. Writing back ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
Write message g=<_io.BufferedWriter name=4>, msg=['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py'], resulttype=None
dump ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py'], type <class 'list'>
dump abc.py, type <class 'str'>
dump aifc.py, type <class 'str'>
dump antigravity.py, type <class 'str'>
dump argparse.py, type <class 'str'>
dump ast.py, type <class 'str'>
dump asynchat.py, type <class 'str'>
dump asyncio, type <class 'str'>
dump asyncore.py, type <class 'str'>
dump base64.py, type <class 'str'>
dump bdb.py, type <class 'str'>
dump binhex.py, type <class 'str'>
dump bisect.py, type <class 'str'>
dump bz2.py, type <class 'str'>
dump calendar.py, type <class 'str'>
dump cgi.py, type <class 'str'>
dump cgitb.py, type <class 'str'>
dump chunk.py, type <class 'str'>
dump cmd.py, type <class 'str'>
dump code.py, type <class 'str'>
dump codecs.py, type <class 'str'>
dump codeop.py, type <class 'str'>
dump collections, type <class 'str'>
dump colorsys.py, type <class 'str'>
dump compileall.py, type <class 'str'>
dump concurrent, type <class 'str'>
dump configparser.py, type <class 'str'>
dump contextlib.py, type <class 'str'>
dump copy.py, type <class 'str'>
dump copyreg.py, type <class 'str'>
dump cProfile.py, type <class 'str'>
dump crypt.py, type <class 'str'>
dump csv.py, type <class 'str'>
dump ctypes, type <class 'str'>
dump curses, type <class 'str'>
dump datetime.py, type <class 'str'>
dump dbm, type <class 'str'>
dump decimal.py, type <class 'str'>
dump difflib.py, type <class 'str'>
dump dis.py, type <class 'str'>
dump distutils, type <class 'str'>
dump doctest.py, type <class 'str'>
dump dummy_threading.py, type <class 'str'>
dump email, type <class 'str'>
dump encodings, type <class 'str'>
dump ensurepip, type <class 'str'>
dump enum.py, type <class 'str'>
dump filecmp.py, type <class 'str'>
dump fileinput.py, type <class 'str'>
dump fnmatch.py, type <class 'str'>
dump formatter.py, type <class 'str'>
dump fractions.py, type <class 'str'>
dump ftplib.py, type <class 'str'>
dump functools.py, type <class 'str'>
dump genericpath.py, type <class 'str'>
dump getopt.py, type <class 'str'>
dump getpass.py, type <class 'str'>
dump gettext.py, type <class 'str'>
dump glob.py, type <class 'str'>
dump gzip.py, type <class 'str'>
dump hashlib.py, type <class 'str'>
dump heapq.py, type <class 'str'>
dump hmac.py, type <class 'str'>
dump html, type <class 'str'>
dump http, type <class 'str'>
dump idlelib, type <class 'str'>
dump imaplib.py, type <class 'str'>
dump imghdr.py, type <class 'str'>
dump imp.py, type <class 'str'>
dump importlib, type <class 'str'>
dump inspect.py, type <class 'str'>
dump io.py, type <class 'str'>
dump ipaddress.py, type <class 'str'>
dump json, type <class 'str'>
dump keyword.py, type <class 'str'>
dump lib2to3, type <class 'str'>
dump linecache.py, type <class 'str'>
dump locale.py, type <class 'str'>
dump logging, type <class 'str'>
dump lzma.py, type <class 'str'>
dump macpath.py, type <class 'str'>
dump macurl2path.py, type <class 'str'>
dump mailbox.py, type <class 'str'>
dump mailcap.py, type <class 'str'>
dump mimetypes.py, type <class 'str'>
dump modulefinder.py, type <class 'str'>
dump msilib, type <class 'str'>
dump multiprocessing, type <class 'str'>
dump netrc.py, type <class 'str'>
dump nntplib.py, type <class 'str'>
dump ntpath.py, type <class 'str'>
dump nturl2path.py, type <class 'str'>
dump numbers.py, type <class 'str'>
dump opcode.py, type <class 'str'>
dump operator.py, type <class 'str'>
dump optparse.py, type <class 'str'>
dump os.py, type <class 'str'>
dump pathlib.py, type <class 'str'>
dump pdb.py, type <class 'str'>
dump pickle.py, type <class 'str'>
dump pickletools.py, type <class 'str'>
dump pipes.py, type <class 'str'>
dump pkgutil.py, type <class 'str'>
dump plat-aix4, type <class 'str'>
dump plat-darwin, type <class 'str'>
dump plat-freebsd4, type <class 'str'>
dump plat-freebsd5, type <class 'str'>
dump plat-freebsd6, type <class 'str'>
dump plat-freebsd7, type <class 'str'>
dump plat-freebsd8, type <class 'str'>
dump plat-generic, type <class 'str'>
dump plat-linux, type <class 'str'>
dump plat-netbsd1, type <class 'str'>
dump plat-next3, type <class 'str'>
dump plat-sunos5, type <class 'str'>
dump plat-unixware7, type <class 'str'>
dump platform.py, type <class 'str'>
dump plistlib.py, type <class 'str'>
dump poplib.py, type <class 'str'>
dump posixpath.py, type <class 'str'>
dump pprint.py, type <class 'str'>
dump profile.py, type <class 'str'>
dump pstats.py, type <class 'str'>
dump pty.py, type <class 'str'>
dump pyclbr.py, type <class 'str'>
dump pydoc.py, type <class 'str'>
dump pydoc_data, type <class 'str'>
dump py_compile.py, type <class 'str'>
dump queue.py, type <class 'str'>
dump quopri.py, type <class 'str'>
dump random.py, type <class 'str'>
dump re.py, type <class 'str'>
dump reprlib.py, type <class 'str'>
dump rlcompleter.py, type <class 'str'>
dump runpy.py, type <class 'str'>
dump sched.py, type <class 'str'>
dump selectors.py, type <class 'str'>
dump shelve.py, type <class 'str'>
dump shlex.py, type <class 'str'>
dump shutil.py, type <class 'str'>
dump signal.py, type <class 'str'>
dump site-packages, type <class 'str'>
dump site.py, type <class 'str'>
dump smtpd.py, type <class 'str'>
dump smtplib.py, type <class 'str'>
dump sndhdr.py, type <class 'str'>
dump socket.py, type <class 'str'>
dump socketserver.py, type <class 'str'>
dump sqlite3, type <class 'str'>
dump sre_compile.py, type <class 'str'>
dump sre_constants.py, type <class 'str'>
dump sre_parse.py, type <class 'str'>
dump ssl.py, type <class 'str'>
dump stat.py, type <class 'str'>
dump statistics.py, type <class 'str'>
dump string.py, type <class 'str'>
dump stringprep.py, type <class 'str'>
dump struct.py, type <class 'str'>
dump subprocess.py, type <class 'str'>
dump sunau.py, type <class 'str'>
dump symbol.py, type <class 'str'>
dump symtable.py, type <class 'str'>
dump sysconfig.py, type <class 'str'>
dump tabnanny.py, type <class 'str'>
dump tarfile.py, type <class 'str'>
dump telnetlib.py, type <class 'str'>
dump tempfile.py, type <class 'str'>
dump test, type <class 'str'>
dump textwrap.py, type <class 'str'>
dump this.py, type <class 'str'>
dump threading.py, type <class 'str'>
dump timeit.py, type <class 'str'>
dump tkinter, type <class 'str'>
dump token.py, type <class 'str'>
dump tokenize.py, type <class 'str'>
dump trace.py, type <class 'str'>
dump traceback.py, type <class 'str'>
dump tracemalloc.py, type <class 'str'>
dump tty.py, type <class 'str'>
dump turtle.py, type <class 'str'>
dump turtledemo, type <class 'str'>
dump types.py, type <class 'str'>
dump typing.py, type <class 'str'>
dump unittest, type <class 'str'>
dump urllib, type <class 'str'>
dump uu.py, type <class 'str'>
dump uuid.py, type <class 'str'>
dump venv, type <class 'str'>
dump warnings.py, type <class 'str'>
dump wave.py, type <class 'str'>
dump weakref.py, type <class 'str'>
dump webbrowser.py, type <class 'str'>
dump wsgiref, type <class 'str'>
dump xdrlib.py, type <class 'str'>
dump xml, type <class 'str'>
dump xmlrpc, type <class 'str'>
dump zipapp.py, type <class 'str'>
dump zipfile.py, type <class 'str'>
dump _bootlocale.py, type <class 'str'>
dump _collections_abc.py, type <class 'str'>
dump _compat_pickle.py, type <class 'str'>
dump _compression.py, type <class 'str'>
dump _dummy_thread.py, type <class 'str'>
dump _markupbase.py, type <class 'str'>
dump _osx_support.py, type <class 'str'>
dump _pydecimal.py, type <class 'str'>
dump _pyio.py, type <class 'str'>
dump _sitebuiltins.py, type <class 'str'>
dump _strptime.py, type <class 'str'>
dump _threading_local.py, type <class 'str'>
dump _weakrefset.py, type <class 'str'>
dump __future__.py, type <class 'str'>
dump __phello__.foo.py, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/os.py',))
['', 'bin', 'lib-python', '3', 'os.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/os.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=8, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36950, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=8, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36950, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 8, 1, 1, 0, 0, 36950, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 8, 1, 1, 0, 0, 36950, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 8, type <class 'int'>
Dump int (long) 8
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 36950, type <class 'int'>
Dump int (long) 36950
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/os.py',))
['', 'bin', 'lib-python', '3', 'os.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/os.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=9, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36950, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=9, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36950, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 9, 1, 1, 0, 0, 36950, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 9, 1, 1, 0, 0, 36950, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 9, type <class 'int'>
Dump int (long) 9
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 36950, type <class 'int'>
Dump int (long) 36950
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/__pycache__/os.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', '__pycache__', 'os.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/os.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'os.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/os.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=10, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36950, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=10, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36950, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 10, 1, 1, 0, 0, 36950, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 10, 1, 1, 0, 0, 36950, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 10, type <class 'int'>
Dump int (long) 10
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 36950, type <class 'int'>
Dump int (long) 36950
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=10, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36950, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=10, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36950, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 10, 1, 1, 0, 0, 36950, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 10, 1, 1, 0, 0, 36950, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 10, type <class 'int'>
Dump int (long) 10
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 36950, type <class 'int'>
Dump int (long) 36950
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 36951))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 36951)) complete. Writing back b'r"""OS routines for NT or Posix depending on what system we\'re on.\n\nThis exports:\n  - all functions from posix, nt or ce, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either \'posix\', \'nt\' or \'ce\'.\n  - os.curdir is a string representing the current directory (\'.\' or \':\')\n  - os.pardir is a string representing the parent directory (\'..\' or \'::\')\n  - os.sep is the (or a most common) pathname separator (\'/\' or \':\' or \'\\\\\')\n  - os.extsep is the extension separator (always \'.\')\n  - os.altsep is the alternate pathname separator (None or \'/\')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files (\'\\r\' or \'\\n\' or \'\\r\\n\')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device (\'/dev/null\', etc.)\n\nPrograms that import and use \'os\' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n"""\n\n#\'\n\nimport sys, errno\nimport stat as st\n\n_names = sys.builtin_module_names\n\n# Note:  more names are added to __all__ later.\n__all__ = ["altsep", "curdir", "pardir", "sep", "pathsep", "linesep",\n           "defpath", "name", "path", "devnull", "SEEK_SET", "SEEK_CUR",\n           "SEEK_END", "fsencode", "fsdecode", "get_exec_path", "fdopen",\n           "popen", "extsep"]\n\ndef _exists(name):\n    return name in globals()\n\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != \'_\']\n\n# Any new dependencies of the os module and/or changes in path separator\n# requires updating importlib as well.\nif \'posix\' in _names:\n    name = \'posix\'\n    linesep = \'\\n\'\n    from posix import *\n    try:\n        from posix import _exit\n        __all__.append(\'_exit\')\n    except ImportError:\n        pass\n    import posixpath as path\n\n    try:\n        from posix import _have_functions\n    except ImportError:\n        pass\n\n    import posix\n    __all__.extend(_get_exports_list(posix))\n    del posix\n\nelif \'nt\' in _names:\n    name = \'nt\'\n    linesep = \'\\r\\n\'\n    from nt import *\n    try:\n        from nt import _exit\n        __all__.append(\'_exit\')\n    except ImportError:\n        pass\n    import ntpath as path\n\n    import nt\n    __all__.extend(_get_exports_list(nt))\n    del nt\n\n    try:\n        from nt import _have_functions\n    except ImportError:\n        pass\n\nelif \'ce\' in _names:\n    name = \'ce\'\n    linesep = \'\\r\\n\'\n    from ce import *\n    try:\n        from ce import _exit\n        __all__.append(\'_exit\')\n    except ImportError:\n        pass\n    # We can use the standard Windows path.\n    import ntpath as path\n\n    import ce\n    __all__.extend(_get_exports_list(ce))\n    del ce\n\n    try:\n        from ce import _have_functions\n    except ImportError:\n        pass\n\nelse:\n    raise ImportError(\'no os specific module found\')\n\nsys.modules[\'os.path\'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\n\ndel _names\n\n\nif _exists("_have_functions"):\n    _globals = globals()\n    def _add(str, fn):\n        if (fn in _globals) and (str in _have_functions):\n            _set.add(_globals[fn])\n\n    _set = set()\n    _add("HAVE_FACCESSAT",  "access")\n    _add("HAVE_FCHMODAT",   "chmod")\n    _add("HAVE_FCHOWNAT",   "chown")\n    _add("HAVE_FSTATAT",    "stat")\n    _add("HAVE_FUTIMESAT",  "utime")\n    _add("HAVE_LINKAT",     "link")\n    _add("HAVE_MKDIRAT",    "mkdir")\n    _add("HAVE_MKFIFOAT",   "mkfifo")\n    _add("HAVE_MKNODAT",    "mknod")\n    _add("HAVE_OPENAT",     "open")\n    _add("HAVE_READLINKAT", "readlink")\n    _add("HAVE_RENAMEAT",   "rename")\n    _add("HAVE_SYMLINKAT",  "symlink")\n    _add("HAVE_UNLINKAT",   "unlink")\n    _add("HAVE_UNLINKAT",   "rmdir")\n    _add("HAVE_UTIMENSAT",  "utime")\n    supports_dir_fd = _set\n\n    _set = set()\n    _add("HAVE_FACCESSAT",  "access")\n    supports_effective_ids = _set\n\n    _set = set()\n    _add("HAVE_FCHDIR",     "chdir")\n    _add("HAVE_FCHMOD",     "chmod")\n    _add("HAVE_FCHOWN",     "chown")\n    _add("HAVE_FDOPENDIR",  "listdir")\n    _add("HAVE_FEXECVE",    "execve")\n    _set.add(stat) # fstat always works\n    _add("HAVE_FTRUNCATE",  "truncate")\n    _add("HAVE_FUTIMENS",   "utime")\n    _add("HAVE_FUTIMES",    "utime")\n    _add("HAVE_FPATHCONF",  "pathconf")\n    if _exists("statvfs") and _exists("fstatvfs"): # mac os x10.3\n        _add("HAVE_FSTATVFS", "statvfs")\n    supports_fd = _set\n\n    _set = set()\n    _add("HAVE_FACCESSAT",  "access")\n    # Some platforms don\'t support lchmod().  Often the function exists\n    # anyway, as a stub that always returns ENOSUP or perhaps EOPNOTSUPP.\n    # (No, I don\'t know why that\'s a good design.)  ./configure will detect\n    # this and reject it--so HAVE_LCHMOD still won\'t be defined on such\n    # platforms.  This is Very Helpful.\n    #\n    # However, sometimes platforms without a working lchmod() *do* have\n    # fchmodat().  (Examples: Linux kernel 3.2 with glibc 2.15,\n    # OpenIndiana 3.x.)  And fchmodat() has a flag that theoretically makes\n    # it behave like lchmod().  So in theory it would be a suitable\n    # replacement for lchmod().  But when lchmod() doesn\'t work, fchmodat()\'s\n    # flag doesn\'t work *either*.  Sadly ./configure isn\'t sophisticated\n    # enough to detect this condition--it only determines whether or not\n    # fchmodat() minimally works.\n    #\n    # Therefore we simply ignore fchmodat() when deciding whether or not\n    # os.chmod supports follow_symlinks.  Just checking lchmod() is\n    # sufficient.  After all--if you have a working fchmodat(), your\n    # lchmod() almost certainly works too.\n    #\n    # _add("HAVE_FCHMODAT",   "chmod")\n    _add("HAVE_FCHOWNAT",   "chown")\n    _add("HAVE_FSTATAT",    "stat")\n    _add("HAVE_LCHFLAGS",   "chflags")\n    _add("HAVE_LCHMOD",     "chmod")\n    if _exists("lchown"): # mac os x10.3\n        _add("HAVE_LCHOWN", "chown")\n    _add("HAVE_LINKAT",     "link")\n    _add("HAVE_LUTIMES",    "utime")\n    _add("HAVE_LSTAT",      "stat")\n    _add("HAVE_FSTATAT",    "stat")\n    _add("HAVE_UTIMENSAT",  "utime")\n    _add("MS_WINDOWS",      "stat")\n    supports_follow_symlinks = _set\n\n    del _set\n    del _have_functions\n    del _globals\n    del _add\n\n\n# Python uses fixed values for the SEEK_ constants; they are mapped\n# to native constants if necessary in posixmodule.c\n# Other possible SEEK values are directly imported from posixmodule.c\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\n\ndef makedirs(name, mode=0o777, exist_ok=False):\n    """makedirs(name [, mode=0o777][, exist_ok=False])\n\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.\n\n    """\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    if head and tail and not path.exists(head):\n        try:\n            makedirs(head, mode, exist_ok)\n        except FileExistsError:\n            # Defeats race condition when another thread created the path\n            pass\n        cdir = curdir\n        if isinstance(tail, bytes):\n            cdir = bytes(curdir, \'ASCII\')\n        if tail == cdir:           # xxx/newdir/. exists if xxx/newdir exists\n            return\n    try:\n        mkdir(name, mode)\n    except OSError:\n        # Cannot rely on checking for EEXIST, since the operating system\n        # could give priority to other errors like EACCES or EROFS\n        if not exist_ok or not path.isdir(name):\n            raise\n\ndef removedirs(name):\n    """removedirs(name)\n\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n\n    """\n    rmdir(name)\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    while head and tail:\n        try:\n            rmdir(head)\n        except OSError:\n            break\n        head, tail = path.split(head)\n\ndef renames(old, new):\n    """renames(old, new)\n\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n    file.\n\n    """\n    head, tail = path.split(new)\n    if head and tail and not path.exists(head):\n        makedirs(head)\n    rename(old, new)\n    head, tail = path.split(old)\n    if head and tail:\n        try:\n            removedirs(head)\n        except OSError:\n            pass\n\n__all__.extend(["makedirs", "removedirs", "renames"])\n\ndef walk(top, topdown=True, onerror=None, followlinks=False):\n    """Directory tree generator.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding \'.\' and \'..\'), yields a 3-tuple\n\n        dirpath, dirnames, filenames\n\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding \'.\' and \'..\').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n    dirpath, do os.path.join(dirpath, name).\n\n    If optional arg \'topdown\' is true or not specified, the triple for a\n    directory is generated before the triples for any of its subdirectories\n    (directories are generated top down).  If topdown is false, the triple\n    for a directory is generated after the triples for all of its\n    subdirectories (directories are generated bottom up).\n\n    When topdown is true, the caller can modify the dirnames list in-place\n    (e.g., via del or slice assignment), and walk will only recurse into the\n    subdirectories whose names remain in dirnames; this can be used to prune the\n    search, or to impose a specific order of visiting.  Modifying dirnames when\n    topdown is false is ineffective, since the directories in dirnames have\n    already been generated by the time dirnames itself is generated. No matter\n    the value of topdown, the list of subdirectories is retrieved before the\n    tuples for the directory and its subdirectories are generated.\n\n    By default errors from the os.scandir() call are ignored.  If\n    optional arg \'onerror\' is specified, it should be a function; it\n    will be called with one argument, an OSError instance.  It can\n    report the error to continue with the walk, or raise the exception\n    to abort the walk.  Note that the filename is available as the\n    filename attribute of the exception object.\n\n    By default, os.walk does not follow symbolic links to subdirectories on\n    systems that support them.  In order to get this functionality, set the\n    optional argument \'followlinks\' to true.\n\n    Caution:  if you pass a relative pathname for top, don\'t change the\n    current working directory between resumptions of walk.  walk never\n    changes the current directory, and assumes that the client doesn\'t\n    either.\n\n    Example:\n\n    import os\n    from os.path import join, getsize\n    for root, dirs, files in os.walk(\'python/Lib/email\'):\n        print(root, "consumes", end="")\n        print(sum([getsize(join(root, name)) for name in files]), end="")\n        print("bytes in", len(files), "non-directory files")\n        if \'CVS\' in dirs:\n            dirs.remove(\'CVS\')  # don\'t visit CVS directories\n\n    """\n\n    dirs = []\n    nondirs = []\n\n    # We may not have read permission for top, in which case we can\'t\n    # get a list of the files the directory contains.  os.walk\n    # always suppressed the exception then, rather than blow up for a\n    # minor reason when (say) a thousand readable directories are still\n    # left to visit.  That logic is copied here.\n    try:\n        if name == \'nt\' and isinstance(top, bytes):\n            scandir_it = _dummy_scandir(top)\n        else:\n            # Note that scandir is global in this module due\n            # to earlier import-*.\n            scandir_it = scandir(top)\n        entries = list(scandir_it)\n    except OSError as error:\n        if onerror is not None:\n            onerror(error)\n        return\n\n    for entry in entries:\n        try:\n            is_dir = entry.is_dir()\n        except OSError:\n            # If is_dir() raises an OSError, consider that the entry is not\n            # a directory, same behaviour than os.path.isdir().\n            is_dir = False\n\n        if is_dir:\n            dirs.append(entry.name)\n        else:\n            nondirs.append(entry.name)\n\n        if not topdown and is_dir:\n            # Bottom-up: recurse into sub-directory, but exclude symlinks to\n            # directories if followlinks is False\n            if followlinks:\n                walk_into = True\n            else:\n                try:\n                    is_symlink = entry.is_symlink()\n                except OSError:\n                    # If is_symlink() raises an OSError, consider that the\n                    # entry is not a symbolic link, same behaviour than\n                    # os.path.islink().\n                    is_symlink = False\n                walk_into = not is_symlink\n\n            if walk_into:\n                yield from walk(entry.path, topdown, onerror, followlinks)\n\n    # Yield before recursion if going top down\n    if topdown:\n        yield top, dirs, nondirs\n\n        # Recurse into sub-directories\n        islink, join = path.islink, path.join\n        for dirname in dirs:\n            new_path = join(top, dirname)\n            # Issue #23605: os.path.islink() is used instead of caching\n            # entry.is_symlink() result during the loop on os.scandir() because\n            # the caller can replace the directory entry during the "yield"\n            # above.\n            if followlinks or not islink(new_path):\n                yield from walk(new_path, topdown, onerror, followlinks)\n    else:\n        # Yield after recursion if going bottom up\n        yield top, dirs, nondirs\n\nclass _DummyDirEntry:\n    """Dummy implementation of DirEntry\n\n    Only used internally by os.walk(bytes). Since os.walk() doesn\'t need the\n    follow_symlinks parameter: don\'t implement it, always follow symbolic\n    links.\n    """\n\n    def __init__(self, dir, name):\n        self.name = name\n        self.path = path.join(dir, name)\n        # Mimick FindFirstFile/FindNextFile: we should get file attributes\n        # while iterating on a directory\n        self._stat = None\n        self._lstat = None\n        try:\n            self.stat(follow_symlinks=False)\n        except OSError:\n            pass\n\n    def stat(self, *, follow_symlinks=True):\n        if follow_symlinks:\n            if self._stat is None:\n                self._stat = stat(self.path)\n            return self._stat\n        else:\n            if self._lstat is None:\n                self._lstat = stat(self.path, follow_symlinks=False)\n            return self._lstat\n\n    def is_dir(self):\n        if self._lstat is not None and not self.is_symlink():\n            # use the cache lstat\n            stat = self.stat(follow_symlinks=False)\n            return st.S_ISDIR(stat.st_mode)\n\n        stat = self.stat()\n        return st.S_ISDIR(stat.st_mode)\n\n    def is_symlink(self):\n        stat = self.stat(follow_symlinks=False)\n        return st.S_ISLNK(stat.st_mode)\n\ndef _dummy_scandir(dir):\n    # listdir-based implementation for bytes patches on Windows\n    for name in listdir(dir):\n        yield _DummyDirEntry(dir, name)\n\n__all__.append("walk")\n\nif {open, stat} <= supports_dir_fd and {listdir, stat} <= supports_fd:\n\n    def fwalk(top=".", topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None):\n        """Directory tree generator.\n\n        This behaves exactly like walk(), except that it yields a 4-tuple\n\n            dirpath, dirnames, filenames, dirfd\n\n        `dirpath`, `dirnames` and `filenames` are identical to walk() output,\n        and `dirfd` is a file descriptor referring to the directory `dirpath`.\n\n        The advantage of fwalk() over walk() is that it\'s safe against symlink\n        races (when follow_symlinks is False).\n\n        If dir_fd is not None, it should be a file descriptor open to a directory,\n          and top should be relative; top will then be relative to that directory.\n          (dir_fd is always supported for fwalk.)\n\n        Caution:\n        Since fwalk() yields file descriptors, those are only valid until the\n        next iteration step, so you should dup() them if you want to keep them\n        for a longer period.\n\n        Example:\n\n        import os\n        for root, dirs, files, rootfd in os.fwalk(\'python/Lib/email\'):\n            print(root, "consumes", end="")\n            print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),\n                  end="")\n            print("bytes in", len(files), "non-directory files")\n            if \'CVS\' in dirs:\n                dirs.remove(\'CVS\')  # don\'t visit CVS directories\n        """\n        # Note: To guard against symlink races, we use the standard\n        # lstat()/open()/fstat() trick.\n        orig_st = stat(top, follow_symlinks=False, dir_fd=dir_fd)\n        topfd = open(top, O_RDONLY, dir_fd=dir_fd)\n        try:\n            if (follow_symlinks or (st.S_ISDIR(orig_st.st_mode) and\n                                    path.samestat(orig_st, stat(topfd)))):\n                yield from _fwalk(topfd, top, topdown, onerror, follow_symlinks)\n        finally:\n            close(topfd)\n\n    def _fwalk(topfd, toppath, topdown, onerror, follow_symlinks):\n        # Note: This uses O(depth of the directory tree) file descriptors: if\n        # necessary, it can be adapted to only require O(1) FDs, see issue\n        # #13734.\n\n        names = listdir(topfd)\n        dirs, nondirs = [], []\n        for name in names:\n            try:\n                # Here, we don\'t use AT_SYMLINK_NOFOLLOW to be consistent with\n                # walk() which reports symlinks to directories as directories.\n                # We do however check for symlinks before recursing into\n                # a subdirectory.\n                if st.S_ISDIR(stat(name, dir_fd=topfd).st_mode):\n                    dirs.append(name)\n                else:\n                    nondirs.append(name)\n            except OSError:\n                try:\n                    # Add dangling symlinks, ignore disappeared files\n                    if st.S_ISLNK(stat(name, dir_fd=topfd, follow_symlinks=False)\n                                .st_mode):\n                        nondirs.append(name)\n                except OSError:\n                    continue\n\n        if topdown:\n            yield toppath, dirs, nondirs, topfd\n\n        for name in dirs:\n            try:\n                orig_st = stat(name, dir_fd=topfd, follow_symlinks=follow_symlinks)\n                dirfd = open(name, O_RDONLY, dir_fd=topfd)\n            except OSError as err:\n                if onerror is not None:\n                    onerror(err)\n                continue\n            try:\n                if follow_symlinks or path.samestat(orig_st, stat(dirfd)):\n                    dirpath = path.join(toppath, name)\n                    yield from _fwalk(dirfd, dirpath, topdown, onerror, follow_symlinks)\n            finally:\n                close(dirfd)\n\n        if not topdown:\n            yield toppath, dirs, nondirs, topfd\n\n    __all__.append("fwalk")\n\n# Make sure os.environ exists, at least\ntry:\n    environ\nexcept NameError:\n    environ = {}\n\ndef execl(file, *args):\n    """execl(file, *args)\n\n    Execute the executable file with argument list args, replacing the\n    current process. """\n    execv(file, args)\n\ndef execle(file, *args):\n    """execle(file, *args, env)\n\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. """\n    env = args[-1]\n    execve(file, args[:-1], env)\n\ndef execlp(file, *args):\n    """execlp(file, *args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. """\n    execvp(file, args)\n\ndef execlpe(file, *args):\n    """execlpe(file, *args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. """\n    env = args[-1]\n    execvpe(file, args[:-1], env)\n\ndef execvp(file, args):\n    """execvp(file, args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. """\n    _execvpe(file, args)\n\ndef execvpe(file, args, env):\n    """execvpe(file, args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. """\n    _execvpe(file, args, env)\n\n__all__.extend(["execl","execle","execlp","execlpe","execvp","execvpe"])\n\ndef _execvpe(file, args, env=None):\n    if env is not None:\n        exec_func = execve\n        argrest = (args, env)\n    else:\n        exec_func = execv\n        argrest = (args,)\n        env = environ\n\n    head, tail = path.split(file)\n    if head:\n        exec_func(file, *argrest)\n        return\n    last_exc = saved_exc = None\n    saved_tb = None\n    path_list = get_exec_path(env)\n    if name != \'nt\':\n        file = fsencode(file)\n        path_list = map(fsencode, path_list)\n    for dir in path_list:\n        fullname = path.join(dir, file)\n        try:\n            exec_func(fullname, *argrest)\n        except OSError as e:\n            last_exc = e\n            tb = sys.exc_info()[2]\n            if (e.errno != errno.ENOENT and e.errno != errno.ENOTDIR\n                and saved_exc is None):\n                saved_exc = e\n                saved_tb = tb\n    if saved_exc:\n        raise saved_exc.with_traceback(saved_tb)\n    raise last_exc.with_traceback(tb)\n\n\ndef get_exec_path(env=None):\n    """Returns the sequence of directories that will be searched for the\n    named executable (similar to a shell) when launching a process.\n\n    *env* must be an environment variable dict or None.  If *env* is None,\n    os.environ will be used.\n    """\n    # Use a local import instead of a global import to limit the number of\n    # modules loaded at startup: the os module is always loaded at startup by\n    # Python. It may also avoid a bootstrap issue.\n    import warnings\n\n    if env is None:\n        env = environ\n\n    # {b\'PATH\': ...}.get(\'PATH\') and {\'PATH\': ...}.get(b\'PATH\') emit a\n    # BytesWarning when using python -b or python -bb: ignore the warning\n    with warnings.catch_warnings():\n        warnings.simplefilter("ignore", BytesWarning)\n\n        try:\n            path_list = env.get(\'PATH\')\n        except TypeError:\n            path_list = None\n\n        if supports_bytes_environ:\n            try:\n                path_listb = env[b\'PATH\']\n            except (KeyError, TypeError):\n                pass\n            else:\n                if path_list is not None:\n                    raise ValueError(\n                        "env cannot contain \'PATH\' and b\'PATH\' keys")\n                path_list = path_listb\n\n            if path_list is not None and isinstance(path_list, bytes):\n                path_list = fsdecode(path_list)\n\n    if path_list is None:\n        path_list = defpath\n    return path_list.split(pathsep)\n\n\n# Change environ to automatically call putenv(), unsetenv if they exist.\nfrom _collections_abc import MutableMapping\n\nclass _Environ(MutableMapping):\n    def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue, putenv, unsetenv):\n        self.encodekey = encodekey\n        self.decodekey = decodekey\n        self.encodevalue = encodevalue\n        self.decodevalue = decodevalue\n        self.putenv = putenv\n        self.unsetenv = unsetenv\n        self._data = data\n\n    def __getitem__(self, key):\n        try:\n            value = self._data[self.encodekey(key)]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n        return self.decodevalue(value)\n\n    def __setitem__(self, key, value):\n        key = self.encodekey(key)\n        value = self.encodevalue(value)\n        self.putenv(key, value)\n        self._data[key] = value\n\n    def __delitem__(self, key):\n        encodedkey = self.encodekey(key)\n        self.unsetenv(encodedkey)\n        try:\n            del self._data[encodedkey]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n\n    def __iter__(self):\n        for key in self._data:\n            yield self.decodekey(key)\n\n    def __len__(self):\n        return len(self._data)\n\n    def __repr__(self):\n        return \'environ({{{}}})\'.format(\', \'.join(\n            (\'{!r}: {!r}\'.format(self.decodekey(key), self.decodevalue(value))\n            for key, value in self._data.items())))\n\n    def copy(self):\n        return dict(self)\n\n    def setdefault(self, key, value):\n        if key not in self:\n            self[key] = value\n        return self[key]\n\ntry:\n    _putenv = putenv\nexcept NameError:\n    _putenv = lambda key, value: None\nelse:\n    if "putenv" not in __all__:\n        __all__.append("putenv")\n\ntry:\n    _unsetenv = unsetenv\nexcept NameError:\n    _unsetenv = lambda key: _putenv(key, "")\nelse:\n    if "unsetenv" not in __all__:\n        __all__.append("unsetenv")\n\ndef _createenviron():\n    if name == \'nt\':\n        # Where Env Var Names Must Be UPPERCASE\n        def check_str(value):\n            if not isinstance(value, str):\n                raise TypeError("str expected, not %s" % type(value).__name__)\n            return value\n        encode = check_str\n        decode = str\n        def encodekey(key):\n            return encode(key).upper()\n        data = {}\n        for key, value in environ.items():\n            data[encodekey(key)] = value\n    else:\n        # Where Env Var Names Can Be Mixed Case\n        encoding = sys.getfilesystemencoding()\n        def encode(value):\n            if not isinstance(value, str):\n                raise TypeError("str expected, not %s" % type(value).__name__)\n            return value.encode(encoding, \'surrogateescape\')\n        def decode(value):\n            return value.decode(encoding, \'surrogateescape\')\n        encodekey = encode\n        data = environ\n    return _Environ(data,\n        encodekey, decode,\n        encode, decode,\n        _putenv, _unsetenv)\n\n# unicode environ\nenviron = _createenviron()\ndel _createenviron\n\n\ndef getenv(key, default=None):\n    """Get an environment variable, return None if it doesn\'t exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str."""\n    return environ.get(key, default)\n\nsupports_bytes_environ = (name != \'nt\')\n__all__.extend(("getenv", "supports_bytes_environ"))\n\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):\n            raise TypeError("bytes expected, not %s" % type(value).__name__)\n        return value\n\n    # bytes environ\n    environb = _Environ(environ._data,\n        _check_bytes, bytes,\n        _check_bytes, bytes,\n        _putenv, _unsetenv)\n    del _check_bytes\n\n    def getenvb(key, default=None):\n        """Get an environment variable, return None if it doesn\'t exist.\n        The optional second argument can specify an alternate default.\n        key, default and the result are bytes."""\n        return environb.get(key, default)\n\n    __all__.extend(("environb", "getenvb"))\n\ndef _fscodec():\n    encoding = sys.getfilesystemencoding()\n    if encoding == \'mbcs\':\n        errors = \'strict\'\n    else:\n        errors = \'surrogateescape\'\n\n    def fsencode(filename):\n        """\n        Encode filename to the filesystem encoding with \'surrogateescape\' error\n        handler, return bytes unchanged. On Windows, use \'strict\' error handler if\n        the file system encoding is \'mbcs\' (which is the default encoding).\n        """\n        if isinstance(filename, bytes):\n            return filename\n        elif isinstance(filename, str):\n            return filename.encode(encoding, errors)\n        else:\n            raise TypeError("expect bytes or str, not %s" % type(filename).__name__)\n\n    def fsdecode(filename):\n        """\n        Decode filename from the filesystem encoding with \'surrogateescape\' error\n        handler, return str unchanged. On Windows, use \'strict\' error handler if\n        the file system encoding is \'mbcs\' (which is the default encoding).\n        """\n        if isinstance(filename, str):\n            return filename\n        elif isinstance(filename, bytes):\n            return filename.decode(encoding, errors)\n        else:\n            raise TypeError("expect bytes or str, not %s" % type(filename).__name__)\n\n    return fsencode, fsdecode\n\nfsencode, fsdecode = _fscodec()\ndel _fscodec\n\n# Supply spawn*() (probably only for Unix)\nif _exists("fork") and not _exists("spawnv") and _exists("execv"):\n\n    P_WAIT = 0\n    P_NOWAIT = P_NOWAITO = 1\n\n    __all__.extend(["P_WAIT", "P_NOWAIT", "P_NOWAITO"])\n\n    # XXX Should we support P_DETACH?  I suppose it could fork()**2\n    # and close the std I/O streams.  Also, P_OVERLAY is the same\n    # as execv*()?\n\n    def _spawnvef(mode, file, args, env, func):\n        # Internal helper; func is the exec*() function to use\n        pid = fork()\n        if not pid:\n            # Child\n            try:\n                if env is None:\n                    func(file, args)\n                else:\n                    func(file, args, env)\n            except:\n                _exit(127)\n        else:\n            # Parent\n            if mode == P_NOWAIT:\n                return pid # Caller is responsible for waiting!\n            while 1:\n                wpid, sts = waitpid(pid, 0)\n                if WIFSTOPPED(sts):\n                    continue\n                elif WIFSIGNALED(sts):\n                    return -WTERMSIG(sts)\n                elif WIFEXITED(sts):\n                    return WEXITSTATUS(sts)\n                else:\n                    raise OSError("Not stopped, signaled or exited???")\n\n    def spawnv(mode, file, args):\n        """spawnv(mode, file, args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, None, execv)\n\n    def spawnve(mode, file, args, env):\n        """spawnve(mode, file, args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nspecified environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, env, execve)\n\n    # Note: spawnvp[e] is\'t currently supported on Windows\n\n    def spawnvp(mode, file, args):\n        """spawnvp(mode, file, args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, None, execvp)\n\n    def spawnvpe(mode, file, args, env):\n        """spawnvpe(mode, file, args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, env, execvpe)\n\n\n    __all__.extend(["spawnv", "spawnve", "spawnvp", "spawnvpe"])\n\n\nif _exists("spawnv"):\n    # These aren\'t supplied by the basic Windows code\n    # but can be easily implemented in Python\n\n    def spawnl(mode, file, *args):\n        """spawnl(mode, file, *args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return spawnv(mode, file, args)\n\n    def spawnle(mode, file, *args):\n        """spawnle(mode, file, *args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nsupplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        env = args[-1]\n        return spawnve(mode, file, args[:-1], env)\n\n\n    __all__.extend(["spawnl", "spawnle"])\n\n\nif _exists("spawnvp"):\n    # At the moment, Windows doesn\'t implement spawnvp[e],\n    # so it won\'t have spawnlp[e] either.\n    def spawnlp(mode, file, *args):\n        """spawnlp(mode, file, *args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return spawnvp(mode, file, args)\n\n    def spawnlpe(mode, file, *args):\n        """spawnlpe(mode, file, *args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        env = args[-1]\n        return spawnvpe(mode, file, args[:-1], env)\n\n\n    __all__.extend(["spawnlp", "spawnlpe"])\n\n\n# Supply os.popen()\ndef popen(cmd, mode="r", buffering=-1):\n    if not isinstance(cmd, str):\n        raise TypeError("invalid cmd type (%s, expected string)" % type(cmd))\n    if mode not in ("r", "w"):\n        raise ValueError("invalid mode %r" % mode)\n    if buffering == 0 or buffering is None:\n        raise ValueError("popen() does not support unbuffered streams")\n    import subprocess, io\n    if mode == "r":\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdout=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdout), proc)\n    else:\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdin=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdin), proc)\n\n# Helper for popen() -- a proxy for a file whose close waits for the process\nclass _wrap_close:\n    def __init__(self, stream, proc):\n        self._stream = stream\n        self._proc = proc\n    def close(self):\n        self._stream.close()\n        returncode = self._proc.wait()\n        if returncode == 0:\n            return None\n        if name == \'nt\':\n            return returncode\n        else:\n            return returncode << 8  # Shift left to match old behavior\n    def __enter__(self):\n        return self\n    def __exit__(self, *args):\n        self.close()\n    def __getattr__(self, name):\n        return getattr(self._stream, name)\n    def __iter__(self):\n        return iter(self._stream)\n\n# Supply os.fdopen()\ndef fdopen(fd, *args, **kwargs):\n    if not isinstance(fd, int):\n        raise TypeError("invalid fd type (%s, expected integer)" % type(fd))\n    import io\n    return io.open(fd, *args, **kwargs)\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'r"""OS routines for NT or Posix depending on what system we\'re on.\n\nThis exports:\n  - all functions from posix, nt or ce, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either \'posix\', \'nt\' or \'ce\'.\n  - os.curdir is a string representing the current directory (\'.\' or \':\')\n  - os.pardir is a string representing the parent directory (\'..\' or \'::\')\n  - os.sep is the (or a most common) pathname separator (\'/\' or \':\' or \'\\\\\')\n  - os.extsep is the extension separator (always \'.\')\n  - os.altsep is the alternate pathname separator (None or \'/\')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files (\'\\r\' or \'\\n\' or \'\\r\\n\')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device (\'/dev/null\', etc.)\n\nPrograms that import and use \'os\' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n"""\n\n#\'\n\nimport sys, errno\nimport stat as st\n\n_names = sys.builtin_module_names\n\n# Note:  more names are added to __all__ later.\n__all__ = ["altsep", "curdir", "pardir", "sep", "pathsep", "linesep",\n           "defpath", "name", "path", "devnull", "SEEK_SET", "SEEK_CUR",\n           "SEEK_END", "fsencode", "fsdecode", "get_exec_path", "fdopen",\n           "popen", "extsep"]\n\ndef _exists(name):\n    return name in globals()\n\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != \'_\']\n\n# Any new dependencies of the os module and/or changes in path separator\n# requires updating importlib as well.\nif \'posix\' in _names:\n    name = \'posix\'\n    linesep = \'\\n\'\n    from posix import *\n    try:\n        from posix import _exit\n        __all__.append(\'_exit\')\n    except ImportError:\n        pass\n    import posixpath as path\n\n    try:\n        from posix import _have_functions\n    except ImportError:\n        pass\n\n    import posix\n    __all__.extend(_get_exports_list(posix))\n    del posix\n\nelif \'nt\' in _names:\n    name = \'nt\'\n    linesep = \'\\r\\n\'\n    from nt import *\n    try:\n        from nt import _exit\n        __all__.append(\'_exit\')\n    except ImportError:\n        pass\n    import ntpath as path\n\n    import nt\n    __all__.extend(_get_exports_list(nt))\n    del nt\n\n    try:\n        from nt import _have_functions\n    except ImportError:\n        pass\n\nelif \'ce\' in _names:\n    name = \'ce\'\n    linesep = \'\\r\\n\'\n    from ce import *\n    try:\n        from ce import _exit\n        __all__.append(\'_exit\')\n    except ImportError:\n        pass\n    # We can use the standard Windows path.\n    import ntpath as path\n\n    import ce\n    __all__.extend(_get_exports_list(ce))\n    del ce\n\n    try:\n        from ce import _have_functions\n    except ImportError:\n        pass\n\nelse:\n    raise ImportError(\'no os specific module found\')\n\nsys.modules[\'os.path\'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\n\ndel _names\n\n\nif _exists("_have_functions"):\n    _globals = globals()\n    def _add(str, fn):\n        if (fn in _globals) and (str in _have_functions):\n            _set.add(_globals[fn])\n\n    _set = set()\n    _add("HAVE_FACCESSAT",  "access")\n    _add("HAVE_FCHMODAT",   "chmod")\n    _add("HAVE_FCHOWNAT",   "chown")\n    _add("HAVE_FSTATAT",    "stat")\n    _add("HAVE_FUTIMESAT",  "utime")\n    _add("HAVE_LINKAT",     "link")\n    _add("HAVE_MKDIRAT",    "mkdir")\n    _add("HAVE_MKFIFOAT",   "mkfifo")\n    _add("HAVE_MKNODAT",    "mknod")\n    _add("HAVE_OPENAT",     "open")\n    _add("HAVE_READLINKAT", "readlink")\n    _add("HAVE_RENAMEAT",   "rename")\n    _add("HAVE_SYMLINKAT",  "symlink")\n    _add("HAVE_UNLINKAT",   "unlink")\n    _add("HAVE_UNLINKAT",   "rmdir")\n    _add("HAVE_UTIMENSAT",  "utime")\n    supports_dir_fd = _set\n\n    _set = set()\n    _add("HAVE_FACCESSAT",  "access")\n    supports_effective_ids = _set\n\n    _set = set()\n    _add("HAVE_FCHDIR",     "chdir")\n    _add("HAVE_FCHMOD",     "chmod")\n    _add("HAVE_FCHOWN",     "chown")\n    _add("HAVE_FDOPENDIR",  "listdir")\n    _add("HAVE_FEXECVE",    "execve")\n    _set.add(stat) # fstat always works\n    _add("HAVE_FTRUNCATE",  "truncate")\n    _add("HAVE_FUTIMENS",   "utime")\n    _add("HAVE_FUTIMES",    "utime")\n    _add("HAVE_FPATHCONF",  "pathconf")\n    if _exists("statvfs") and _exists("fstatvfs"): # mac os x10.3\n        _add("HAVE_FSTATVFS", "statvfs")\n    supports_fd = _set\n\n    _set = set()\n    _add("HAVE_FACCESSAT",  "access")\n    # Some platforms don\'t support lchmod().  Often the function exists\n    # anyway, as a stub that always returns ENOSUP or perhaps EOPNOTSUPP.\n    # (No, I don\'t know why that\'s a good design.)  ./configure will detect\n    # this and reject it--so HAVE_LCHMOD still won\'t be defined on such\n    # platforms.  This is Very Helpful.\n    #\n    # However, sometimes platforms without a working lchmod() *do* have\n    # fchmodat().  (Examples: Linux kernel 3.2 with glibc 2.15,\n    # OpenIndiana 3.x.)  And fchmodat() has a flag that theoretically makes\n    # it behave like lchmod().  So in theory it would be a suitable\n    # replacement for lchmod().  But when lchmod() doesn\'t work, fchmodat()\'s\n    # flag doesn\'t work *either*.  Sadly ./configure isn\'t sophisticated\n    # enough to detect this condition--it only determines whether or not\n    # fchmodat() minimally works.\n    #\n    # Therefore we simply ignore fchmodat() when deciding whether or not\n    # os.chmod supports follow_symlinks.  Just checking lchmod() is\n    # sufficient.  After all--if you have a working fchmodat(), your\n    # lchmod() almost certainly works too.\n    #\n    # _add("HAVE_FCHMODAT",   "chmod")\n    _add("HAVE_FCHOWNAT",   "chown")\n    _add("HAVE_FSTATAT",    "stat")\n    _add("HAVE_LCHFLAGS",   "chflags")\n    _add("HAVE_LCHMOD",     "chmod")\n    if _exists("lchown"): # mac os x10.3\n        _add("HAVE_LCHOWN", "chown")\n    _add("HAVE_LINKAT",     "link")\n    _add("HAVE_LUTIMES",    "utime")\n    _add("HAVE_LSTAT",      "stat")\n    _add("HAVE_FSTATAT",    "stat")\n    _add("HAVE_UTIMENSAT",  "utime")\n    _add("MS_WINDOWS",      "stat")\n    supports_follow_symlinks = _set\n\n    del _set\n    del _have_functions\n    del _globals\n    del _add\n\n\n# Python uses fixed values for the SEEK_ constants; they are mapped\n# to native constants if necessary in posixmodule.c\n# Other possible SEEK values are directly imported from posixmodule.c\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\n\ndef makedirs(name, mode=0o777, exist_ok=False):\n    """makedirs(name [, mode=0o777][, exist_ok=False])\n\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.\n\n    """\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    if head and tail and not path.exists(head):\n        try:\n            makedirs(head, mode, exist_ok)\n        except FileExistsError:\n            # Defeats race condition when another thread created the path\n            pass\n        cdir = curdir\n        if isinstance(tail, bytes):\n            cdir = bytes(curdir, \'ASCII\')\n        if tail == cdir:           # xxx/newdir/. exists if xxx/newdir exists\n            return\n    try:\n        mkdir(name, mode)\n    except OSError:\n        # Cannot rely on checking for EEXIST, since the operating system\n        # could give priority to other errors like EACCES or EROFS\n        if not exist_ok or not path.isdir(name):\n            raise\n\ndef removedirs(name):\n    """removedirs(name)\n\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n\n    """\n    rmdir(name)\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    while head and tail:\n        try:\n            rmdir(head)\n        except OSError:\n            break\n        head, tail = path.split(head)\n\ndef renames(old, new):\n    """renames(old, new)\n\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n    file.\n\n    """\n    head, tail = path.split(new)\n    if head and tail and not path.exists(head):\n        makedirs(head)\n    rename(old, new)\n    head, tail = path.split(old)\n    if head and tail:\n        try:\n            removedirs(head)\n        except OSError:\n            pass\n\n__all__.extend(["makedirs", "removedirs", "renames"])\n\ndef walk(top, topdown=True, onerror=None, followlinks=False):\n    """Directory tree generator.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding \'.\' and \'..\'), yields a 3-tuple\n\n        dirpath, dirnames, filenames\n\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding \'.\' and \'..\').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n    dirpath, do os.path.join(dirpath, name).\n\n    If optional arg \'topdown\' is true or not specified, the triple for a\n    directory is generated before the triples for any of its subdirectories\n    (directories are generated top down).  If topdown is false, the triple\n    for a directory is generated after the triples for all of its\n    subdirectories (directories are generated bottom up).\n\n    When topdown is true, the caller can modify the dirnames list in-place\n    (e.g., via del or slice assignment), and walk will only recurse into the\n    subdirectories whose names remain in dirnames; this can be used to prune the\n    search, or to impose a specific order of visiting.  Modifying dirnames when\n    topdown is false is ineffective, since the directories in dirnames have\n    already been generated by the time dirnames itself is generated. No matter\n    the value of topdown, the list of subdirectories is retrieved before the\n    tuples for the directory and its subdirectories are generated.\n\n    By default errors from the os.scandir() call are ignored.  If\n    optional arg \'onerror\' is specified, it should be a function; it\n    will be called with one argument, an OSError instance.  It can\n    report the error to continue with the walk, or raise the exception\n    to abort the walk.  Note that the filename is available as the\n    filename attribute of the exception object.\n\n    By default, os.walk does not follow symbolic links to subdirectories on\n    systems that support them.  In order to get this functionality, set the\n    optional argument \'followlinks\' to true.\n\n    Caution:  if you pass a relative pathname for top, don\'t change the\n    current working directory between resumptions of walk.  walk never\n    changes the current directory, and assumes that the client doesn\'t\n    either.\n\n    Example:\n\n    import os\n    from os.path import join, getsize\n    for root, dirs, files in os.walk(\'python/Lib/email\'):\n        print(root, "consumes", end="")\n        print(sum([getsize(join(root, name)) for name in files]), end="")\n        print("bytes in", len(files), "non-directory files")\n        if \'CVS\' in dirs:\n            dirs.remove(\'CVS\')  # don\'t visit CVS directories\n\n    """\n\n    dirs = []\n    nondirs = []\n\n    # We may not have read permission for top, in which case we can\'t\n    # get a list of the files the directory contains.  os.walk\n    # always suppressed the exception then, rather than blow up for a\n    # minor reason when (say) a thousand readable directories are still\n    # left to visit.  That logic is copied here.\n    try:\n        if name == \'nt\' and isinstance(top, bytes):\n            scandir_it = _dummy_scandir(top)\n        else:\n            # Note that scandir is global in this module due\n            # to earlier import-*.\n            scandir_it = scandir(top)\n        entries = list(scandir_it)\n    except OSError as error:\n        if onerror is not None:\n            onerror(error)\n        return\n\n    for entry in entries:\n        try:\n            is_dir = entry.is_dir()\n        except OSError:\n            # If is_dir() raises an OSError, consider that the entry is not\n            # a directory, same behaviour than os.path.isdir().\n            is_dir = False\n\n        if is_dir:\n            dirs.append(entry.name)\n        else:\n            nondirs.append(entry.name)\n\n        if not topdown and is_dir:\n            # Bottom-up: recurse into sub-directory, but exclude symlinks to\n            # directories if followlinks is False\n            if followlinks:\n                walk_into = True\n            else:\n                try:\n                    is_symlink = entry.is_symlink()\n                except OSError:\n                    # If is_symlink() raises an OSError, consider that the\n                    # entry is not a symbolic link, same behaviour than\n                    # os.path.islink().\n                    is_symlink = False\n                walk_into = not is_symlink\n\n            if walk_into:\n                yield from walk(entry.path, topdown, onerror, followlinks)\n\n    # Yield before recursion if going top down\n    if topdown:\n        yield top, dirs, nondirs\n\n        # Recurse into sub-directories\n        islink, join = path.islink, path.join\n        for dirname in dirs:\n            new_path = join(top, dirname)\n            # Issue #23605: os.path.islink() is used instead of caching\n            # entry.is_symlink() result during the loop on os.scandir() because\n            # the caller can replace the directory entry during the "yield"\n            # above.\n            if followlinks or not islink(new_path):\n                yield from walk(new_path, topdown, onerror, followlinks)\n    else:\n        # Yield after recursion if going bottom up\n        yield top, dirs, nondirs\n\nclass _DummyDirEntry:\n    """Dummy implementation of DirEntry\n\n    Only used internally by os.walk(bytes). Since os.walk() doesn\'t need the\n    follow_symlinks parameter: don\'t implement it, always follow symbolic\n    links.\n    """\n\n    def __init__(self, dir, name):\n        self.name = name\n        self.path = path.join(dir, name)\n        # Mimick FindFirstFile/FindNextFile: we should get file attributes\n        # while iterating on a directory\n        self._stat = None\n        self._lstat = None\n        try:\n            self.stat(follow_symlinks=False)\n        except OSError:\n            pass\n\n    def stat(self, *, follow_symlinks=True):\n        if follow_symlinks:\n            if self._stat is None:\n                self._stat = stat(self.path)\n            return self._stat\n        else:\n            if self._lstat is None:\n                self._lstat = stat(self.path, follow_symlinks=False)\n            return self._lstat\n\n    def is_dir(self):\n        if self._lstat is not None and not self.is_symlink():\n            # use the cache lstat\n            stat = self.stat(follow_symlinks=False)\n            return st.S_ISDIR(stat.st_mode)\n\n        stat = self.stat()\n        return st.S_ISDIR(stat.st_mode)\n\n    def is_symlink(self):\n        stat = self.stat(follow_symlinks=False)\n        return st.S_ISLNK(stat.st_mode)\n\ndef _dummy_scandir(dir):\n    # listdir-based implementation for bytes patches on Windows\n    for name in listdir(dir):\n        yield _DummyDirEntry(dir, name)\n\n__all__.append("walk")\n\nif {open, stat} <= supports_dir_fd and {listdir, stat} <= supports_fd:\n\n    def fwalk(top=".", topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None):\n        """Directory tree generator.\n\n        This behaves exactly like walk(), except that it yields a 4-tuple\n\n            dirpath, dirnames, filenames, dirfd\n\n        `dirpath`, `dirnames` and `filenames` are identical to walk() output,\n        and `dirfd` is a file descriptor referring to the directory `dirpath`.\n\n        The advantage of fwalk() over walk() is that it\'s safe against symlink\n        races (when follow_symlinks is False).\n\n        If dir_fd is not None, it should be a file descriptor open to a directory,\n          and top should be relative; top will then be relative to that directory.\n          (dir_fd is always supported for fwalk.)\n\n        Caution:\n        Since fwalk() yields file descriptors, those are only valid until the\n        next iteration step, so you should dup() them if you want to keep them\n        for a longer period.\n\n        Example:\n\n        import os\n        for root, dirs, files, rootfd in os.fwalk(\'python/Lib/email\'):\n            print(root, "consumes", end="")\n            print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),\n                  end="")\n            print("bytes in", len(files), "non-directory files")\n            if \'CVS\' in dirs:\n                dirs.remove(\'CVS\')  # don\'t visit CVS directories\n        """\n        # Note: To guard against symlink races, we use the standard\n        # lstat()/open()/fstat() trick.\n        orig_st = stat(top, follow_symlinks=False, dir_fd=dir_fd)\n        topfd = open(top, O_RDONLY, dir_fd=dir_fd)\n        try:\n            if (follow_symlinks or (st.S_ISDIR(orig_st.st_mode) and\n                                    path.samestat(orig_st, stat(topfd)))):\n                yield from _fwalk(topfd, top, topdown, onerror, follow_symlinks)\n        finally:\n            close(topfd)\n\n    def _fwalk(topfd, toppath, topdown, onerror, follow_symlinks):\n        # Note: This uses O(depth of the directory tree) file descriptors: if\n        # necessary, it can be adapted to only require O(1) FDs, see issue\n        # #13734.\n\n        names = listdir(topfd)\n        dirs, nondirs = [], []\n        for name in names:\n            try:\n                # Here, we don\'t use AT_SYMLINK_NOFOLLOW to be consistent with\n                # walk() which reports symlinks to directories as directories.\n                # We do however check for symlinks before recursing into\n                # a subdirectory.\n                if st.S_ISDIR(stat(name, dir_fd=topfd).st_mode):\n                    dirs.append(name)\n                else:\n                    nondirs.append(name)\n            except OSError:\n                try:\n                    # Add dangling symlinks, ignore disappeared files\n                    if st.S_ISLNK(stat(name, dir_fd=topfd, follow_symlinks=False)\n                                .st_mode):\n                        nondirs.append(name)\n                except OSError:\n                    continue\n\n        if topdown:\n            yield toppath, dirs, nondirs, topfd\n\n        for name in dirs:\n            try:\n                orig_st = stat(name, dir_fd=topfd, follow_symlinks=follow_symlinks)\n                dirfd = open(name, O_RDONLY, dir_fd=topfd)\n            except OSError as err:\n                if onerror is not None:\n                    onerror(err)\n                continue\n            try:\n                if follow_symlinks or path.samestat(orig_st, stat(dirfd)):\n                    dirpath = path.join(toppath, name)\n                    yield from _fwalk(dirfd, dirpath, topdown, onerror, follow_symlinks)\n            finally:\n                close(dirfd)\n\n        if not topdown:\n            yield toppath, dirs, nondirs, topfd\n\n    __all__.append("fwalk")\n\n# Make sure os.environ exists, at least\ntry:\n    environ\nexcept NameError:\n    environ = {}\n\ndef execl(file, *args):\n    """execl(file, *args)\n\n    Execute the executable file with argument list args, replacing the\n    current process. """\n    execv(file, args)\n\ndef execle(file, *args):\n    """execle(file, *args, env)\n\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. """\n    env = args[-1]\n    execve(file, args[:-1], env)\n\ndef execlp(file, *args):\n    """execlp(file, *args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. """\n    execvp(file, args)\n\ndef execlpe(file, *args):\n    """execlpe(file, *args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. """\n    env = args[-1]\n    execvpe(file, args[:-1], env)\n\ndef execvp(file, args):\n    """execvp(file, args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. """\n    _execvpe(file, args)\n\ndef execvpe(file, args, env):\n    """execvpe(file, args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. """\n    _execvpe(file, args, env)\n\n__all__.extend(["execl","execle","execlp","execlpe","execvp","execvpe"])\n\ndef _execvpe(file, args, env=None):\n    if env is not None:\n        exec_func = execve\n        argrest = (args, env)\n    else:\n        exec_func = execv\n        argrest = (args,)\n        env = environ\n\n    head, tail = path.split(file)\n    if head:\n        exec_func(file, *argrest)\n        return\n    last_exc = saved_exc = None\n    saved_tb = None\n    path_list = get_exec_path(env)\n    if name != \'nt\':\n        file = fsencode(file)\n        path_list = map(fsencode, path_list)\n    for dir in path_list:\n        fullname = path.join(dir, file)\n        try:\n            exec_func(fullname, *argrest)\n        except OSError as e:\n            last_exc = e\n            tb = sys.exc_info()[2]\n            if (e.errno != errno.ENOENT and e.errno != errno.ENOTDIR\n                and saved_exc is None):\n                saved_exc = e\n                saved_tb = tb\n    if saved_exc:\n        raise saved_exc.with_traceback(saved_tb)\n    raise last_exc.with_traceback(tb)\n\n\ndef get_exec_path(env=None):\n    """Returns the sequence of directories that will be searched for the\n    named executable (similar to a shell) when launching a process.\n\n    *env* must be an environment variable dict or None.  If *env* is None,\n    os.environ will be used.\n    """\n    # Use a local import instead of a global import to limit the number of\n    # modules loaded at startup: the os module is always loaded at startup by\n    # Python. It may also avoid a bootstrap issue.\n    import warnings\n\n    if env is None:\n        env = environ\n\n    # {b\'PATH\': ...}.get(\'PATH\') and {\'PATH\': ...}.get(b\'PATH\') emit a\n    # BytesWarning when using python -b or python -bb: ignore the warning\n    with warnings.catch_warnings():\n        warnings.simplefilter("ignore", BytesWarning)\n\n        try:\n            path_list = env.get(\'PATH\')\n        except TypeError:\n            path_list = None\n\n        if supports_bytes_environ:\n            try:\n                path_listb = env[b\'PATH\']\n            except (KeyError, TypeError):\n                pass\n            else:\n                if path_list is not None:\n                    raise ValueError(\n                        "env cannot contain \'PATH\' and b\'PATH\' keys")\n                path_list = path_listb\n\n            if path_list is not None and isinstance(path_list, bytes):\n                path_list = fsdecode(path_list)\n\n    if path_list is None:\n        path_list = defpath\n    return path_list.split(pathsep)\n\n\n# Change environ to automatically call putenv(), unsetenv if they exist.\nfrom _collections_abc import MutableMapping\n\nclass _Environ(MutableMapping):\n    def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue, putenv, unsetenv):\n        self.encodekey = encodekey\n        self.decodekey = decodekey\n        self.encodevalue = encodevalue\n        self.decodevalue = decodevalue\n        self.putenv = putenv\n        self.unsetenv = unsetenv\n        self._data = data\n\n    def __getitem__(self, key):\n        try:\n            value = self._data[self.encodekey(key)]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n        return self.decodevalue(value)\n\n    def __setitem__(self, key, value):\n        key = self.encodekey(key)\n        value = self.encodevalue(value)\n        self.putenv(key, value)\n        self._data[key] = value\n\n    def __delitem__(self, key):\n        encodedkey = self.encodekey(key)\n        self.unsetenv(encodedkey)\n        try:\n            del self._data[encodedkey]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n\n    def __iter__(self):\n        for key in self._data:\n            yield self.decodekey(key)\n\n    def __len__(self):\n        return len(self._data)\n\n    def __repr__(self):\n        return \'environ({{{}}})\'.format(\', \'.join(\n            (\'{!r}: {!r}\'.format(self.decodekey(key), self.decodevalue(value))\n            for key, value in self._data.items())))\n\n    def copy(self):\n        return dict(self)\n\n    def setdefault(self, key, value):\n        if key not in self:\n            self[key] = value\n        return self[key]\n\ntry:\n    _putenv = putenv\nexcept NameError:\n    _putenv = lambda key, value: None\nelse:\n    if "putenv" not in __all__:\n        __all__.append("putenv")\n\ntry:\n    _unsetenv = unsetenv\nexcept NameError:\n    _unsetenv = lambda key: _putenv(key, "")\nelse:\n    if "unsetenv" not in __all__:\n        __all__.append("unsetenv")\n\ndef _createenviron():\n    if name == \'nt\':\n        # Where Env Var Names Must Be UPPERCASE\n        def check_str(value):\n            if not isinstance(value, str):\n                raise TypeError("str expected, not %s" % type(value).__name__)\n            return value\n        encode = check_str\n        decode = str\n        def encodekey(key):\n            return encode(key).upper()\n        data = {}\n        for key, value in environ.items():\n            data[encodekey(key)] = value\n    else:\n        # Where Env Var Names Can Be Mixed Case\n        encoding = sys.getfilesystemencoding()\n        def encode(value):\n            if not isinstance(value, str):\n                raise TypeError("str expected, not %s" % type(value).__name__)\n            return value.encode(encoding, \'surrogateescape\')\n        def decode(value):\n            return value.decode(encoding, \'surrogateescape\')\n        encodekey = encode\n        data = environ\n    return _Environ(data,\n        encodekey, decode,\n        encode, decode,\n        _putenv, _unsetenv)\n\n# unicode environ\nenviron = _createenviron()\ndel _createenviron\n\n\ndef getenv(key, default=None):\n    """Get an environment variable, return None if it doesn\'t exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str."""\n    return environ.get(key, default)\n\nsupports_bytes_environ = (name != \'nt\')\n__all__.extend(("getenv", "supports_bytes_environ"))\n\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):\n            raise TypeError("bytes expected, not %s" % type(value).__name__)\n        return value\n\n    # bytes environ\n    environb = _Environ(environ._data,\n        _check_bytes, bytes,\n        _check_bytes, bytes,\n        _putenv, _unsetenv)\n    del _check_bytes\n\n    def getenvb(key, default=None):\n        """Get an environment variable, return None if it doesn\'t exist.\n        The optional second argument can specify an alternate default.\n        key, default and the result are bytes."""\n        return environb.get(key, default)\n\n    __all__.extend(("environb", "getenvb"))\n\ndef _fscodec():\n    encoding = sys.getfilesystemencoding()\n    if encoding == \'mbcs\':\n        errors = \'strict\'\n    else:\n        errors = \'surrogateescape\'\n\n    def fsencode(filename):\n        """\n        Encode filename to the filesystem encoding with \'surrogateescape\' error\n        handler, return bytes unchanged. On Windows, use \'strict\' error handler if\n        the file system encoding is \'mbcs\' (which is the default encoding).\n        """\n        if isinstance(filename, bytes):\n            return filename\n        elif isinstance(filename, str):\n            return filename.encode(encoding, errors)\n        else:\n            raise TypeError("expect bytes or str, not %s" % type(filename).__name__)\n\n    def fsdecode(filename):\n        """\n        Decode filename from the filesystem encoding with \'surrogateescape\' error\n        handler, return str unchanged. On Windows, use \'strict\' error handler if\n        the file system encoding is \'mbcs\' (which is the default encoding).\n        """\n        if isinstance(filename, str):\n            return filename\n        elif isinstance(filename, bytes):\n            return filename.decode(encoding, errors)\n        else:\n            raise TypeError("expect bytes or str, not %s" % type(filename).__name__)\n\n    return fsencode, fsdecode\n\nfsencode, fsdecode = _fscodec()\ndel _fscodec\n\n# Supply spawn*() (probably only for Unix)\nif _exists("fork") and not _exists("spawnv") and _exists("execv"):\n\n    P_WAIT = 0\n    P_NOWAIT = P_NOWAITO = 1\n\n    __all__.extend(["P_WAIT", "P_NOWAIT", "P_NOWAITO"])\n\n    # XXX Should we support P_DETACH?  I suppose it could fork()**2\n    # and close the std I/O streams.  Also, P_OVERLAY is the same\n    # as execv*()?\n\n    def _spawnvef(mode, file, args, env, func):\n        # Internal helper; func is the exec*() function to use\n        pid = fork()\n        if not pid:\n            # Child\n            try:\n                if env is None:\n                    func(file, args)\n                else:\n                    func(file, args, env)\n            except:\n                _exit(127)\n        else:\n            # Parent\n            if mode == P_NOWAIT:\n                return pid # Caller is responsible for waiting!\n            while 1:\n                wpid, sts = waitpid(pid, 0)\n                if WIFSTOPPED(sts):\n                    continue\n                elif WIFSIGNALED(sts):\n                    return -WTERMSIG(sts)\n                elif WIFEXITED(sts):\n                    return WEXITSTATUS(sts)\n                else:\n                    raise OSError("Not stopped, signaled or exited???")\n\n    def spawnv(mode, file, args):\n        """spawnv(mode, file, args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, None, execv)\n\n    def spawnve(mode, file, args, env):\n        """spawnve(mode, file, args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nspecified environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, env, execve)\n\n    # Note: spawnvp[e] is\'t currently supported on Windows\n\n    def spawnvp(mode, file, args):\n        """spawnvp(mode, file, args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, None, execvp)\n\n    def spawnvpe(mode, file, args, env):\n        """spawnvpe(mode, file, args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, env, execvpe)\n\n\n    __all__.extend(["spawnv", "spawnve", "spawnvp", "spawnvpe"])\n\n\nif _exists("spawnv"):\n    # These aren\'t supplied by the basic Windows code\n    # but can be easily implemented in Python\n\n    def spawnl(mode, file, *args):\n        """spawnl(mode, file, *args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return spawnv(mode, file, args)\n\n    def spawnle(mode, file, *args):\n        """spawnle(mode, file, *args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nsupplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        env = args[-1]\n        return spawnve(mode, file, args[:-1], env)\n\n\n    __all__.extend(["spawnl", "spawnle"])\n\n\nif _exists("spawnvp"):\n    # At the moment, Windows doesn\'t implement spawnvp[e],\n    # so it won\'t have spawnlp[e] either.\n    def spawnlp(mode, file, *args):\n        """spawnlp(mode, file, *args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return spawnvp(mode, file, args)\n\n    def spawnlpe(mode, file, *args):\n        """spawnlpe(mode, file, *args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        env = args[-1]\n        return spawnvpe(mode, file, args[:-1], env)\n\n\n    __all__.extend(["spawnlp", "spawnlpe"])\n\n\n# Supply os.popen()\ndef popen(cmd, mode="r", buffering=-1):\n    if not isinstance(cmd, str):\n        raise TypeError("invalid cmd type (%s, expected string)" % type(cmd))\n    if mode not in ("r", "w"):\n        raise ValueError("invalid mode %r" % mode)\n    if buffering == 0 or buffering is None:\n        raise ValueError("popen() does not support unbuffered streams")\n    import subprocess, io\n    if mode == "r":\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdout=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdout), proc)\n    else:\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdin=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdin), proc)\n\n# Helper for popen() -- a proxy for a file whose close waits for the process\nclass _wrap_close:\n    def __init__(self, stream, proc):\n        self._stream = stream\n        self._proc = proc\n    def close(self):\n        self._stream.close()\n        returncode = self._proc.wait()\n        if returncode == 0:\n            return None\n        if name == \'nt\':\n            return returncode\n        else:\n            return returncode << 8  # Shift left to match old behavior\n    def __enter__(self):\n        return self\n    def __exit__(self, *args):\n        self.close()\n    def __getattr__(self, name):\n        return getattr(self._stream, name)\n    def __iter__(self):\n        return iter(self._stream)\n\n# Supply os.fdopen()\ndef fdopen(fd, *args, **kwargs):\n    if not isinstance(fd, int):\n        raise TypeError("invalid fd type (%s, expected integer)" % type(fd))\n    import io\n    return io.open(fd, *args, **kwargs)\n', resulttype=None
dump b'r"""OS routines for NT or Posix depending on what system we\'re on.\n\nThis exports:\n  - all functions from posix, nt or ce, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either \'posix\', \'nt\' or \'ce\'.\n  - os.curdir is a string representing the current directory (\'.\' or \':\')\n  - os.pardir is a string representing the parent directory (\'..\' or \'::\')\n  - os.sep is the (or a most common) pathname separator (\'/\' or \':\' or \'\\\\\')\n  - os.extsep is the extension separator (always \'.\')\n  - os.altsep is the alternate pathname separator (None or \'/\')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files (\'\\r\' or \'\\n\' or \'\\r\\n\')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device (\'/dev/null\', etc.)\n\nPrograms that import and use \'os\' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n"""\n\n#\'\n\nimport sys, errno\nimport stat as st\n\n_names = sys.builtin_module_names\n\n# Note:  more names are added to __all__ later.\n__all__ = ["altsep", "curdir", "pardir", "sep", "pathsep", "linesep",\n           "defpath", "name", "path", "devnull", "SEEK_SET", "SEEK_CUR",\n           "SEEK_END", "fsencode", "fsdecode", "get_exec_path", "fdopen",\n           "popen", "extsep"]\n\ndef _exists(name):\n    return name in globals()\n\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != \'_\']\n\n# Any new dependencies of the os module and/or changes in path separator\n# requires updating importlib as well.\nif \'posix\' in _names:\n    name = \'posix\'\n    linesep = \'\\n\'\n    from posix import *\n    try:\n        from posix import _exit\n        __all__.append(\'_exit\')\n    except ImportError:\n        pass\n    import posixpath as path\n\n    try:\n        from posix import _have_functions\n    except ImportError:\n        pass\n\n    import posix\n    __all__.extend(_get_exports_list(posix))\n    del posix\n\nelif \'nt\' in _names:\n    name = \'nt\'\n    linesep = \'\\r\\n\'\n    from nt import *\n    try:\n        from nt import _exit\n        __all__.append(\'_exit\')\n    except ImportError:\n        pass\n    import ntpath as path\n\n    import nt\n    __all__.extend(_get_exports_list(nt))\n    del nt\n\n    try:\n        from nt import _have_functions\n    except ImportError:\n        pass\n\nelif \'ce\' in _names:\n    name = \'ce\'\n    linesep = \'\\r\\n\'\n    from ce import *\n    try:\n        from ce import _exit\n        __all__.append(\'_exit\')\n    except ImportError:\n        pass\n    # We can use the standard Windows path.\n    import ntpath as path\n\n    import ce\n    __all__.extend(_get_exports_list(ce))\n    del ce\n\n    try:\n        from ce import _have_functions\n    except ImportError:\n        pass\n\nelse:\n    raise ImportError(\'no os specific module found\')\n\nsys.modules[\'os.path\'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\n\ndel _names\n\n\nif _exists("_have_functions"):\n    _globals = globals()\n    def _add(str, fn):\n        if (fn in _globals) and (str in _have_functions):\n            _set.add(_globals[fn])\n\n    _set = set()\n    _add("HAVE_FACCESSAT",  "access")\n    _add("HAVE_FCHMODAT",   "chmod")\n    _add("HAVE_FCHOWNAT",   "chown")\n    _add("HAVE_FSTATAT",    "stat")\n    _add("HAVE_FUTIMESAT",  "utime")\n    _add("HAVE_LINKAT",     "link")\n    _add("HAVE_MKDIRAT",    "mkdir")\n    _add("HAVE_MKFIFOAT",   "mkfifo")\n    _add("HAVE_MKNODAT",    "mknod")\n    _add("HAVE_OPENAT",     "open")\n    _add("HAVE_READLINKAT", "readlink")\n    _add("HAVE_RENAMEAT",   "rename")\n    _add("HAVE_SYMLINKAT",  "symlink")\n    _add("HAVE_UNLINKAT",   "unlink")\n    _add("HAVE_UNLINKAT",   "rmdir")\n    _add("HAVE_UTIMENSAT",  "utime")\n    supports_dir_fd = _set\n\n    _set = set()\n    _add("HAVE_FACCESSAT",  "access")\n    supports_effective_ids = _set\n\n    _set = set()\n    _add("HAVE_FCHDIR",     "chdir")\n    _add("HAVE_FCHMOD",     "chmod")\n    _add("HAVE_FCHOWN",     "chown")\n    _add("HAVE_FDOPENDIR",  "listdir")\n    _add("HAVE_FEXECVE",    "execve")\n    _set.add(stat) # fstat always works\n    _add("HAVE_FTRUNCATE",  "truncate")\n    _add("HAVE_FUTIMENS",   "utime")\n    _add("HAVE_FUTIMES",    "utime")\n    _add("HAVE_FPATHCONF",  "pathconf")\n    if _exists("statvfs") and _exists("fstatvfs"): # mac os x10.3\n        _add("HAVE_FSTATVFS", "statvfs")\n    supports_fd = _set\n\n    _set = set()\n    _add("HAVE_FACCESSAT",  "access")\n    # Some platforms don\'t support lchmod().  Often the function exists\n    # anyway, as a stub that always returns ENOSUP or perhaps EOPNOTSUPP.\n    # (No, I don\'t know why that\'s a good design.)  ./configure will detect\n    # this and reject it--so HAVE_LCHMOD still won\'t be defined on such\n    # platforms.  This is Very Helpful.\n    #\n    # However, sometimes platforms without a working lchmod() *do* have\n    # fchmodat().  (Examples: Linux kernel 3.2 with glibc 2.15,\n    # OpenIndiana 3.x.)  And fchmodat() has a flag that theoretically makes\n    # it behave like lchmod().  So in theory it would be a suitable\n    # replacement for lchmod().  But when lchmod() doesn\'t work, fchmodat()\'s\n    # flag doesn\'t work *either*.  Sadly ./configure isn\'t sophisticated\n    # enough to detect this condition--it only determines whether or not\n    # fchmodat() minimally works.\n    #\n    # Therefore we simply ignore fchmodat() when deciding whether or not\n    # os.chmod supports follow_symlinks.  Just checking lchmod() is\n    # sufficient.  After all--if you have a working fchmodat(), your\n    # lchmod() almost certainly works too.\n    #\n    # _add("HAVE_FCHMODAT",   "chmod")\n    _add("HAVE_FCHOWNAT",   "chown")\n    _add("HAVE_FSTATAT",    "stat")\n    _add("HAVE_LCHFLAGS",   "chflags")\n    _add("HAVE_LCHMOD",     "chmod")\n    if _exists("lchown"): # mac os x10.3\n        _add("HAVE_LCHOWN", "chown")\n    _add("HAVE_LINKAT",     "link")\n    _add("HAVE_LUTIMES",    "utime")\n    _add("HAVE_LSTAT",      "stat")\n    _add("HAVE_FSTATAT",    "stat")\n    _add("HAVE_UTIMENSAT",  "utime")\n    _add("MS_WINDOWS",      "stat")\n    supports_follow_symlinks = _set\n\n    del _set\n    del _have_functions\n    del _globals\n    del _add\n\n\n# Python uses fixed values for the SEEK_ constants; they are mapped\n# to native constants if necessary in posixmodule.c\n# Other possible SEEK values are directly imported from posixmodule.c\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\n\ndef makedirs(name, mode=0o777, exist_ok=False):\n    """makedirs(name [, mode=0o777][, exist_ok=False])\n\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.\n\n    """\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    if head and tail and not path.exists(head):\n        try:\n            makedirs(head, mode, exist_ok)\n        except FileExistsError:\n            # Defeats race condition when another thread created the path\n            pass\n        cdir = curdir\n        if isinstance(tail, bytes):\n            cdir = bytes(curdir, \'ASCII\')\n        if tail == cdir:           # xxx/newdir/. exists if xxx/newdir exists\n            return\n    try:\n        mkdir(name, mode)\n    except OSError:\n        # Cannot rely on checking for EEXIST, since the operating system\n        # could give priority to other errors like EACCES or EROFS\n        if not exist_ok or not path.isdir(name):\n            raise\n\ndef removedirs(name):\n    """removedirs(name)\n\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n\n    """\n    rmdir(name)\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    while head and tail:\n        try:\n            rmdir(head)\n        except OSError:\n            break\n        head, tail = path.split(head)\n\ndef renames(old, new):\n    """renames(old, new)\n\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n    file.\n\n    """\n    head, tail = path.split(new)\n    if head and tail and not path.exists(head):\n        makedirs(head)\n    rename(old, new)\n    head, tail = path.split(old)\n    if head and tail:\n        try:\n            removedirs(head)\n        except OSError:\n            pass\n\n__all__.extend(["makedirs", "removedirs", "renames"])\n\ndef walk(top, topdown=True, onerror=None, followlinks=False):\n    """Directory tree generator.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding \'.\' and \'..\'), yields a 3-tuple\n\n        dirpath, dirnames, filenames\n\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding \'.\' and \'..\').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n    dirpath, do os.path.join(dirpath, name).\n\n    If optional arg \'topdown\' is true or not specified, the triple for a\n    directory is generated before the triples for any of its subdirectories\n    (directories are generated top down).  If topdown is false, the triple\n    for a directory is generated after the triples for all of its\n    subdirectories (directories are generated bottom up).\n\n    When topdown is true, the caller can modify the dirnames list in-place\n    (e.g., via del or slice assignment), and walk will only recurse into the\n    subdirectories whose names remain in dirnames; this can be used to prune the\n    search, or to impose a specific order of visiting.  Modifying dirnames when\n    topdown is false is ineffective, since the directories in dirnames have\n    already been generated by the time dirnames itself is generated. No matter\n    the value of topdown, the list of subdirectories is retrieved before the\n    tuples for the directory and its subdirectories are generated.\n\n    By default errors from the os.scandir() call are ignored.  If\n    optional arg \'onerror\' is specified, it should be a function; it\n    will be called with one argument, an OSError instance.  It can\n    report the error to continue with the walk, or raise the exception\n    to abort the walk.  Note that the filename is available as the\n    filename attribute of the exception object.\n\n    By default, os.walk does not follow symbolic links to subdirectories on\n    systems that support them.  In order to get this functionality, set the\n    optional argument \'followlinks\' to true.\n\n    Caution:  if you pass a relative pathname for top, don\'t change the\n    current working directory between resumptions of walk.  walk never\n    changes the current directory, and assumes that the client doesn\'t\n    either.\n\n    Example:\n\n    import os\n    from os.path import join, getsize\n    for root, dirs, files in os.walk(\'python/Lib/email\'):\n        print(root, "consumes", end="")\n        print(sum([getsize(join(root, name)) for name in files]), end="")\n        print("bytes in", len(files), "non-directory files")\n        if \'CVS\' in dirs:\n            dirs.remove(\'CVS\')  # don\'t visit CVS directories\n\n    """\n\n    dirs = []\n    nondirs = []\n\n    # We may not have read permission for top, in which case we can\'t\n    # get a list of the files the directory contains.  os.walk\n    # always suppressed the exception then, rather than blow up for a\n    # minor reason when (say) a thousand readable directories are still\n    # left to visit.  That logic is copied here.\n    try:\n        if name == \'nt\' and isinstance(top, bytes):\n            scandir_it = _dummy_scandir(top)\n        else:\n            # Note that scandir is global in this module due\n            # to earlier import-*.\n            scandir_it = scandir(top)\n        entries = list(scandir_it)\n    except OSError as error:\n        if onerror is not None:\n            onerror(error)\n        return\n\n    for entry in entries:\n        try:\n            is_dir = entry.is_dir()\n        except OSError:\n            # If is_dir() raises an OSError, consider that the entry is not\n            # a directory, same behaviour than os.path.isdir().\n            is_dir = False\n\n        if is_dir:\n            dirs.append(entry.name)\n        else:\n            nondirs.append(entry.name)\n\n        if not topdown and is_dir:\n            # Bottom-up: recurse into sub-directory, but exclude symlinks to\n            # directories if followlinks is False\n            if followlinks:\n                walk_into = True\n            else:\n                try:\n                    is_symlink = entry.is_symlink()\n                except OSError:\n                    # If is_symlink() raises an OSError, consider that the\n                    # entry is not a symbolic link, same behaviour than\n                    # os.path.islink().\n                    is_symlink = False\n                walk_into = not is_symlink\n\n            if walk_into:\n                yield from walk(entry.path, topdown, onerror, followlinks)\n\n    # Yield before recursion if going top down\n    if topdown:\n        yield top, dirs, nondirs\n\n        # Recurse into sub-directories\n        islink, join = path.islink, path.join\n        for dirname in dirs:\n            new_path = join(top, dirname)\n            # Issue #23605: os.path.islink() is used instead of caching\n            # entry.is_symlink() result during the loop on os.scandir() because\n            # the caller can replace the directory entry during the "yield"\n            # above.\n            if followlinks or not islink(new_path):\n                yield from walk(new_path, topdown, onerror, followlinks)\n    else:\n        # Yield after recursion if going bottom up\n        yield top, dirs, nondirs\n\nclass _DummyDirEntry:\n    """Dummy implementation of DirEntry\n\n    Only used internally by os.walk(bytes). Since os.walk() doesn\'t need the\n    follow_symlinks parameter: don\'t implement it, always follow symbolic\n    links.\n    """\n\n    def __init__(self, dir, name):\n        self.name = name\n        self.path = path.join(dir, name)\n        # Mimick FindFirstFile/FindNextFile: we should get file attributes\n        # while iterating on a directory\n        self._stat = None\n        self._lstat = None\n        try:\n            self.stat(follow_symlinks=False)\n        except OSError:\n            pass\n\n    def stat(self, *, follow_symlinks=True):\n        if follow_symlinks:\n            if self._stat is None:\n                self._stat = stat(self.path)\n            return self._stat\n        else:\n            if self._lstat is None:\n                self._lstat = stat(self.path, follow_symlinks=False)\n            return self._lstat\n\n    def is_dir(self):\n        if self._lstat is not None and not self.is_symlink():\n            # use the cache lstat\n            stat = self.stat(follow_symlinks=False)\n            return st.S_ISDIR(stat.st_mode)\n\n        stat = self.stat()\n        return st.S_ISDIR(stat.st_mode)\n\n    def is_symlink(self):\n        stat = self.stat(follow_symlinks=False)\n        return st.S_ISLNK(stat.st_mode)\n\ndef _dummy_scandir(dir):\n    # listdir-based implementation for bytes patches on Windows\n    for name in listdir(dir):\n        yield _DummyDirEntry(dir, name)\n\n__all__.append("walk")\n\nif {open, stat} <= supports_dir_fd and {listdir, stat} <= supports_fd:\n\n    def fwalk(top=".", topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None):\n        """Directory tree generator.\n\n        This behaves exactly like walk(), except that it yields a 4-tuple\n\n            dirpath, dirnames, filenames, dirfd\n\n        `dirpath`, `dirnames` and `filenames` are identical to walk() output,\n        and `dirfd` is a file descriptor referring to the directory `dirpath`.\n\n        The advantage of fwalk() over walk() is that it\'s safe against symlink\n        races (when follow_symlinks is False).\n\n        If dir_fd is not None, it should be a file descriptor open to a directory,\n          and top should be relative; top will then be relative to that directory.\n          (dir_fd is always supported for fwalk.)\n\n        Caution:\n        Since fwalk() yields file descriptors, those are only valid until the\n        next iteration step, so you should dup() them if you want to keep them\n        for a longer period.\n\n        Example:\n\n        import os\n        for root, dirs, files, rootfd in os.fwalk(\'python/Lib/email\'):\n            print(root, "consumes", end="")\n            print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),\n                  end="")\n            print("bytes in", len(files), "non-directory files")\n            if \'CVS\' in dirs:\n                dirs.remove(\'CVS\')  # don\'t visit CVS directories\n        """\n        # Note: To guard against symlink races, we use the standard\n        # lstat()/open()/fstat() trick.\n        orig_st = stat(top, follow_symlinks=False, dir_fd=dir_fd)\n        topfd = open(top, O_RDONLY, dir_fd=dir_fd)\n        try:\n            if (follow_symlinks or (st.S_ISDIR(orig_st.st_mode) and\n                                    path.samestat(orig_st, stat(topfd)))):\n                yield from _fwalk(topfd, top, topdown, onerror, follow_symlinks)\n        finally:\n            close(topfd)\n\n    def _fwalk(topfd, toppath, topdown, onerror, follow_symlinks):\n        # Note: This uses O(depth of the directory tree) file descriptors: if\n        # necessary, it can be adapted to only require O(1) FDs, see issue\n        # #13734.\n\n        names = listdir(topfd)\n        dirs, nondirs = [], []\n        for name in names:\n            try:\n                # Here, we don\'t use AT_SYMLINK_NOFOLLOW to be consistent with\n                # walk() which reports symlinks to directories as directories.\n                # We do however check for symlinks before recursing into\n                # a subdirectory.\n                if st.S_ISDIR(stat(name, dir_fd=topfd).st_mode):\n                    dirs.append(name)\n                else:\n                    nondirs.append(name)\n            except OSError:\n                try:\n                    # Add dangling symlinks, ignore disappeared files\n                    if st.S_ISLNK(stat(name, dir_fd=topfd, follow_symlinks=False)\n                                .st_mode):\n                        nondirs.append(name)\n                except OSError:\n                    continue\n\n        if topdown:\n            yield toppath, dirs, nondirs, topfd\n\n        for name in dirs:\n            try:\n                orig_st = stat(name, dir_fd=topfd, follow_symlinks=follow_symlinks)\n                dirfd = open(name, O_RDONLY, dir_fd=topfd)\n            except OSError as err:\n                if onerror is not None:\n                    onerror(err)\n                continue\n            try:\n                if follow_symlinks or path.samestat(orig_st, stat(dirfd)):\n                    dirpath = path.join(toppath, name)\n                    yield from _fwalk(dirfd, dirpath, topdown, onerror, follow_symlinks)\n            finally:\n                close(dirfd)\n\n        if not topdown:\n            yield toppath, dirs, nondirs, topfd\n\n    __all__.append("fwalk")\n\n# Make sure os.environ exists, at least\ntry:\n    environ\nexcept NameError:\n    environ = {}\n\ndef execl(file, *args):\n    """execl(file, *args)\n\n    Execute the executable file with argument list args, replacing the\n    current process. """\n    execv(file, args)\n\ndef execle(file, *args):\n    """execle(file, *args, env)\n\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. """\n    env = args[-1]\n    execve(file, args[:-1], env)\n\ndef execlp(file, *args):\n    """execlp(file, *args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. """\n    execvp(file, args)\n\ndef execlpe(file, *args):\n    """execlpe(file, *args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. """\n    env = args[-1]\n    execvpe(file, args[:-1], env)\n\ndef execvp(file, args):\n    """execvp(file, args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. """\n    _execvpe(file, args)\n\ndef execvpe(file, args, env):\n    """execvpe(file, args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. """\n    _execvpe(file, args, env)\n\n__all__.extend(["execl","execle","execlp","execlpe","execvp","execvpe"])\n\ndef _execvpe(file, args, env=None):\n    if env is not None:\n        exec_func = execve\n        argrest = (args, env)\n    else:\n        exec_func = execv\n        argrest = (args,)\n        env = environ\n\n    head, tail = path.split(file)\n    if head:\n        exec_func(file, *argrest)\n        return\n    last_exc = saved_exc = None\n    saved_tb = None\n    path_list = get_exec_path(env)\n    if name != \'nt\':\n        file = fsencode(file)\n        path_list = map(fsencode, path_list)\n    for dir in path_list:\n        fullname = path.join(dir, file)\n        try:\n            exec_func(fullname, *argrest)\n        except OSError as e:\n            last_exc = e\n            tb = sys.exc_info()[2]\n            if (e.errno != errno.ENOENT and e.errno != errno.ENOTDIR\n                and saved_exc is None):\n                saved_exc = e\n                saved_tb = tb\n    if saved_exc:\n        raise saved_exc.with_traceback(saved_tb)\n    raise last_exc.with_traceback(tb)\n\n\ndef get_exec_path(env=None):\n    """Returns the sequence of directories that will be searched for the\n    named executable (similar to a shell) when launching a process.\n\n    *env* must be an environment variable dict or None.  If *env* is None,\n    os.environ will be used.\n    """\n    # Use a local import instead of a global import to limit the number of\n    # modules loaded at startup: the os module is always loaded at startup by\n    # Python. It may also avoid a bootstrap issue.\n    import warnings\n\n    if env is None:\n        env = environ\n\n    # {b\'PATH\': ...}.get(\'PATH\') and {\'PATH\': ...}.get(b\'PATH\') emit a\n    # BytesWarning when using python -b or python -bb: ignore the warning\n    with warnings.catch_warnings():\n        warnings.simplefilter("ignore", BytesWarning)\n\n        try:\n            path_list = env.get(\'PATH\')\n        except TypeError:\n            path_list = None\n\n        if supports_bytes_environ:\n            try:\n                path_listb = env[b\'PATH\']\n            except (KeyError, TypeError):\n                pass\n            else:\n                if path_list is not None:\n                    raise ValueError(\n                        "env cannot contain \'PATH\' and b\'PATH\' keys")\n                path_list = path_listb\n\n            if path_list is not None and isinstance(path_list, bytes):\n                path_list = fsdecode(path_list)\n\n    if path_list is None:\n        path_list = defpath\n    return path_list.split(pathsep)\n\n\n# Change environ to automatically call putenv(), unsetenv if they exist.\nfrom _collections_abc import MutableMapping\n\nclass _Environ(MutableMapping):\n    def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue, putenv, unsetenv):\n        self.encodekey = encodekey\n        self.decodekey = decodekey\n        self.encodevalue = encodevalue\n        self.decodevalue = decodevalue\n        self.putenv = putenv\n        self.unsetenv = unsetenv\n        self._data = data\n\n    def __getitem__(self, key):\n        try:\n            value = self._data[self.encodekey(key)]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n        return self.decodevalue(value)\n\n    def __setitem__(self, key, value):\n        key = self.encodekey(key)\n        value = self.encodevalue(value)\n        self.putenv(key, value)\n        self._data[key] = value\n\n    def __delitem__(self, key):\n        encodedkey = self.encodekey(key)\n        self.unsetenv(encodedkey)\n        try:\n            del self._data[encodedkey]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n\n    def __iter__(self):\n        for key in self._data:\n            yield self.decodekey(key)\n\n    def __len__(self):\n        return len(self._data)\n\n    def __repr__(self):\n        return \'environ({{{}}})\'.format(\', \'.join(\n            (\'{!r}: {!r}\'.format(self.decodekey(key), self.decodevalue(value))\n            for key, value in self._data.items())))\n\n    def copy(self):\n        return dict(self)\n\n    def setdefault(self, key, value):\n        if key not in self:\n            self[key] = value\n        return self[key]\n\ntry:\n    _putenv = putenv\nexcept NameError:\n    _putenv = lambda key, value: None\nelse:\n    if "putenv" not in __all__:\n        __all__.append("putenv")\n\ntry:\n    _unsetenv = unsetenv\nexcept NameError:\n    _unsetenv = lambda key: _putenv(key, "")\nelse:\n    if "unsetenv" not in __all__:\n        __all__.append("unsetenv")\n\ndef _createenviron():\n    if name == \'nt\':\n        # Where Env Var Names Must Be UPPERCASE\n        def check_str(value):\n            if not isinstance(value, str):\n                raise TypeError("str expected, not %s" % type(value).__name__)\n            return value\n        encode = check_str\n        decode = str\n        def encodekey(key):\n            return encode(key).upper()\n        data = {}\n        for key, value in environ.items():\n            data[encodekey(key)] = value\n    else:\n        # Where Env Var Names Can Be Mixed Case\n        encoding = sys.getfilesystemencoding()\n        def encode(value):\n            if not isinstance(value, str):\n                raise TypeError("str expected, not %s" % type(value).__name__)\n            return value.encode(encoding, \'surrogateescape\')\n        def decode(value):\n            return value.decode(encoding, \'surrogateescape\')\n        encodekey = encode\n        data = environ\n    return _Environ(data,\n        encodekey, decode,\n        encode, decode,\n        _putenv, _unsetenv)\n\n# unicode environ\nenviron = _createenviron()\ndel _createenviron\n\n\ndef getenv(key, default=None):\n    """Get an environment variable, return None if it doesn\'t exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str."""\n    return environ.get(key, default)\n\nsupports_bytes_environ = (name != \'nt\')\n__all__.extend(("getenv", "supports_bytes_environ"))\n\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):\n            raise TypeError("bytes expected, not %s" % type(value).__name__)\n        return value\n\n    # bytes environ\n    environb = _Environ(environ._data,\n        _check_bytes, bytes,\n        _check_bytes, bytes,\n        _putenv, _unsetenv)\n    del _check_bytes\n\n    def getenvb(key, default=None):\n        """Get an environment variable, return None if it doesn\'t exist.\n        The optional second argument can specify an alternate default.\n        key, default and the result are bytes."""\n        return environb.get(key, default)\n\n    __all__.extend(("environb", "getenvb"))\n\ndef _fscodec():\n    encoding = sys.getfilesystemencoding()\n    if encoding == \'mbcs\':\n        errors = \'strict\'\n    else:\n        errors = \'surrogateescape\'\n\n    def fsencode(filename):\n        """\n        Encode filename to the filesystem encoding with \'surrogateescape\' error\n        handler, return bytes unchanged. On Windows, use \'strict\' error handler if\n        the file system encoding is \'mbcs\' (which is the default encoding).\n        """\n        if isinstance(filename, bytes):\n            return filename\n        elif isinstance(filename, str):\n            return filename.encode(encoding, errors)\n        else:\n            raise TypeError("expect bytes or str, not %s" % type(filename).__name__)\n\n    def fsdecode(filename):\n        """\n        Decode filename from the filesystem encoding with \'surrogateescape\' error\n        handler, return str unchanged. On Windows, use \'strict\' error handler if\n        the file system encoding is \'mbcs\' (which is the default encoding).\n        """\n        if isinstance(filename, str):\n            return filename\n        elif isinstance(filename, bytes):\n            return filename.decode(encoding, errors)\n        else:\n            raise TypeError("expect bytes or str, not %s" % type(filename).__name__)\n\n    return fsencode, fsdecode\n\nfsencode, fsdecode = _fscodec()\ndel _fscodec\n\n# Supply spawn*() (probably only for Unix)\nif _exists("fork") and not _exists("spawnv") and _exists("execv"):\n\n    P_WAIT = 0\n    P_NOWAIT = P_NOWAITO = 1\n\n    __all__.extend(["P_WAIT", "P_NOWAIT", "P_NOWAITO"])\n\n    # XXX Should we support P_DETACH?  I suppose it could fork()**2\n    # and close the std I/O streams.  Also, P_OVERLAY is the same\n    # as execv*()?\n\n    def _spawnvef(mode, file, args, env, func):\n        # Internal helper; func is the exec*() function to use\n        pid = fork()\n        if not pid:\n            # Child\n            try:\n                if env is None:\n                    func(file, args)\n                else:\n                    func(file, args, env)\n            except:\n                _exit(127)\n        else:\n            # Parent\n            if mode == P_NOWAIT:\n                return pid # Caller is responsible for waiting!\n            while 1:\n                wpid, sts = waitpid(pid, 0)\n                if WIFSTOPPED(sts):\n                    continue\n                elif WIFSIGNALED(sts):\n                    return -WTERMSIG(sts)\n                elif WIFEXITED(sts):\n                    return WEXITSTATUS(sts)\n                else:\n                    raise OSError("Not stopped, signaled or exited???")\n\n    def spawnv(mode, file, args):\n        """spawnv(mode, file, args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, None, execv)\n\n    def spawnve(mode, file, args, env):\n        """spawnve(mode, file, args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nspecified environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, env, execve)\n\n    # Note: spawnvp[e] is\'t currently supported on Windows\n\n    def spawnvp(mode, file, args):\n        """spawnvp(mode, file, args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, None, execvp)\n\n    def spawnvpe(mode, file, args, env):\n        """spawnvpe(mode, file, args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return _spawnvef(mode, file, args, env, execvpe)\n\n\n    __all__.extend(["spawnv", "spawnve", "spawnvp", "spawnvpe"])\n\n\nif _exists("spawnv"):\n    # These aren\'t supplied by the basic Windows code\n    # but can be easily implemented in Python\n\n    def spawnl(mode, file, *args):\n        """spawnl(mode, file, *args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return spawnv(mode, file, args)\n\n    def spawnle(mode, file, *args):\n        """spawnle(mode, file, *args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nsupplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        env = args[-1]\n        return spawnve(mode, file, args[:-1], env)\n\n\n    __all__.extend(["spawnl", "spawnle"])\n\n\nif _exists("spawnvp"):\n    # At the moment, Windows doesn\'t implement spawnvp[e],\n    # so it won\'t have spawnlp[e] either.\n    def spawnlp(mode, file, *args):\n        """spawnlp(mode, file, *args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        return spawnvp(mode, file, args)\n\n    def spawnlpe(mode, file, *args):\n        """spawnlpe(mode, file, *args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process\'s exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. """\n        env = args[-1]\n        return spawnvpe(mode, file, args[:-1], env)\n\n\n    __all__.extend(["spawnlp", "spawnlpe"])\n\n\n# Supply os.popen()\ndef popen(cmd, mode="r", buffering=-1):\n    if not isinstance(cmd, str):\n        raise TypeError("invalid cmd type (%s, expected string)" % type(cmd))\n    if mode not in ("r", "w"):\n        raise ValueError("invalid mode %r" % mode)\n    if buffering == 0 or buffering is None:\n        raise ValueError("popen() does not support unbuffered streams")\n    import subprocess, io\n    if mode == "r":\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdout=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdout), proc)\n    else:\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdin=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdin), proc)\n\n# Helper for popen() -- a proxy for a file whose close waits for the process\nclass _wrap_close:\n    def __init__(self, stream, proc):\n        self._stream = stream\n        self._proc = proc\n    def close(self):\n        self._stream.close()\n        returncode = self._proc.wait()\n        if returncode == 0:\n            return None\n        if name == \'nt\':\n            return returncode\n        else:\n            return returncode << 8  # Shift left to match old behavior\n    def __enter__(self):\n        return self\n    def __exit__(self, *args):\n        self.close()\n    def __getattr__(self, name):\n        return getattr(self._stream, name)\n    def __iter__(self):\n        return iter(self._stream)\n\n# Supply os.fdopen()\ndef fdopen(fd, *args, **kwargs):\n    if not isinstance(fd, int):\n        raise TypeError("invalid fd type (%s, expected integer)" % type(fd))\n    import io\n    return io.open(fd, *args, **kwargs)\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=10, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36950, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=10, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36950, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 10, 1, 1, 0, 0, 36950, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 10, 1, 1, 0, 0, 36950, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 10, type <class 'int'>
Dump int (long) 10
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 36950, type <class 'int'>
Dump int (long) 36950
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 36950
Write message g=<_io.BufferedWriter name=4>, msg=36950, resulttype=None
dump 36950, type <class 'int'>
Dump int (long) 36950
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 1)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=11, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=11, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 11, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 11, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 11, type <class 'int'>
Dump int (long) 11
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/stat.py',))
['', 'bin', 'lib-python', '3', 'stat.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/stat.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=12, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5232, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=12, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5232, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 12, 1, 1, 0, 0, 5232, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 12, 1, 1, 0, 0, 5232, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 12, type <class 'int'>
Dump int (long) 12
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 5232, type <class 'int'>
Dump int (long) 5232
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/stat.py',))
['', 'bin', 'lib-python', '3', 'stat.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/stat.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=13, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5232, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=13, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5232, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 13, 1, 1, 0, 0, 5232, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 13, 1, 1, 0, 0, 5232, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 13, type <class 'int'>
Dump int (long) 13
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 5232, type <class 'int'>
Dump int (long) 5232
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/__pycache__/stat.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', '__pycache__', 'stat.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/stat.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'stat.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/stat.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=14, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5232, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=14, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5232, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 14, 1, 1, 0, 0, 5232, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 14, 1, 1, 0, 0, 5232, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 14, type <class 'int'>
Dump int (long) 14
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 5232, type <class 'int'>
Dump int (long) 5232
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=14, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5232, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=14, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5232, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 14, 1, 1, 0, 0, 5232, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 14, 1, 1, 0, 0, 5232, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 14, type <class 'int'>
Dump int (long) 14
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 5232, type <class 'int'>
Dump int (long) 5232
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b'"""Constants/functions for interpreting results of os.stat() and os.lstat().\n\nSuggested usage: from stat import *\n"""\n\n# Indices for stat struct members in the tuple returned by os.stat()\n\nST_MODE  = 0\nST_INO   = 1\nST_DEV   = 2\nST_NLINK = 3\nST_UID   = 4\nST_GID   = 5\nST_SIZE  = 6\nST_ATIME = 7\nST_MTIME = 8\nST_CTIME = 9\n\n# Extract bits from the mode\n\ndef S_IMODE(mode):\n    """Return the portion of the file\'s mode that can be set by\n    os.chmod().\n    """\n    return mode & 0o7777\n\ndef S_IFMT(mode):\n    """Return the portion of the file\'s mode that describes the\n    file type.\n    """\n    return mode & 0o170000\n\n# Constants used as S_IFMT() for various file types\n# (not all are implemented on all systems)\n\nS_IFDIR  = 0o040000  # directory\nS_IFCHR  = 0o020000  # character device\nS_IFBLK  = 0o060000  # block device\nS_IFREG  = 0o100000  # regular file\nS_IFIFO  = 0o010000  # fifo (named pipe)\nS_IFLNK  = 0o120000  # symbolic link\nS_IFSOCK = 0o140000  # socket file\n\n# Functions to test for each file type\n\ndef S_ISDIR(mode):\n    """Return True if mode is from a directory."""\n    return S_IFMT(mode) == S_IFDIR\n\ndef S_ISCHR(mode):\n    """Return True if mode is from a character special device file."""\n    return S_IFMT(mode) == S_IFCHR\n\ndef S_ISBLK(mode):\n    """Return True if mode is from a block special device file."""\n    return S_IFMT(mode) == S_IFBLK\n\ndef S_ISREG(mode):\n    """Return True if mode is from a regular file."""\n    return S_IFMT(mode) == S_IFREG\n\ndef S_ISFIFO(mode):\n    """Return True if mode is from a FIFO (named pipe)."""\n    return S_IFMT(mode) == S_IFIFO\n\ndef S_ISLNK(mode):\n    """Return True if mode is from a symbolic link."""\n    return S_IFMT(mode) == S_IFLNK\n\ndef S_ISSOCK(mode):\n    """Return True if mode is from a socket."""\n    return S_IFMT(mode) == S_IFSOCK\n\n# Names for permission bits\n\nS_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n\n# Names for file flags\n\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived\nSF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted\nSF_SNAPSHOT  = 0x00200000  # file is a snapshot file\n\n\n_filemode_table = (\n    ((S_IFLNK,         "l"),\n     (S_IFREG,         "-"),\n     (S_IFBLK,         "b"),\n     (S_IFDIR,         "d"),\n     (S_IFCHR,         "c"),\n     (S_IFIFO,         "p")),\n\n    ((S_IRUSR,         "r"),),\n    ((S_IWUSR,         "w"),),\n    ((S_IXUSR|S_ISUID, "s"),\n     (S_ISUID,         "S"),\n     (S_IXUSR,         "x")),\n\n    ((S_IRGRP,         "r"),),\n    ((S_IWGRP,         "w"),),\n    ((S_IXGRP|S_ISGID, "s"),\n     (S_ISGID,         "S"),\n     (S_IXGRP,         "x")),\n\n    ((S_IROTH,         "r"),),\n    ((S_IWOTH,         "w"),),\n    ((S_IXOTH|S_ISVTX, "t"),\n     (S_ISVTX,         "T"),\n     (S_IXOTH,         "x"))\n)\n\ndef filemode(mode):\n    """Convert a file\'s mode to a string of the form \'-rwxrwxrwx\'."""\n    perm = []\n\n    # The first group gets a question mark if none of the bits match the mode.\n    empty = "?"\n\n    for table in _filemode_table:\n        for bit, char in table:\n            if mode & bit == bit:\n                perm.append(char)\n                break\n        else:\n            perm.append(empty)\n\n        # All the rest of the positions get a - if the bits don\'t match.\n        empty = "-"\n\n    return "".join(perm)\n\n\n# Windows FILE_ATTRIBUTE constants for interpreting os.stat()\'s\n# "st_file_attributes" member\n\nFILE_ATTRIBUTE_ARCHIVE = 32\nFILE_ATTRIBUTE_COMPRESSED = 2048\nFILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n\n\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'"""Constants/functions for interpreting results of os.stat() and os.lstat().\n\nSuggested usage: from stat import *\n"""\n\n# Indices for stat struct members in the tuple returned by os.stat()\n\nST_MODE  = 0\nST_INO   = 1\nST_DEV   = 2\nST_NLINK = 3\nST_UID   = 4\nST_GID   = 5\nST_SIZE  = 6\nST_ATIME = 7\nST_MTIME = 8\nST_CTIME = 9\n\n# Extract bits from the mode\n\ndef S_IMODE(mode):\n    """Return the portion of the file\'s mode that can be set by\n    os.chmod().\n    """\n    return mode & 0o7777\n\ndef S_IFMT(mode):\n    """Return the portion of the file\'s mode that describes the\n    file type.\n    """\n    return mode & 0o170000\n\n# Constants used as S_IFMT() for various file types\n# (not all are implemented on all systems)\n\nS_IFDIR  = 0o040000  # directory\nS_IFCHR  = 0o020000  # character device\nS_IFBLK  = 0o060000  # block device\nS_IFREG  = 0o100000  # regular file\nS_IFIFO  = 0o010000  # fifo (named pipe)\nS_IFLNK  = 0o120000  # symbolic link\nS_IFSOCK = 0o140000  # socket file\n\n# Functions to test for each file type\n\ndef S_ISDIR(mode):\n    """Return True if mode is from a directory."""\n    return S_IFMT(mode) == S_IFDIR\n\ndef S_ISCHR(mode):\n    """Return True if mode is from a character special device file."""\n    return S_IFMT(mode) == S_IFCHR\n\ndef S_ISBLK(mode):\n    """Return True if mode is from a block special device file."""\n    return S_IFMT(mode) == S_IFBLK\n\ndef S_ISREG(mode):\n    """Return True if mode is from a regular file."""\n    return S_IFMT(mode) == S_IFREG\n\ndef S_ISFIFO(mode):\n    """Return True if mode is from a FIFO (named pipe)."""\n    return S_IFMT(mode) == S_IFIFO\n\ndef S_ISLNK(mode):\n    """Return True if mode is from a symbolic link."""\n    return S_IFMT(mode) == S_IFLNK\n\ndef S_ISSOCK(mode):\n    """Return True if mode is from a socket."""\n    return S_IFMT(mode) == S_IFSOCK\n\n# Names for permission bits\n\nS_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n\n# Names for file flags\n\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived\nSF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted\nSF_SNAPSHOT  = 0x00200000  # file is a snapshot file\n\n\n_filemode_table = (\n    ((S_IFLNK,         "l"),\n     (S_IFREG,         "-"),\n     (S_IFBLK,         "b"),\n     (S_IFDIR,         "d"),\n     (S_IFCHR,         "c"),\n     (S_IFIFO,         "p")),\n\n    ((S_IRUSR,         "r"),),\n    ((S_IWUSR,         "w"),),\n    ((S_IXUSR|S_ISUID, "s"),\n     (S_ISUID,         "S"),\n     (S_IXUSR,         "x")),\n\n    ((S_IRGRP,         "r"),),\n    ((S_IWGRP,         "w"),),\n    ((S_IXGRP|S_ISGID, "s"),\n     (S_ISGID,         "S"),\n     (S_IXGRP,         "x")),\n\n    ((S_IROTH,         "r"),),\n    ((S_IWOTH,         "w"),),\n    ((S_IXOTH|S_ISVTX, "t"),\n     (S_ISVTX,         "T"),\n     (S_IXOTH,         "x"))\n)\n\ndef filemode(mode):\n    """Convert a file\'s mode to a string of the form \'-rwxrwxrwx\'."""\n    perm = []\n\n    # The first group gets a question mark if none of the bits match the mode.\n    empty = "?"\n\n    for table in _filemode_table:\n        for bit, char in table:\n            if mode & bit == bit:\n                perm.append(char)\n                break\n        else:\n            perm.append(empty)\n\n        # All the rest of the positions get a - if the bits don\'t match.\n        empty = "-"\n\n    return "".join(perm)\n\n\n# Windows FILE_ATTRIBUTE constants for interpreting os.stat()\'s\n# "st_file_attributes" member\n\nFILE_ATTRIBUTE_ARCHIVE = 32\nFILE_ATTRIBUTE_COMPRESSED = 2048\nFILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n\n\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass\n', resulttype=None
dump b'"""Constants/functions for interpreting results of os.stat() and os.lstat().\n\nSuggested usage: from stat import *\n"""\n\n# Indices for stat struct members in the tuple returned by os.stat()\n\nST_MODE  = 0\nST_INO   = 1\nST_DEV   = 2\nST_NLINK = 3\nST_UID   = 4\nST_GID   = 5\nST_SIZE  = 6\nST_ATIME = 7\nST_MTIME = 8\nST_CTIME = 9\n\n# Extract bits from the mode\n\ndef S_IMODE(mode):\n    """Return the portion of the file\'s mode that can be set by\n    os.chmod().\n    """\n    return mode & 0o7777\n\ndef S_IFMT(mode):\n    """Return the portion of the file\'s mode that describes the\n    file type.\n    """\n    return mode & 0o170000\n\n# Constants used as S_IFMT() for various file types\n# (not all are implemented on all systems)\n\nS_IFDIR  = 0o040000  # directory\nS_IFCHR  = 0o020000  # character device\nS_IFBLK  = 0o060000  # block device\nS_IFREG  = 0o100000  # regular file\nS_IFIFO  = 0o010000  # fifo (named pipe)\nS_IFLNK  = 0o120000  # symbolic link\nS_IFSOCK = 0o140000  # socket file\n\n# Functions to test for each file type\n\ndef S_ISDIR(mode):\n    """Return True if mode is from a directory."""\n    return S_IFMT(mode) == S_IFDIR\n\ndef S_ISCHR(mode):\n    """Return True if mode is from a character special device file."""\n    return S_IFMT(mode) == S_IFCHR\n\ndef S_ISBLK(mode):\n    """Return True if mode is from a block special device file."""\n    return S_IFMT(mode) == S_IFBLK\n\ndef S_ISREG(mode):\n    """Return True if mode is from a regular file."""\n    return S_IFMT(mode) == S_IFREG\n\ndef S_ISFIFO(mode):\n    """Return True if mode is from a FIFO (named pipe)."""\n    return S_IFMT(mode) == S_IFIFO\n\ndef S_ISLNK(mode):\n    """Return True if mode is from a symbolic link."""\n    return S_IFMT(mode) == S_IFLNK\n\ndef S_ISSOCK(mode):\n    """Return True if mode is from a socket."""\n    return S_IFMT(mode) == S_IFSOCK\n\n# Names for permission bits\n\nS_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n\n# Names for file flags\n\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived\nSF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted\nSF_SNAPSHOT  = 0x00200000  # file is a snapshot file\n\n\n_filemode_table = (\n    ((S_IFLNK,         "l"),\n     (S_IFREG,         "-"),\n     (S_IFBLK,         "b"),\n     (S_IFDIR,         "d"),\n     (S_IFCHR,         "c"),\n     (S_IFIFO,         "p")),\n\n    ((S_IRUSR,         "r"),),\n    ((S_IWUSR,         "w"),),\n    ((S_IXUSR|S_ISUID, "s"),\n     (S_ISUID,         "S"),\n     (S_IXUSR,         "x")),\n\n    ((S_IRGRP,         "r"),),\n    ((S_IWGRP,         "w"),),\n    ((S_IXGRP|S_ISGID, "s"),\n     (S_ISGID,         "S"),\n     (S_IXGRP,         "x")),\n\n    ((S_IROTH,         "r"),),\n    ((S_IWOTH,         "w"),),\n    ((S_IXOTH|S_ISVTX, "t"),\n     (S_ISVTX,         "T"),\n     (S_IXOTH,         "x"))\n)\n\ndef filemode(mode):\n    """Convert a file\'s mode to a string of the form \'-rwxrwxrwx\'."""\n    perm = []\n\n    # The first group gets a question mark if none of the bits match the mode.\n    empty = "?"\n\n    for table in _filemode_table:\n        for bit, char in table:\n            if mode & bit == bit:\n                perm.append(char)\n                break\n        else:\n            perm.append(empty)\n\n        # All the rest of the positions get a - if the bits don\'t match.\n        empty = "-"\n\n    return "".join(perm)\n\n\n# Windows FILE_ATTRIBUTE constants for interpreting os.stat()\'s\n# "st_file_attributes" member\n\nFILE_ATTRIBUTE_ARCHIVE = 32\nFILE_ATTRIBUTE_COMPRESSED = 2048\nFILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n\n\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=14, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5232, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=14, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5232, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 14, 1, 1, 0, 0, 5232, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 14, 1, 1, 0, 0, 5232, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 14, type <class 'int'>
Dump int (long) 14
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 5232, type <class 'int'>
Dump int (long) 5232
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 5232
Write message g=<_io.BufferedWriter name=4>, msg=5232, resulttype=None
dump 5232, type <class 'int'>
Dump int (long) 5232
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/_stat.py',))
['', 'bin', 'lib_pypy', '_stat.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy/_stat.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=15, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=73, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=15, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=73, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 15, 1, 1, 0, 0, 73, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 15, 1, 1, 0, 0, 73, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 15, type <class 'int'>
Dump int (long) 15
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 73, type <class 'int'>
Dump int (long) 73
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/_stat.py',))
['', 'bin', 'lib_pypy', '_stat.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy/_stat.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=16, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=73, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=16, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=73, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 16, 1, 1, 0, 0, 73, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 16, 1, 1, 0, 0, 73, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 16, type <class 'int'>
Dump int (long) 16
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 73, type <class 'int'>
Dump int (long) 73
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib_pypy/__pycache__/_stat.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib_pypy', '__pycache__', '_stat.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy> ['audioop.py', 'cffi', 'cffi.egg-info', 'ctypes_config_cache', 'ctypes_support.py', 'future_builtins.py', 'greenlet.egg-info', 'greenlet.py', 'grp.py', 'identity_dict.py', 'marshal.py', 'msvcrt.py', 'pwd.py', 'pyrepl', 'readline.egg-info', 'readline.py', 'resource.py', 'stackless.py', 'syslog.py', 'testcapi_long.h', 'tputil.py', '_audioop_build.py', '_cffi_ssl', '_codecs_cn.py', '_codecs_hk.py', '_codecs_iso2022.py', '_codecs_jp.py', '_codecs_kr.py', '_codecs_tw.py', '_collections.py', '_csv.py', '_ctypes', '_ctypes_test.c', '_ctypes_test.py', '_curses.py', '_curses_build.py', '_curses_panel.py', '_dbm.py', '_decimal.py', '_decimal_build.py', '_ffi.py', '_functools.py', '_gdbm.py', '_gdbm_build.py', '_hashlib', '_libmpdec', '_lzma.py', '_lzma_build.py', '_marshal.py', '_md5.py', '_pwdgrp_build.py', '_pypy_collections.py', '_pypy_interact.py', '_pypy_irc_topic.py', '_pypy_testcapi.py', '_pypy_wait.py', '_pypy_winbase_build.py', '_pypy_winbase_cffi.py', '_resource_build.py', '_scproxy.py', '_sha1.py', '_sha256.py', '_sha512.py', '_sqlite3.py', '_sqlite3_build.py', '_ssl', '_ssl_build.py', '_stat.py', '_structseq.py', '_sysconfigdata.py', '_syslog_build.py', '_testcapi.py', '_testcapimodule.c', '_testmultiphase.c', '_testmultiphase.py', '_tkinter', '_winapi.py', '__init__.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib_pypy/_stat.py', 524288, 438))
['', 'bin', 'lib_pypy', '_stat.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib_pypy/_stat.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=17, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=73, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=17, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=73, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 17, 1, 1, 0, 0, 73, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 17, 1, 1, 0, 0, 73, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 17, type <class 'int'>
Dump int (long) 17
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 73, type <class 'int'>
Dump int (long) 73
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=17, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=73, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=17, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=73, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 17, 1, 1, 0, 0, 73, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 17, 1, 1, 0, 0, 73, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 17, type <class 'int'>
Dump int (long) 17
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 73, type <class 'int'>
Dump int (long) 73
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b'# Assume not Solaris\n\nS_IFDOOR = 0\n\ndef S_ISDOOR(mode):\n    return False\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'# Assume not Solaris\n\nS_IFDOOR = 0\n\ndef S_ISDOOR(mode):\n    return False\n', resulttype=None
dump b'# Assume not Solaris\n\nS_IFDOOR = 0\n\ndef S_ISDOOR(mode):\n    return False\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=17, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=73, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=17, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=73, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 17, 1, 1, 0, 0, 73, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 17, 1, 1, 0, 0, 73, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 17, type <class 'int'>
Dump int (long) 17
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 73, type <class 'int'>
Dump int (long) 73
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 73
Write message g=<_io.BufferedWriter name=4>, msg=73, resulttype=None
dump 73, type <class 'int'>
Dump int (long) 73
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=18, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=18, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 18, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 18, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 18, type <class 'int'>
Dump int (long) 18
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/posixpath.py',))
['', 'bin', 'lib-python', '3', 'posixpath.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/posixpath.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=19, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=14911, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=19, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=14911, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 19, 1, 1, 0, 0, 14911, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 19, 1, 1, 0, 0, 14911, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 19, type <class 'int'>
Dump int (long) 19
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 14911, type <class 'int'>
Dump int (long) 14911
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/posixpath.py',))
['', 'bin', 'lib-python', '3', 'posixpath.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/posixpath.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=20, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=14911, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=20, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=14911, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 20, 1, 1, 0, 0, 14911, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 20, 1, 1, 0, 0, 14911, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 20, type <class 'int'>
Dump int (long) 20
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 14911, type <class 'int'>
Dump int (long) 14911
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/__pycache__/posixpath.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', '__pycache__', 'posixpath.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/posixpath.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'posixpath.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/posixpath.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=21, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=14911, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=21, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=14911, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 21, 1, 1, 0, 0, 14911, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 21, 1, 1, 0, 0, 14911, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 21, type <class 'int'>
Dump int (long) 21
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 14911, type <class 'int'>
Dump int (long) 14911
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=21, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=14911, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=21, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=14911, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 21, 1, 1, 0, 0, 14911, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 21, 1, 1, 0, 0, 14911, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 21, type <class 'int'>
Dump int (long) 21
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 14911, type <class 'int'>
Dump int (long) 14911
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 14912))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 14912)) complete. Writing back b'"""Common operations on Posix pathnames.\n\nInstead of importing this module directly, import os and refer to\nthis module as os.path.  The "os.path" name is an alias for this\nmodule on Posix systems; on other systems (e.g. Mac, Windows),\nos.path provides the same operations in a manner specific to that\nplatform, and is an alias to another module (e.g. macpath, ntpath).\n\nSome of this can actually be useful on non-Posix systems too, e.g.\nfor manipulation of the pathname component of URLs.\n"""\n\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n\n__all__ = ["normcase","isabs","join","splitdrive","split","splitext",\n           "basename","dirname","commonprefix","getsize","getmtime",\n           "getatime","getctime","islink","exists","lexists","isdir","isfile",\n           "ismount", "expanduser","expandvars","normpath","abspath",\n           "samefile","sameopenfile","samestat",\n           "curdir","pardir","sep","pathsep","defpath","altsep","extsep",\n           "devnull","realpath","supports_unicode_filenames","relpath",\n           "commonpath"]\n\n# Strings representing various path-related bits and pieces.\n# These are primarily for export; internally, they are hardcoded.\ncurdir = \'.\'\npardir = \'..\'\nextsep = \'.\'\nsep = \'/\'\npathsep = \':\'\ndefpath = \':/bin:/usr/bin\'\naltsep = None\ndevnull = \'/dev/null\'\n\ndef _get_sep(path):\n    if isinstance(path, bytes):\n        return b\'/\'\n    else:\n        return \'/\'\n\n# Normalize the case of a pathname.  Trivial in Posix, string.lower on Mac.\n# On MS-DOS this may also turn slashes into backslashes; however, other\n# normalizations (such as optimizing \'../\' away) are not allowed\n# (another function should be defined to do that).\n\ndef normcase(s):\n    """Normalize case of pathname.  Has no effect under Posix"""\n    if not isinstance(s, (bytes, str)):\n        raise TypeError("normcase() argument must be str or bytes, "\n                        "not \'{}\'".format(s.__class__.__name__))\n    return s\n\n\n# Return whether a path is absolute.\n# Trivial in Posix, harder on the Mac or MS-DOS.\n\ndef isabs(s):\n    """Test whether a path is absolute"""\n    sep = _get_sep(s)\n    return s.startswith(sep)\n\n\n# Join pathnames.\n# Ignore the previous parts if a part is absolute.\n# Insert a \'/\' unless the first part is empty or already ends in \'/\'.\n\ndef join(a, *p):\n    """Join two or more pathname components, inserting \'/\' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator."""\n    sep = _get_sep(a)\n    path = a\n    try:\n        if not p:\n            path[:0] + sep  #23780: Ensure compatible data type even if p is null.\n        for b in p:\n            if b.startswith(sep):\n                path = b\n            elif not path or path.endswith(sep):\n                path += b\n            else:\n                path += sep + b\n    except (TypeError, AttributeError, BytesWarning):\n        genericpath._check_arg_types(\'join\', a, *p)\n        raise\n    return path\n\n\n# Split a path in head (everything up to the last \'/\') and tail (the\n# rest).  If the path ends in \'/\', tail will be empty.  If there is no\n# \'/\' in the path, head  will be empty.\n# Trailing \'/\'es are stripped from head unless it is the root.\n\ndef split(p):\n    """Split a pathname.  Returns tuple "(head, tail)" where "tail" is\n    everything after the final slash.  Either part may be empty."""\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head, tail = p[:i], p[i:]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head, tail\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\ndef splitext(p):\n    if isinstance(p, bytes):\n        sep = b\'/\'\n        extsep = b\'.\'\n    else:\n        sep = \'/\'\n        extsep = \'.\'\n    return genericpath._splitext(p, sep, None, extsep)\nsplitext.__doc__ = genericpath._splitext.__doc__\n\n# Split a pathname into a drive specification and the rest of the\n# path.  Useful on DOS/Windows/NT; on Unix, the drive is always empty.\n\ndef splitdrive(p):\n    """Split a pathname into drive and path. On Posix, drive is always\n    empty."""\n    return p[:0], p\n\n\n# Return the tail (basename) part of a path, same as split(path)[1].\n\ndef basename(p):\n    """Returns the final component of a pathname"""\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    return p[i:]\n\n\n# Return the head (dirname) part of a path, same as split(path)[0].\n\ndef dirname(p):\n    """Returns the directory component of a pathname"""\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head = p[:i]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head\n\n\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn\'t exist.\n\ndef islink(path):\n    """Test whether a path is a symbolic link"""\n    try:\n        st = os.lstat(path)\n    except (OSError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n\n# Being true for dangling symbolic links is also useful.\n\ndef lexists(path):\n    """Test whether a path exists.  Returns True for broken symbolic links"""\n    try:\n        os.lstat(path)\n    except OSError:\n        return False\n    return True\n\n\n# Is a path a mount point?\n# (Does this work for all UNIXes?  Is it even guaranteed to work by Posix?)\n\ndef ismount(path):\n    """Test whether a path is a mount point"""\n    try:\n        s1 = os.lstat(path)\n    except OSError:\n        # It doesn\'t exist -- so not a mount point. :-)\n        return False\n    else:\n        # A symlink can never be a mount point\n        if stat.S_ISLNK(s1.st_mode):\n            return False\n\n    if isinstance(path, bytes):\n        parent = join(path, b\'..\')\n    else:\n        parent = join(path, \'..\')\n    parent = realpath(parent)\n    try:\n        s2 = os.lstat(parent)\n    except OSError:\n        return False\n\n    dev1 = s1.st_dev\n    dev2 = s2.st_dev\n    if dev1 != dev2:\n        return True     # path/.. on a different device as path\n    ino1 = s1.st_ino\n    ino2 = s2.st_ino\n    if ino1 == ino2:\n        return True     # path/.. is the same i-node as path\n    return False\n\n\n# Expand paths beginning with \'~\' or \'~user\'.\n# \'~\' means $HOME; \'~user\' means that user\'s home directory.\n# If the path doesn\'t begin with \'~\', or if the user or $HOME is unknown,\n# the path is returned unchanged (leaving error reporting to whatever\n# function is called with the expanded path as argument).\n# See also module \'glob\' for expansion of *, ? and [...] in pathnames.\n# (A function should also be defined to do full *sh-style environment\n# variable expansion.)\n\ndef expanduser(path):\n    """Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing."""\n    if isinstance(path, bytes):\n        tilde = b\'~\'\n    else:\n        tilde = \'~\'\n    if not path.startswith(tilde):\n        return path\n    sep = _get_sep(path)\n    i = path.find(sep, 1)\n    if i < 0:\n        i = len(path)\n    if i == 1:\n        if \'HOME\' not in os.environ:\n            import pwd\n            userhome = pwd.getpwuid(os.getuid()).pw_dir\n        else:\n            userhome = os.environ[\'HOME\']\n    else:\n        import pwd\n        name = path[1:i]\n        if isinstance(name, bytes):\n            name = str(name, \'ASCII\')\n        try:\n            pwent = pwd.getpwnam(name)\n        except KeyError:\n            return path\n        userhome = pwent.pw_dir\n    if isinstance(path, bytes):\n        userhome = os.fsencode(userhome)\n        root = b\'/\'\n    else:\n        root = \'/\'\n    userhome = userhome.rstrip(root)\n    return (userhome + path[i:]) or root\n\n\n# Expand paths containing shell variable substitutions.\n# This expands the forms $variable and ${variable} only.\n# Non-existent variables are left unchanged.\n\n_varprog = None\n_varprogb = None\n\ndef expandvars(path):\n    """Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged."""\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b\'$\' not in path:\n            return path\n        if not _varprogb:\n            import re\n            _varprogb = re.compile(br\'\\$(\\w+|\\{[^}]*\\})\', re.ASCII)\n        search = _varprogb.search\n        start = b\'{\'\n        end = b\'}\'\n        environ = getattr(os, \'environb\', None)\n    else:\n        if \'$\' not in path:\n            return path\n        if not _varprog:\n            import re\n            _varprog = re.compile(r\'\\$(\\w+|\\{[^}]*\\})\', re.ASCII)\n        search = _varprog.search\n        start = \'{\'\n        end = \'}\'\n        environ = os.environ\n    i = 0\n    while True:\n        m = search(path, i)\n        if not m:\n            break\n        i, j = m.span(0)\n        name = m.group(1)\n        if name.startswith(start) and name.endswith(end):\n            name = name[1:-1]\n        try:\n            if environ is None:\n                value = os.fsencode(os.environ[os.fsdecode(name)])\n            else:\n                value = environ[name]\n        except KeyError:\n            i = j\n        else:\n            tail = path[j:]\n            path = path[:i] + value\n            i = len(path)\n            path += tail\n    return path\n\n\n# Normalize a path, e.g. A//B, A/./B and A/foo/../B all become A/B.\n# It should be understood that this may change the meaning of the path\n# if it contains symbolic links!\n\ndef normpath(path):\n    """Normalize path, eliminating double slashes, etc."""\n    if isinstance(path, bytes):\n        sep = b\'/\'\n        empty = b\'\'\n        dot = b\'.\'\n        dotdot = b\'..\'\n    else:\n        sep = \'/\'\n        empty = \'\'\n        dot = \'.\'\n        dotdot = \'..\'\n    if path == empty:\n        return dot\n    initial_slashes = path.startswith(sep)\n    # POSIX allows one or two initial slashes, but treats three or more\n    # as single slash.\n    if (initial_slashes and\n        path.startswith(sep*2) and not path.startswith(sep*3)):\n        initial_slashes = 2\n    comps = path.split(sep)\n    new_comps = []\n    for comp in comps:\n        if comp in (empty, dot):\n            continue\n        if (comp != dotdot or (not initial_slashes and not new_comps) or\n             (new_comps and new_comps[-1] == dotdot)):\n            new_comps.append(comp)\n        elif new_comps:\n            new_comps.pop()\n    comps = new_comps\n    path = sep.join(comps)\n    if initial_slashes:\n        path = sep*initial_slashes + path\n    return path or dot\n\n\ndef abspath(path):\n    """Return an absolute path."""\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)\n\n\n# Return a canonical path (i.e. the absolute location of a file on the\n# filesystem).\n\ndef realpath(filename):\n    """Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path."""\n    path, ok = _joinrealpath(filename[:0], filename, {})\n    return abspath(path)\n\n# Join two paths, normalizing and eliminating any symbolic links\n# encountered in the second path.\ndef _joinrealpath(path, rest, seen):\n    if isinstance(path, bytes):\n        sep = b\'/\'\n        curdir = b\'.\'\n        pardir = b\'..\'\n    else:\n        sep = \'/\'\n        curdir = \'.\'\n        pardir = \'..\'\n\n    if isabs(rest):\n        rest = rest[1:]\n        path = sep\n\n    while rest:\n        name, _, rest = rest.partition(sep)\n        if not name or name == curdir:\n            # current dir\n            continue\n        if name == pardir:\n            # parent dir\n            if path:\n                path, name = split(path)\n                if name == pardir:\n                    path = join(path, pardir, pardir)\n            else:\n                path = pardir\n            continue\n        newpath = join(path, name)\n        if not islink(newpath):\n            path = newpath\n            continue\n        # Resolve the symbolic link\n        if newpath in seen:\n            # Already seen this path\n            path = seen[newpath]\n            if path is not None:\n                # use cached value\n                continue\n            # The symlink is not resolved, so we must have a symlink loop.\n            # Return already resolved part + rest of the path unchanged.\n            return join(newpath, rest), False\n        seen[newpath] = None # not resolved symlink\n        path, ok = _joinrealpath(path, os.readlink(newpath), seen)\n        if not ok:\n            return join(path, rest), False\n        seen[newpath] = path # resolved symlink\n\n    return path, True\n\n\nsupports_unicode_filenames = (sys.platform == \'darwin\')\n\ndef relpath(path, start=None):\n    """Return a relative version of a path"""\n\n    if not path:\n        raise ValueError("no path specified")\n\n    if isinstance(path, bytes):\n        curdir = b\'.\'\n        sep = b\'/\'\n        pardir = b\'..\'\n    else:\n        curdir = \'.\'\n        sep = \'/\'\n        pardir = \'..\'\n\n    if start is None:\n        start = curdir\n\n    try:\n        start_list = [x for x in abspath(start).split(sep) if x]\n        path_list = [x for x in abspath(path).split(sep) if x]\n        # Work out how much of the filepath is shared by start and path.\n        i = len(commonprefix([start_list, path_list]))\n\n        rel_list = [pardir] * (len(start_list)-i) + path_list[i:]\n        if not rel_list:\n            return curdir\n        return join(*rel_list)\n    except (TypeError, AttributeError, BytesWarning, DeprecationWarning):\n        genericpath._check_arg_types(\'relpath\', path, start)\n        raise\n\n\n# Return the longest common sub-path of the sequence of paths given as input.\n# The paths are not normalized before comparing them (this is the\n# responsibility of the caller). Any trailing separator is stripped from the\n# returned path.\n\ndef commonpath(paths):\n    """Given a sequence of path names, returns the longest common sub-path."""\n\n    if not paths:\n        raise ValueError(\'commonpath() arg is an empty sequence\')\n\n    if isinstance(paths[0], bytes):\n        sep = b\'/\'\n        curdir = b\'.\'\n    else:\n        sep = \'/\'\n        curdir = \'.\'\n\n    try:\n        split_paths = [path.split(sep) for path in paths]\n\n        try:\n            isabs, = set(p[:1] == sep for p in paths)\n        except ValueError:\n            raise ValueError("Can\'t mix absolute and relative paths") from None\n\n        split_paths = [[c for c in s if c and c != curdir] for s in split_paths]\n        s1 = min(split_paths)\n        s2 = max(split_paths)\n        common = s1\n        for i, c in enumerate(s1):\n            if c != s2[i]:\n                common = s1[:i]\n                break\n\n        prefix = sep if isabs else sep[:0]\n        return prefix + sep.join(common)\n    except (TypeError, AttributeError):\n        genericpath._check_arg_types(\'commonpath\', *paths)\n        raise\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'"""Common operations on Posix pathnames.\n\nInstead of importing this module directly, import os and refer to\nthis module as os.path.  The "os.path" name is an alias for this\nmodule on Posix systems; on other systems (e.g. Mac, Windows),\nos.path provides the same operations in a manner specific to that\nplatform, and is an alias to another module (e.g. macpath, ntpath).\n\nSome of this can actually be useful on non-Posix systems too, e.g.\nfor manipulation of the pathname component of URLs.\n"""\n\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n\n__all__ = ["normcase","isabs","join","splitdrive","split","splitext",\n           "basename","dirname","commonprefix","getsize","getmtime",\n           "getatime","getctime","islink","exists","lexists","isdir","isfile",\n           "ismount", "expanduser","expandvars","normpath","abspath",\n           "samefile","sameopenfile","samestat",\n           "curdir","pardir","sep","pathsep","defpath","altsep","extsep",\n           "devnull","realpath","supports_unicode_filenames","relpath",\n           "commonpath"]\n\n# Strings representing various path-related bits and pieces.\n# These are primarily for export; internally, they are hardcoded.\ncurdir = \'.\'\npardir = \'..\'\nextsep = \'.\'\nsep = \'/\'\npathsep = \':\'\ndefpath = \':/bin:/usr/bin\'\naltsep = None\ndevnull = \'/dev/null\'\n\ndef _get_sep(path):\n    if isinstance(path, bytes):\n        return b\'/\'\n    else:\n        return \'/\'\n\n# Normalize the case of a pathname.  Trivial in Posix, string.lower on Mac.\n# On MS-DOS this may also turn slashes into backslashes; however, other\n# normalizations (such as optimizing \'../\' away) are not allowed\n# (another function should be defined to do that).\n\ndef normcase(s):\n    """Normalize case of pathname.  Has no effect under Posix"""\n    if not isinstance(s, (bytes, str)):\n        raise TypeError("normcase() argument must be str or bytes, "\n                        "not \'{}\'".format(s.__class__.__name__))\n    return s\n\n\n# Return whether a path is absolute.\n# Trivial in Posix, harder on the Mac or MS-DOS.\n\ndef isabs(s):\n    """Test whether a path is absolute"""\n    sep = _get_sep(s)\n    return s.startswith(sep)\n\n\n# Join pathnames.\n# Ignore the previous parts if a part is absolute.\n# Insert a \'/\' unless the first part is empty or already ends in \'/\'.\n\ndef join(a, *p):\n    """Join two or more pathname components, inserting \'/\' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator."""\n    sep = _get_sep(a)\n    path = a\n    try:\n        if not p:\n            path[:0] + sep  #23780: Ensure compatible data type even if p is null.\n        for b in p:\n            if b.startswith(sep):\n                path = b\n            elif not path or path.endswith(sep):\n                path += b\n            else:\n                path += sep + b\n    except (TypeError, AttributeError, BytesWarning):\n        genericpath._check_arg_types(\'join\', a, *p)\n        raise\n    return path\n\n\n# Split a path in head (everything up to the last \'/\') and tail (the\n# rest).  If the path ends in \'/\', tail will be empty.  If there is no\n# \'/\' in the path, head  will be empty.\n# Trailing \'/\'es are stripped from head unless it is the root.\n\ndef split(p):\n    """Split a pathname.  Returns tuple "(head, tail)" where "tail" is\n    everything after the final slash.  Either part may be empty."""\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head, tail = p[:i], p[i:]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head, tail\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\ndef splitext(p):\n    if isinstance(p, bytes):\n        sep = b\'/\'\n        extsep = b\'.\'\n    else:\n        sep = \'/\'\n        extsep = \'.\'\n    return genericpath._splitext(p, sep, None, extsep)\nsplitext.__doc__ = genericpath._splitext.__doc__\n\n# Split a pathname into a drive specification and the rest of the\n# path.  Useful on DOS/Windows/NT; on Unix, the drive is always empty.\n\ndef splitdrive(p):\n    """Split a pathname into drive and path. On Posix, drive is always\n    empty."""\n    return p[:0], p\n\n\n# Return the tail (basename) part of a path, same as split(path)[1].\n\ndef basename(p):\n    """Returns the final component of a pathname"""\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    return p[i:]\n\n\n# Return the head (dirname) part of a path, same as split(path)[0].\n\ndef dirname(p):\n    """Returns the directory component of a pathname"""\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head = p[:i]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head\n\n\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn\'t exist.\n\ndef islink(path):\n    """Test whether a path is a symbolic link"""\n    try:\n        st = os.lstat(path)\n    except (OSError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n\n# Being true for dangling symbolic links is also useful.\n\ndef lexists(path):\n    """Test whether a path exists.  Returns True for broken symbolic links"""\n    try:\n        os.lstat(path)\n    except OSError:\n        return False\n    return True\n\n\n# Is a path a mount point?\n# (Does this work for all UNIXes?  Is it even guaranteed to work by Posix?)\n\ndef ismount(path):\n    """Test whether a path is a mount point"""\n    try:\n        s1 = os.lstat(path)\n    except OSError:\n        # It doesn\'t exist -- so not a mount point. :-)\n        return False\n    else:\n        # A symlink can never be a mount point\n        if stat.S_ISLNK(s1.st_mode):\n            return False\n\n    if isinstance(path, bytes):\n        parent = join(path, b\'..\')\n    else:\n        parent = join(path, \'..\')\n    parent = realpath(parent)\n    try:\n        s2 = os.lstat(parent)\n    except OSError:\n        return False\n\n    dev1 = s1.st_dev\n    dev2 = s2.st_dev\n    if dev1 != dev2:\n        return True     # path/.. on a different device as path\n    ino1 = s1.st_ino\n    ino2 = s2.st_ino\n    if ino1 == ino2:\n        return True     # path/.. is the same i-node as path\n    return False\n\n\n# Expand paths beginning with \'~\' or \'~user\'.\n# \'~\' means $HOME; \'~user\' means that user\'s home directory.\n# If the path doesn\'t begin with \'~\', or if the user or $HOME is unknown,\n# the path is returned unchanged (leaving error reporting to whatever\n# function is called with the expanded path as argument).\n# See also module \'glob\' for expansion of *, ? and [...] in pathnames.\n# (A function should also be defined to do full *sh-style environment\n# variable expansion.)\n\ndef expanduser(path):\n    """Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing."""\n    if isinstance(path, bytes):\n        tilde = b\'~\'\n    else:\n        tilde = \'~\'\n    if not path.startswith(tilde):\n        return path\n    sep = _get_sep(path)\n    i = path.find(sep, 1)\n    if i < 0:\n        i = len(path)\n    if i == 1:\n        if \'HOME\' not in os.environ:\n            import pwd\n            userhome = pwd.getpwuid(os.getuid()).pw_dir\n        else:\n            userhome = os.environ[\'HOME\']\n    else:\n        import pwd\n        name = path[1:i]\n        if isinstance(name, bytes):\n            name = str(name, \'ASCII\')\n        try:\n            pwent = pwd.getpwnam(name)\n        except KeyError:\n            return path\n        userhome = pwent.pw_dir\n    if isinstance(path, bytes):\n        userhome = os.fsencode(userhome)\n        root = b\'/\'\n    else:\n        root = \'/\'\n    userhome = userhome.rstrip(root)\n    return (userhome + path[i:]) or root\n\n\n# Expand paths containing shell variable substitutions.\n# This expands the forms $variable and ${variable} only.\n# Non-existent variables are left unchanged.\n\n_varprog = None\n_varprogb = None\n\ndef expandvars(path):\n    """Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged."""\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b\'$\' not in path:\n            return path\n        if not _varprogb:\n            import re\n            _varprogb = re.compile(br\'\\$(\\w+|\\{[^}]*\\})\', re.ASCII)\n        search = _varprogb.search\n        start = b\'{\'\n        end = b\'}\'\n        environ = getattr(os, \'environb\', None)\n    else:\n        if \'$\' not in path:\n            return path\n        if not _varprog:\n            import re\n            _varprog = re.compile(r\'\\$(\\w+|\\{[^}]*\\})\', re.ASCII)\n        search = _varprog.search\n        start = \'{\'\n        end = \'}\'\n        environ = os.environ\n    i = 0\n    while True:\n        m = search(path, i)\n        if not m:\n            break\n        i, j = m.span(0)\n        name = m.group(1)\n        if name.startswith(start) and name.endswith(end):\n            name = name[1:-1]\n        try:\n            if environ is None:\n                value = os.fsencode(os.environ[os.fsdecode(name)])\n            else:\n                value = environ[name]\n        except KeyError:\n            i = j\n        else:\n            tail = path[j:]\n            path = path[:i] + value\n            i = len(path)\n            path += tail\n    return path\n\n\n# Normalize a path, e.g. A//B, A/./B and A/foo/../B all become A/B.\n# It should be understood that this may change the meaning of the path\n# if it contains symbolic links!\n\ndef normpath(path):\n    """Normalize path, eliminating double slashes, etc."""\n    if isinstance(path, bytes):\n        sep = b\'/\'\n        empty = b\'\'\n        dot = b\'.\'\n        dotdot = b\'..\'\n    else:\n        sep = \'/\'\n        empty = \'\'\n        dot = \'.\'\n        dotdot = \'..\'\n    if path == empty:\n        return dot\n    initial_slashes = path.startswith(sep)\n    # POSIX allows one or two initial slashes, but treats three or more\n    # as single slash.\n    if (initial_slashes and\n        path.startswith(sep*2) and not path.startswith(sep*3)):\n        initial_slashes = 2\n    comps = path.split(sep)\n    new_comps = []\n    for comp in comps:\n        if comp in (empty, dot):\n            continue\n        if (comp != dotdot or (not initial_slashes and not new_comps) or\n             (new_comps and new_comps[-1] == dotdot)):\n            new_comps.append(comp)\n        elif new_comps:\n            new_comps.pop()\n    comps = new_comps\n    path = sep.join(comps)\n    if initial_slashes:\n        path = sep*initial_slashes + path\n    return path or dot\n\n\ndef abspath(path):\n    """Return an absolute path."""\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)\n\n\n# Return a canonical path (i.e. the absolute location of a file on the\n# filesystem).\n\ndef realpath(filename):\n    """Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path."""\n    path, ok = _joinrealpath(filename[:0], filename, {})\n    return abspath(path)\n\n# Join two paths, normalizing and eliminating any symbolic links\n# encountered in the second path.\ndef _joinrealpath(path, rest, seen):\n    if isinstance(path, bytes):\n        sep = b\'/\'\n        curdir = b\'.\'\n        pardir = b\'..\'\n    else:\n        sep = \'/\'\n        curdir = \'.\'\n        pardir = \'..\'\n\n    if isabs(rest):\n        rest = rest[1:]\n        path = sep\n\n    while rest:\n        name, _, rest = rest.partition(sep)\n        if not name or name == curdir:\n            # current dir\n            continue\n        if name == pardir:\n            # parent dir\n            if path:\n                path, name = split(path)\n                if name == pardir:\n                    path = join(path, pardir, pardir)\n            else:\n                path = pardir\n            continue\n        newpath = join(path, name)\n        if not islink(newpath):\n            path = newpath\n            continue\n        # Resolve the symbolic link\n        if newpath in seen:\n            # Already seen this path\n            path = seen[newpath]\n            if path is not None:\n                # use cached value\n                continue\n            # The symlink is not resolved, so we must have a symlink loop.\n            # Return already resolved part + rest of the path unchanged.\n            return join(newpath, rest), False\n        seen[newpath] = None # not resolved symlink\n        path, ok = _joinrealpath(path, os.readlink(newpath), seen)\n        if not ok:\n            return join(path, rest), False\n        seen[newpath] = path # resolved symlink\n\n    return path, True\n\n\nsupports_unicode_filenames = (sys.platform == \'darwin\')\n\ndef relpath(path, start=None):\n    """Return a relative version of a path"""\n\n    if not path:\n        raise ValueError("no path specified")\n\n    if isinstance(path, bytes):\n        curdir = b\'.\'\n        sep = b\'/\'\n        pardir = b\'..\'\n    else:\n        curdir = \'.\'\n        sep = \'/\'\n        pardir = \'..\'\n\n    if start is None:\n        start = curdir\n\n    try:\n        start_list = [x for x in abspath(start).split(sep) if x]\n        path_list = [x for x in abspath(path).split(sep) if x]\n        # Work out how much of the filepath is shared by start and path.\n        i = len(commonprefix([start_list, path_list]))\n\n        rel_list = [pardir] * (len(start_list)-i) + path_list[i:]\n        if not rel_list:\n            return curdir\n        return join(*rel_list)\n    except (TypeError, AttributeError, BytesWarning, DeprecationWarning):\n        genericpath._check_arg_types(\'relpath\', path, start)\n        raise\n\n\n# Return the longest common sub-path of the sequence of paths given as input.\n# The paths are not normalized before comparing them (this is the\n# responsibility of the caller). Any trailing separator is stripped from the\n# returned path.\n\ndef commonpath(paths):\n    """Given a sequence of path names, returns the longest common sub-path."""\n\n    if not paths:\n        raise ValueError(\'commonpath() arg is an empty sequence\')\n\n    if isinstance(paths[0], bytes):\n        sep = b\'/\'\n        curdir = b\'.\'\n    else:\n        sep = \'/\'\n        curdir = \'.\'\n\n    try:\n        split_paths = [path.split(sep) for path in paths]\n\n        try:\n            isabs, = set(p[:1] == sep for p in paths)\n        except ValueError:\n            raise ValueError("Can\'t mix absolute and relative paths") from None\n\n        split_paths = [[c for c in s if c and c != curdir] for s in split_paths]\n        s1 = min(split_paths)\n        s2 = max(split_paths)\n        common = s1\n        for i, c in enumerate(s1):\n            if c != s2[i]:\n                common = s1[:i]\n                break\n\n        prefix = sep if isabs else sep[:0]\n        return prefix + sep.join(common)\n    except (TypeError, AttributeError):\n        genericpath._check_arg_types(\'commonpath\', *paths)\n        raise\n', resulttype=None
dump b'"""Common operations on Posix pathnames.\n\nInstead of importing this module directly, import os and refer to\nthis module as os.path.  The "os.path" name is an alias for this\nmodule on Posix systems; on other systems (e.g. Mac, Windows),\nos.path provides the same operations in a manner specific to that\nplatform, and is an alias to another module (e.g. macpath, ntpath).\n\nSome of this can actually be useful on non-Posix systems too, e.g.\nfor manipulation of the pathname component of URLs.\n"""\n\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n\n__all__ = ["normcase","isabs","join","splitdrive","split","splitext",\n           "basename","dirname","commonprefix","getsize","getmtime",\n           "getatime","getctime","islink","exists","lexists","isdir","isfile",\n           "ismount", "expanduser","expandvars","normpath","abspath",\n           "samefile","sameopenfile","samestat",\n           "curdir","pardir","sep","pathsep","defpath","altsep","extsep",\n           "devnull","realpath","supports_unicode_filenames","relpath",\n           "commonpath"]\n\n# Strings representing various path-related bits and pieces.\n# These are primarily for export; internally, they are hardcoded.\ncurdir = \'.\'\npardir = \'..\'\nextsep = \'.\'\nsep = \'/\'\npathsep = \':\'\ndefpath = \':/bin:/usr/bin\'\naltsep = None\ndevnull = \'/dev/null\'\n\ndef _get_sep(path):\n    if isinstance(path, bytes):\n        return b\'/\'\n    else:\n        return \'/\'\n\n# Normalize the case of a pathname.  Trivial in Posix, string.lower on Mac.\n# On MS-DOS this may also turn slashes into backslashes; however, other\n# normalizations (such as optimizing \'../\' away) are not allowed\n# (another function should be defined to do that).\n\ndef normcase(s):\n    """Normalize case of pathname.  Has no effect under Posix"""\n    if not isinstance(s, (bytes, str)):\n        raise TypeError("normcase() argument must be str or bytes, "\n                        "not \'{}\'".format(s.__class__.__name__))\n    return s\n\n\n# Return whether a path is absolute.\n# Trivial in Posix, harder on the Mac or MS-DOS.\n\ndef isabs(s):\n    """Test whether a path is absolute"""\n    sep = _get_sep(s)\n    return s.startswith(sep)\n\n\n# Join pathnames.\n# Ignore the previous parts if a part is absolute.\n# Insert a \'/\' unless the first part is empty or already ends in \'/\'.\n\ndef join(a, *p):\n    """Join two or more pathname components, inserting \'/\' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator."""\n    sep = _get_sep(a)\n    path = a\n    try:\n        if not p:\n            path[:0] + sep  #23780: Ensure compatible data type even if p is null.\n        for b in p:\n            if b.startswith(sep):\n                path = b\n            elif not path or path.endswith(sep):\n                path += b\n            else:\n                path += sep + b\n    except (TypeError, AttributeError, BytesWarning):\n        genericpath._check_arg_types(\'join\', a, *p)\n        raise\n    return path\n\n\n# Split a path in head (everything up to the last \'/\') and tail (the\n# rest).  If the path ends in \'/\', tail will be empty.  If there is no\n# \'/\' in the path, head  will be empty.\n# Trailing \'/\'es are stripped from head unless it is the root.\n\ndef split(p):\n    """Split a pathname.  Returns tuple "(head, tail)" where "tail" is\n    everything after the final slash.  Either part may be empty."""\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head, tail = p[:i], p[i:]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head, tail\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\ndef splitext(p):\n    if isinstance(p, bytes):\n        sep = b\'/\'\n        extsep = b\'.\'\n    else:\n        sep = \'/\'\n        extsep = \'.\'\n    return genericpath._splitext(p, sep, None, extsep)\nsplitext.__doc__ = genericpath._splitext.__doc__\n\n# Split a pathname into a drive specification and the rest of the\n# path.  Useful on DOS/Windows/NT; on Unix, the drive is always empty.\n\ndef splitdrive(p):\n    """Split a pathname into drive and path. On Posix, drive is always\n    empty."""\n    return p[:0], p\n\n\n# Return the tail (basename) part of a path, same as split(path)[1].\n\ndef basename(p):\n    """Returns the final component of a pathname"""\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    return p[i:]\n\n\n# Return the head (dirname) part of a path, same as split(path)[0].\n\ndef dirname(p):\n    """Returns the directory component of a pathname"""\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head = p[:i]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head\n\n\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn\'t exist.\n\ndef islink(path):\n    """Test whether a path is a symbolic link"""\n    try:\n        st = os.lstat(path)\n    except (OSError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n\n# Being true for dangling symbolic links is also useful.\n\ndef lexists(path):\n    """Test whether a path exists.  Returns True for broken symbolic links"""\n    try:\n        os.lstat(path)\n    except OSError:\n        return False\n    return True\n\n\n# Is a path a mount point?\n# (Does this work for all UNIXes?  Is it even guaranteed to work by Posix?)\n\ndef ismount(path):\n    """Test whether a path is a mount point"""\n    try:\n        s1 = os.lstat(path)\n    except OSError:\n        # It doesn\'t exist -- so not a mount point. :-)\n        return False\n    else:\n        # A symlink can never be a mount point\n        if stat.S_ISLNK(s1.st_mode):\n            return False\n\n    if isinstance(path, bytes):\n        parent = join(path, b\'..\')\n    else:\n        parent = join(path, \'..\')\n    parent = realpath(parent)\n    try:\n        s2 = os.lstat(parent)\n    except OSError:\n        return False\n\n    dev1 = s1.st_dev\n    dev2 = s2.st_dev\n    if dev1 != dev2:\n        return True     # path/.. on a different device as path\n    ino1 = s1.st_ino\n    ino2 = s2.st_ino\n    if ino1 == ino2:\n        return True     # path/.. is the same i-node as path\n    return False\n\n\n# Expand paths beginning with \'~\' or \'~user\'.\n# \'~\' means $HOME; \'~user\' means that user\'s home directory.\n# If the path doesn\'t begin with \'~\', or if the user or $HOME is unknown,\n# the path is returned unchanged (leaving error reporting to whatever\n# function is called with the expanded path as argument).\n# See also module \'glob\' for expansion of *, ? and [...] in pathnames.\n# (A function should also be defined to do full *sh-style environment\n# variable expansion.)\n\ndef expanduser(path):\n    """Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing."""\n    if isinstance(path, bytes):\n        tilde = b\'~\'\n    else:\n        tilde = \'~\'\n    if not path.startswith(tilde):\n        return path\n    sep = _get_sep(path)\n    i = path.find(sep, 1)\n    if i < 0:\n        i = len(path)\n    if i == 1:\n        if \'HOME\' not in os.environ:\n            import pwd\n            userhome = pwd.getpwuid(os.getuid()).pw_dir\n        else:\n            userhome = os.environ[\'HOME\']\n    else:\n        import pwd\n        name = path[1:i]\n        if isinstance(name, bytes):\n            name = str(name, \'ASCII\')\n        try:\n            pwent = pwd.getpwnam(name)\n        except KeyError:\n            return path\n        userhome = pwent.pw_dir\n    if isinstance(path, bytes):\n        userhome = os.fsencode(userhome)\n        root = b\'/\'\n    else:\n        root = \'/\'\n    userhome = userhome.rstrip(root)\n    return (userhome + path[i:]) or root\n\n\n# Expand paths containing shell variable substitutions.\n# This expands the forms $variable and ${variable} only.\n# Non-existent variables are left unchanged.\n\n_varprog = None\n_varprogb = None\n\ndef expandvars(path):\n    """Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged."""\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b\'$\' not in path:\n            return path\n        if not _varprogb:\n            import re\n            _varprogb = re.compile(br\'\\$(\\w+|\\{[^}]*\\})\', re.ASCII)\n        search = _varprogb.search\n        start = b\'{\'\n        end = b\'}\'\n        environ = getattr(os, \'environb\', None)\n    else:\n        if \'$\' not in path:\n            return path\n        if not _varprog:\n            import re\n            _varprog = re.compile(r\'\\$(\\w+|\\{[^}]*\\})\', re.ASCII)\n        search = _varprog.search\n        start = \'{\'\n        end = \'}\'\n        environ = os.environ\n    i = 0\n    while True:\n        m = search(path, i)\n        if not m:\n            break\n        i, j = m.span(0)\n        name = m.group(1)\n        if name.startswith(start) and name.endswith(end):\n            name = name[1:-1]\n        try:\n            if environ is None:\n                value = os.fsencode(os.environ[os.fsdecode(name)])\n            else:\n                value = environ[name]\n        except KeyError:\n            i = j\n        else:\n            tail = path[j:]\n            path = path[:i] + value\n            i = len(path)\n            path += tail\n    return path\n\n\n# Normalize a path, e.g. A//B, A/./B and A/foo/../B all become A/B.\n# It should be understood that this may change the meaning of the path\n# if it contains symbolic links!\n\ndef normpath(path):\n    """Normalize path, eliminating double slashes, etc."""\n    if isinstance(path, bytes):\n        sep = b\'/\'\n        empty = b\'\'\n        dot = b\'.\'\n        dotdot = b\'..\'\n    else:\n        sep = \'/\'\n        empty = \'\'\n        dot = \'.\'\n        dotdot = \'..\'\n    if path == empty:\n        return dot\n    initial_slashes = path.startswith(sep)\n    # POSIX allows one or two initial slashes, but treats three or more\n    # as single slash.\n    if (initial_slashes and\n        path.startswith(sep*2) and not path.startswith(sep*3)):\n        initial_slashes = 2\n    comps = path.split(sep)\n    new_comps = []\n    for comp in comps:\n        if comp in (empty, dot):\n            continue\n        if (comp != dotdot or (not initial_slashes and not new_comps) or\n             (new_comps and new_comps[-1] == dotdot)):\n            new_comps.append(comp)\n        elif new_comps:\n            new_comps.pop()\n    comps = new_comps\n    path = sep.join(comps)\n    if initial_slashes:\n        path = sep*initial_slashes + path\n    return path or dot\n\n\ndef abspath(path):\n    """Return an absolute path."""\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)\n\n\n# Return a canonical path (i.e. the absolute location of a file on the\n# filesystem).\n\ndef realpath(filename):\n    """Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path."""\n    path, ok = _joinrealpath(filename[:0], filename, {})\n    return abspath(path)\n\n# Join two paths, normalizing and eliminating any symbolic links\n# encountered in the second path.\ndef _joinrealpath(path, rest, seen):\n    if isinstance(path, bytes):\n        sep = b\'/\'\n        curdir = b\'.\'\n        pardir = b\'..\'\n    else:\n        sep = \'/\'\n        curdir = \'.\'\n        pardir = \'..\'\n\n    if isabs(rest):\n        rest = rest[1:]\n        path = sep\n\n    while rest:\n        name, _, rest = rest.partition(sep)\n        if not name or name == curdir:\n            # current dir\n            continue\n        if name == pardir:\n            # parent dir\n            if path:\n                path, name = split(path)\n                if name == pardir:\n                    path = join(path, pardir, pardir)\n            else:\n                path = pardir\n            continue\n        newpath = join(path, name)\n        if not islink(newpath):\n            path = newpath\n            continue\n        # Resolve the symbolic link\n        if newpath in seen:\n            # Already seen this path\n            path = seen[newpath]\n            if path is not None:\n                # use cached value\n                continue\n            # The symlink is not resolved, so we must have a symlink loop.\n            # Return already resolved part + rest of the path unchanged.\n            return join(newpath, rest), False\n        seen[newpath] = None # not resolved symlink\n        path, ok = _joinrealpath(path, os.readlink(newpath), seen)\n        if not ok:\n            return join(path, rest), False\n        seen[newpath] = path # resolved symlink\n\n    return path, True\n\n\nsupports_unicode_filenames = (sys.platform == \'darwin\')\n\ndef relpath(path, start=None):\n    """Return a relative version of a path"""\n\n    if not path:\n        raise ValueError("no path specified")\n\n    if isinstance(path, bytes):\n        curdir = b\'.\'\n        sep = b\'/\'\n        pardir = b\'..\'\n    else:\n        curdir = \'.\'\n        sep = \'/\'\n        pardir = \'..\'\n\n    if start is None:\n        start = curdir\n\n    try:\n        start_list = [x for x in abspath(start).split(sep) if x]\n        path_list = [x for x in abspath(path).split(sep) if x]\n        # Work out how much of the filepath is shared by start and path.\n        i = len(commonprefix([start_list, path_list]))\n\n        rel_list = [pardir] * (len(start_list)-i) + path_list[i:]\n        if not rel_list:\n            return curdir\n        return join(*rel_list)\n    except (TypeError, AttributeError, BytesWarning, DeprecationWarning):\n        genericpath._check_arg_types(\'relpath\', path, start)\n        raise\n\n\n# Return the longest common sub-path of the sequence of paths given as input.\n# The paths are not normalized before comparing them (this is the\n# responsibility of the caller). Any trailing separator is stripped from the\n# returned path.\n\ndef commonpath(paths):\n    """Given a sequence of path names, returns the longest common sub-path."""\n\n    if not paths:\n        raise ValueError(\'commonpath() arg is an empty sequence\')\n\n    if isinstance(paths[0], bytes):\n        sep = b\'/\'\n        curdir = b\'.\'\n    else:\n        sep = \'/\'\n        curdir = \'.\'\n\n    try:\n        split_paths = [path.split(sep) for path in paths]\n\n        try:\n            isabs, = set(p[:1] == sep for p in paths)\n        except ValueError:\n            raise ValueError("Can\'t mix absolute and relative paths") from None\n\n        split_paths = [[c for c in s if c and c != curdir] for s in split_paths]\n        s1 = min(split_paths)\n        s2 = max(split_paths)\n        common = s1\n        for i, c in enumerate(s1):\n            if c != s2[i]:\n                common = s1[:i]\n                break\n\n        prefix = sep if isabs else sep[:0]\n        return prefix + sep.join(common)\n    except (TypeError, AttributeError):\n        genericpath._check_arg_types(\'commonpath\', *paths)\n        raise\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=21, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=14911, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=21, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=14911, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 21, 1, 1, 0, 0, 14911, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 21, 1, 1, 0, 0, 14911, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 21, type <class 'int'>
Dump int (long) 21
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 14911, type <class 'int'>
Dump int (long) 14911
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 14911
Write message g=<_io.BufferedWriter name=4>, msg=14911, resulttype=None
dump 14911, type <class 'int'>
Dump int (long) 14911
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 1)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=22, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=22, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 22, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 22, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 22, type <class 'int'>
Dump int (long) 22
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/genericpath.py',))
['', 'bin', 'lib-python', '3', 'genericpath.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/genericpath.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=23, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=4364, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=23, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=4364, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 23, 1, 1, 0, 0, 4364, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 23, 1, 1, 0, 0, 4364, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 23, type <class 'int'>
Dump int (long) 23
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 4364, type <class 'int'>
Dump int (long) 4364
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/genericpath.py',))
['', 'bin', 'lib-python', '3', 'genericpath.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/genericpath.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=24, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=4364, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=24, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=4364, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 24, 1, 1, 0, 0, 4364, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 24, 1, 1, 0, 0, 4364, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 24, type <class 'int'>
Dump int (long) 24
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 4364, type <class 'int'>
Dump int (long) 4364
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/__pycache__/genericpath.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', '__pycache__', 'genericpath.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/genericpath.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'genericpath.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/genericpath.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=25, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=4364, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=25, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=4364, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 25, 1, 1, 0, 0, 4364, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 25, 1, 1, 0, 0, 4364, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 25, type <class 'int'>
Dump int (long) 25
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 4364, type <class 'int'>
Dump int (long) 4364
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=25, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=4364, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=25, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=4364, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 25, 1, 1, 0, 0, 4364, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 25, 1, 1, 0, 0, 4364, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 25, type <class 'int'>
Dump int (long) 25
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 4364, type <class 'int'>
Dump int (long) 4364
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b'"""\nPath operations common to more than one OS\nDo not use directly.  The OS specific modules import the appropriate\nfunctions from this module themselves.\n"""\nimport os\nimport stat\n\n__all__ = [\'commonprefix\', \'exists\', \'getatime\', \'getctime\', \'getmtime\',\n           \'getsize\', \'isdir\', \'isfile\', \'samefile\', \'sameopenfile\',\n           \'samestat\']\n\n\n# Does a path exist?\n# This is false for dangling symbolic links on systems that support them.\ndef exists(path):\n    """Test whether a path exists.  Returns False for broken symbolic links"""\n    try:\n        os.stat(path)\n    except OSError:\n        return False\n    return True\n\n\n# This follows symbolic links, so both islink() and isdir() can be true\n# for the same path on systems that support symlinks\ndef isfile(path):\n    """Test whether a path is a regular file"""\n    try:\n        st = os.stat(path)\n    except OSError:\n        return False\n    return stat.S_ISREG(st.st_mode)\n\n\n# Is a path a directory?\n# This follows symbolic links, so both islink() and isdir()\n# can be true for the same path on systems that support symlinks\ndef isdir(s):\n    """Return true if the pathname refers to an existing directory."""\n    try:\n        st = os.stat(s)\n    except OSError:\n        return False\n    return stat.S_ISDIR(st.st_mode)\n\n\ndef getsize(filename):\n    """Return the size of a file, reported by os.stat()."""\n    return os.stat(filename).st_size\n\n\ndef getmtime(filename):\n    """Return the last modification time of a file, reported by os.stat()."""\n    return os.stat(filename).st_mtime\n\n\ndef getatime(filename):\n    """Return the last access time of a file, reported by os.stat()."""\n    return os.stat(filename).st_atime\n\n\ndef getctime(filename):\n    """Return the metadata change time of a file, reported by os.stat()."""\n    return os.stat(filename).st_ctime\n\n\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    "Given a list of pathnames, returns the longest common leading component"\n    if not m: return \'\'\n    s1 = min(m)\n    s2 = max(m)\n    for i, c in enumerate(s1):\n        if c != s2[i]:\n            return s1[:i]\n    return s1\n\n# Are two stat buffers (obtained from stat, fstat or lstat)\n# describing the same file?\ndef samestat(s1, s2):\n    """Test whether two stat buffers reference the same file"""\n    return (s1.st_ino == s2.st_ino and\n            s1.st_dev == s2.st_dev)\n\n\n# Are two filenames really pointing to the same file?\ndef samefile(f1, f2):\n    """Test whether two pathnames reference the same actual file"""\n    s1 = os.stat(f1)\n    s2 = os.stat(f2)\n    return samestat(s1, s2)\n\n\n# Are two open files really referencing the same file?\n# (Not necessarily the same file descriptor!)\ndef sameopenfile(fp1, fp2):\n    """Test whether two open file objects reference the same file"""\n    s1 = os.fstat(fp1)\n    s2 = os.fstat(fp2)\n    return samestat(s1, s2)\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\n# Generic implementation of splitext, to be parametrized with\n# the separators\ndef _splitext(p, sep, altsep, extsep):\n    """Split the extension from a pathname.\n\n    Extension is everything from the last dot to the end, ignoring\n    leading dots.  Returns "(root, ext)"; ext may be empty."""\n    # NOTE: This code must work for text and bytes strings.\n\n    sepIndex = p.rfind(sep)\n    if altsep:\n        altsepIndex = p.rfind(altsep)\n        sepIndex = max(sepIndex, altsepIndex)\n\n    dotIndex = p.rfind(extsep)\n    if dotIndex > sepIndex:\n        # skip all leading dots\n        filenameIndex = sepIndex + 1\n        while filenameIndex < dotIndex:\n            if p[filenameIndex:filenameIndex+1] != extsep:\n                return p[:dotIndex], p[dotIndex:]\n            filenameIndex += 1\n\n    return p, p[:0]\n\ndef _check_arg_types(funcname, *args):\n    hasstr = hasbytes = False\n    for s in args:\n        if isinstance(s, str):\n            hasstr = True\n        elif isinstance(s, bytes):\n            hasbytes = True\n        else:\n            raise TypeError(\'%s() argument must be str or bytes, not %r\' %\n                            (funcname, s.__class__.__name__)) from None\n    if hasstr and hasbytes:\n        raise TypeError("Can\'t mix strings and bytes in path components") from None\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'"""\nPath operations common to more than one OS\nDo not use directly.  The OS specific modules import the appropriate\nfunctions from this module themselves.\n"""\nimport os\nimport stat\n\n__all__ = [\'commonprefix\', \'exists\', \'getatime\', \'getctime\', \'getmtime\',\n           \'getsize\', \'isdir\', \'isfile\', \'samefile\', \'sameopenfile\',\n           \'samestat\']\n\n\n# Does a path exist?\n# This is false for dangling symbolic links on systems that support them.\ndef exists(path):\n    """Test whether a path exists.  Returns False for broken symbolic links"""\n    try:\n        os.stat(path)\n    except OSError:\n        return False\n    return True\n\n\n# This follows symbolic links, so both islink() and isdir() can be true\n# for the same path on systems that support symlinks\ndef isfile(path):\n    """Test whether a path is a regular file"""\n    try:\n        st = os.stat(path)\n    except OSError:\n        return False\n    return stat.S_ISREG(st.st_mode)\n\n\n# Is a path a directory?\n# This follows symbolic links, so both islink() and isdir()\n# can be true for the same path on systems that support symlinks\ndef isdir(s):\n    """Return true if the pathname refers to an existing directory."""\n    try:\n        st = os.stat(s)\n    except OSError:\n        return False\n    return stat.S_ISDIR(st.st_mode)\n\n\ndef getsize(filename):\n    """Return the size of a file, reported by os.stat()."""\n    return os.stat(filename).st_size\n\n\ndef getmtime(filename):\n    """Return the last modification time of a file, reported by os.stat()."""\n    return os.stat(filename).st_mtime\n\n\ndef getatime(filename):\n    """Return the last access time of a file, reported by os.stat()."""\n    return os.stat(filename).st_atime\n\n\ndef getctime(filename):\n    """Return the metadata change time of a file, reported by os.stat()."""\n    return os.stat(filename).st_ctime\n\n\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    "Given a list of pathnames, returns the longest common leading component"\n    if not m: return \'\'\n    s1 = min(m)\n    s2 = max(m)\n    for i, c in enumerate(s1):\n        if c != s2[i]:\n            return s1[:i]\n    return s1\n\n# Are two stat buffers (obtained from stat, fstat or lstat)\n# describing the same file?\ndef samestat(s1, s2):\n    """Test whether two stat buffers reference the same file"""\n    return (s1.st_ino == s2.st_ino and\n            s1.st_dev == s2.st_dev)\n\n\n# Are two filenames really pointing to the same file?\ndef samefile(f1, f2):\n    """Test whether two pathnames reference the same actual file"""\n    s1 = os.stat(f1)\n    s2 = os.stat(f2)\n    return samestat(s1, s2)\n\n\n# Are two open files really referencing the same file?\n# (Not necessarily the same file descriptor!)\ndef sameopenfile(fp1, fp2):\n    """Test whether two open file objects reference the same file"""\n    s1 = os.fstat(fp1)\n    s2 = os.fstat(fp2)\n    return samestat(s1, s2)\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\n# Generic implementation of splitext, to be parametrized with\n# the separators\ndef _splitext(p, sep, altsep, extsep):\n    """Split the extension from a pathname.\n\n    Extension is everything from the last dot to the end, ignoring\n    leading dots.  Returns "(root, ext)"; ext may be empty."""\n    # NOTE: This code must work for text and bytes strings.\n\n    sepIndex = p.rfind(sep)\n    if altsep:\n        altsepIndex = p.rfind(altsep)\n        sepIndex = max(sepIndex, altsepIndex)\n\n    dotIndex = p.rfind(extsep)\n    if dotIndex > sepIndex:\n        # skip all leading dots\n        filenameIndex = sepIndex + 1\n        while filenameIndex < dotIndex:\n            if p[filenameIndex:filenameIndex+1] != extsep:\n                return p[:dotIndex], p[dotIndex:]\n            filenameIndex += 1\n\n    return p, p[:0]\n\ndef _check_arg_types(funcname, *args):\n    hasstr = hasbytes = False\n    for s in args:\n        if isinstance(s, str):\n            hasstr = True\n        elif isinstance(s, bytes):\n            hasbytes = True\n        else:\n            raise TypeError(\'%s() argument must be str or bytes, not %r\' %\n                            (funcname, s.__class__.__name__)) from None\n    if hasstr and hasbytes:\n        raise TypeError("Can\'t mix strings and bytes in path components") from None\n', resulttype=None
dump b'"""\nPath operations common to more than one OS\nDo not use directly.  The OS specific modules import the appropriate\nfunctions from this module themselves.\n"""\nimport os\nimport stat\n\n__all__ = [\'commonprefix\', \'exists\', \'getatime\', \'getctime\', \'getmtime\',\n           \'getsize\', \'isdir\', \'isfile\', \'samefile\', \'sameopenfile\',\n           \'samestat\']\n\n\n# Does a path exist?\n# This is false for dangling symbolic links on systems that support them.\ndef exists(path):\n    """Test whether a path exists.  Returns False for broken symbolic links"""\n    try:\n        os.stat(path)\n    except OSError:\n        return False\n    return True\n\n\n# This follows symbolic links, so both islink() and isdir() can be true\n# for the same path on systems that support symlinks\ndef isfile(path):\n    """Test whether a path is a regular file"""\n    try:\n        st = os.stat(path)\n    except OSError:\n        return False\n    return stat.S_ISREG(st.st_mode)\n\n\n# Is a path a directory?\n# This follows symbolic links, so both islink() and isdir()\n# can be true for the same path on systems that support symlinks\ndef isdir(s):\n    """Return true if the pathname refers to an existing directory."""\n    try:\n        st = os.stat(s)\n    except OSError:\n        return False\n    return stat.S_ISDIR(st.st_mode)\n\n\ndef getsize(filename):\n    """Return the size of a file, reported by os.stat()."""\n    return os.stat(filename).st_size\n\n\ndef getmtime(filename):\n    """Return the last modification time of a file, reported by os.stat()."""\n    return os.stat(filename).st_mtime\n\n\ndef getatime(filename):\n    """Return the last access time of a file, reported by os.stat()."""\n    return os.stat(filename).st_atime\n\n\ndef getctime(filename):\n    """Return the metadata change time of a file, reported by os.stat()."""\n    return os.stat(filename).st_ctime\n\n\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    "Given a list of pathnames, returns the longest common leading component"\n    if not m: return \'\'\n    s1 = min(m)\n    s2 = max(m)\n    for i, c in enumerate(s1):\n        if c != s2[i]:\n            return s1[:i]\n    return s1\n\n# Are two stat buffers (obtained from stat, fstat or lstat)\n# describing the same file?\ndef samestat(s1, s2):\n    """Test whether two stat buffers reference the same file"""\n    return (s1.st_ino == s2.st_ino and\n            s1.st_dev == s2.st_dev)\n\n\n# Are two filenames really pointing to the same file?\ndef samefile(f1, f2):\n    """Test whether two pathnames reference the same actual file"""\n    s1 = os.stat(f1)\n    s2 = os.stat(f2)\n    return samestat(s1, s2)\n\n\n# Are two open files really referencing the same file?\n# (Not necessarily the same file descriptor!)\ndef sameopenfile(fp1, fp2):\n    """Test whether two open file objects reference the same file"""\n    s1 = os.fstat(fp1)\n    s2 = os.fstat(fp2)\n    return samestat(s1, s2)\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\n# Generic implementation of splitext, to be parametrized with\n# the separators\ndef _splitext(p, sep, altsep, extsep):\n    """Split the extension from a pathname.\n\n    Extension is everything from the last dot to the end, ignoring\n    leading dots.  Returns "(root, ext)"; ext may be empty."""\n    # NOTE: This code must work for text and bytes strings.\n\n    sepIndex = p.rfind(sep)\n    if altsep:\n        altsepIndex = p.rfind(altsep)\n        sepIndex = max(sepIndex, altsepIndex)\n\n    dotIndex = p.rfind(extsep)\n    if dotIndex > sepIndex:\n        # skip all leading dots\n        filenameIndex = sepIndex + 1\n        while filenameIndex < dotIndex:\n            if p[filenameIndex:filenameIndex+1] != extsep:\n                return p[:dotIndex], p[dotIndex:]\n            filenameIndex += 1\n\n    return p, p[:0]\n\ndef _check_arg_types(funcname, *args):\n    hasstr = hasbytes = False\n    for s in args:\n        if isinstance(s, str):\n            hasstr = True\n        elif isinstance(s, bytes):\n            hasbytes = True\n        else:\n            raise TypeError(\'%s() argument must be str or bytes, not %r\' %\n                            (funcname, s.__class__.__name__)) from None\n    if hasstr and hasbytes:\n        raise TypeError("Can\'t mix strings and bytes in path components") from None\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=25, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=4364, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=25, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=4364, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 25, 1, 1, 0, 0, 4364, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 25, 1, 1, 0, 0, 4364, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 25, type <class 'int'>
Dump int (long) 25
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 4364, type <class 'int'>
Dump int (long) 4364
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 4364
Write message g=<_io.BufferedWriter name=4>, msg=4364, resulttype=None
dump 4364, type <class 'int'>
Dump int (long) 4364
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=26, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=26, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 26, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 26, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 26, type <class 'int'>
Dump int (long) 26
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/_collections_abc.py',))
['', 'bin', 'lib-python', '3', '_collections_abc.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/_collections_abc.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=27, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24794, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=27, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24794, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 27, 1, 1, 0, 0, 24794, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 27, 1, 1, 0, 0, 24794, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 27, type <class 'int'>
Dump int (long) 27
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 24794, type <class 'int'>
Dump int (long) 24794
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/_collections_abc.py',))
['', 'bin', 'lib-python', '3', '_collections_abc.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/_collections_abc.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=28, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24794, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=28, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24794, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 28, 1, 1, 0, 0, 24794, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 28, 1, 1, 0, 0, 24794, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 28, type <class 'int'>
Dump int (long) 28
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 24794, type <class 'int'>
Dump int (long) 24794
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/__pycache__/_collections_abc.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', '__pycache__', '_collections_abc.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/_collections_abc.py', 524288, 438))
['', 'bin', 'lib-python', '3', '_collections_abc.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/_collections_abc.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=29, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24794, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=29, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24794, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 29, 1, 1, 0, 0, 24794, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 29, 1, 1, 0, 0, 24794, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 29, type <class 'int'>
Dump int (long) 29
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 24794, type <class 'int'>
Dump int (long) 24794
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=29, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24794, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=29, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24794, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 29, 1, 1, 0, 0, 24794, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 29, 1, 1, 0, 0, 24794, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 29, type <class 'int'>
Dump int (long) 29
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 24794, type <class 'int'>
Dump int (long) 24794
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 24795))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 24795)) complete. Writing back b'# Copyright 2007 Google, Inc. All Rights Reserved.\n# Licensed to PSF under a Contributor Agreement.\n\n"""Abstract Base Classes (ABCs) for collections, according to PEP 3119.\n\nUnit tests are in test_collections.\n"""\n\nfrom abc import ABCMeta, abstractmethod\nimport sys\n\n__all__ = ["Awaitable", "Coroutine", "AsyncIterable", "AsyncIterator",\n           "Hashable", "Iterable", "Iterator", "Generator",\n           "Sized", "Container", "Callable",\n           "Set", "MutableSet",\n           "Mapping", "MutableMapping",\n           "MappingView", "KeysView", "ItemsView", "ValuesView",\n           "Sequence", "MutableSequence",\n           "ByteString",\n           ]\n\n# This module has been renamed from collections.abc to _collections_abc to\n# speed up interpreter startup. Some of the types such as MutableMapping are\n# required early but collections module imports a lot of other modules.\n# See issue #19218\n__name__ = "collections.abc"\n\n# Private list of types that we want to register with the various ABCs\n# so that they will pass tests like:\n#       it = iter(somebytearray)\n#       assert isinstance(it, Iterable)\n# Note:  in other implementations, these types might not be distinct\n# and they may have their own implementation specific types that\n# are not included on this list.\nbytes_iterator = type(iter(b\'\'))\nbytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(""))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n\n\n### ONE-TRICK PONIES ###\n\nclass Hashable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __hash__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Hashable:\n            for B in C.__mro__:\n                if "__hash__" in B.__dict__:\n                    if B.__dict__["__hash__"]:\n                        return True\n                    break\n        return NotImplemented\n\n\nclass Awaitable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __await__(self):\n        yield\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Awaitable:\n            for B in C.__mro__:\n                if "__await__" in B.__dict__:\n                    if B.__dict__["__await__"]:\n                        return True\n                    break\n        return NotImplemented\n\n\nclass Coroutine(Awaitable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def send(self, value):\n        """Send a value into the coroutine.\n        Return next yielded value or raise StopIteration.\n        """\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        """Raise an exception in the coroutine.\n        Return next yielded value or raise StopIteration.\n        """\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        """Raise GeneratorExit inside coroutine.\n        """\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError("coroutine ignored GeneratorExit")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Coroutine:\n            mro = C.__mro__\n            for method in (\'__await__\', \'send\', \'throw\', \'close\'):\n                for base in mro:\n                    if method in base.__dict__:\n                        break\n                else:\n                    return NotImplemented\n            return True\n        return NotImplemented\n\n\nCoroutine.register(coroutine)\n\n\nclass AsyncIterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __aiter__(self):\n        return AsyncIterator()\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterable:\n            if any("__aiter__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass AsyncIterator(AsyncIterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    async def __anext__(self):\n        """Return the next item or raise StopAsyncIteration when exhausted."""\n        raise StopAsyncIteration\n\n    def __aiter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterator:\n            if (any("__anext__" in B.__dict__ for B in C.__mro__) and\n                any("__aiter__" in B.__dict__ for B in C.__mro__)):\n                return True\n        return NotImplemented\n\n\nclass Iterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __iter__(self):\n        while False:\n            yield None\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterable:\n            if any("__iter__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass Iterator(Iterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __next__(self):\n        \'Return the next item from the iterator. When exhausted, raise StopIteration\'\n        raise StopIteration\n\n    def __iter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterator:\n            if (any("__next__" in B.__dict__ for B in C.__mro__) and\n                any("__iter__" in B.__dict__ for B in C.__mro__)):\n                return True\n        return NotImplemented\n\nIterator.register(bytes_iterator)\nIterator.register(bytearray_iterator)\n#Iterator.register(callable_iterator)\nIterator.register(dict_keyiterator)\nIterator.register(dict_valueiterator)\nIterator.register(dict_itemiterator)\nIterator.register(list_iterator)\nIterator.register(list_reverseiterator)\nIterator.register(range_iterator)\nIterator.register(longrange_iterator)\nIterator.register(set_iterator)\nIterator.register(str_iterator)\nIterator.register(tuple_iterator)\nIterator.register(zip_iterator)\n\n\nclass Generator(Iterator):\n\n    __slots__ = ()\n\n    def __next__(self):\n        """Return the next item from the generator.\n        When exhausted, raise StopIteration.\n        """\n        return self.send(None)\n\n    @abstractmethod\n    def send(self, value):\n        """Send a value into the generator.\n        Return next yielded value or raise StopIteration.\n        """\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        """Raise an exception in the generator.\n        Return next yielded value or raise StopIteration.\n        """\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        """Raise GeneratorExit inside generator.\n        """\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError("generator ignored GeneratorExit")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Generator:\n            mro = C.__mro__\n            for method in (\'__iter__\', \'__next__\', \'send\', \'throw\', \'close\'):\n                for base in mro:\n                    if method in base.__dict__:\n                        break\n                else:\n                    return NotImplemented\n            return True\n        return NotImplemented\n\n\nGenerator.register(generator)\n\n\nclass Sized(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __len__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Sized:\n            if any("__len__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass Container(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __contains__(self, x):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Container:\n            if any("__contains__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass Callable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __call__(self, *args, **kwds):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Callable:\n            if any("__call__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\n### SETS ###\n\n\nclass Set(Sized, Iterable, Container):\n\n    """A set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__ and __len__.\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), redefine __le__ and __ge__,\n    then the other operations will automatically follow suit.\n    """\n\n    __slots__ = ()\n\n    def __le__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) > len(other):\n            return False\n        for elem in self:\n            if elem not in other:\n                return False\n        return True\n\n    def __lt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) < len(other) and self.__le__(other)\n\n    def __gt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) > len(other) and self.__ge__(other)\n\n    def __ge__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) < len(other):\n            return False\n        for elem in other:\n            if elem not in self:\n                return False\n        return True\n\n    def __eq__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) == len(other) and self.__le__(other)\n\n    @classmethod\n    def _from_iterable(cls, it):\n        \'\'\'Construct an instance of the class from any iterable input.\n\n        Must override this method if the class constructor signature\n        does not accept an iterable for an input.\n        \'\'\'\n        return cls(it)\n\n    def __and__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        return self._from_iterable(value for value in other if value in self)\n\n    __rand__ = __and__\n\n    def isdisjoint(self, other):\n        \'Return True if two sets have a null intersection.\'\n        for value in other:\n            if value in self:\n                return False\n        return True\n\n    def __or__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        chain = (e for s in (self, other) for e in s)\n        return self._from_iterable(chain)\n\n    __ror__ = __or__\n\n    def __sub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in self\n                                   if value not in other)\n\n    def __rsub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in other\n                                   if value not in self)\n\n    def __xor__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return (self - other) | (other - self)\n\n    __rxor__ = __xor__\n\n    def _hash(self):\n        """Compute the hash value of a set.\n\n        Note that we don\'t define __hash__: not all sets are hashable.\n        But if you define a hashable set type, its __hash__ should\n        call this function.\n\n        This must be compatible __eq__.\n\n        All sets ought to compare equal if they contain the same\n        elements, regardless of how they are implemented, and\n        regardless of the order of the elements; so there\'s not much\n        freedom for __eq__ or __hash__.  We match the algorithm used\n        by the built-in frozenset type.\n        """\n        MAX = sys.maxsize\n        MASK = 2 * MAX + 1\n        n = len(self)\n        h = 1927868237 * (n + 1)\n        h &= MASK\n        for x in self:\n            hx = hash(x)\n            h ^= (hx ^ (hx << 16) ^ 89869747)  * 3644798167\n            h &= MASK\n        h = h * 69069 + 907133923\n        h &= MASK\n        if h > MAX:\n            h -= MASK + 1\n        if h == -1:\n            h = 590923713\n        return h\n\nSet.register(frozenset)\n\n\nclass MutableSet(Set):\n    """A mutable set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__, __len__,\n    add(), and discard().\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), all you have to do is redefine __le__ and\n    then the other operations will automatically follow suit.\n    """\n\n    __slots__ = ()\n\n    @abstractmethod\n    def add(self, value):\n        """Add an element."""\n        raise NotImplementedError\n\n    @abstractmethod\n    def discard(self, value):\n        """Remove an element.  Do not raise an exception if absent."""\n        raise NotImplementedError\n\n    def remove(self, value):\n        """Remove an element. If not a member, raise a KeyError."""\n        if value not in self:\n            raise KeyError(value)\n        self.discard(value)\n\n    def pop(self):\n        """Return the popped value.  Raise KeyError if empty."""\n        it = iter(self)\n        try:\n            value = next(it)\n        except StopIteration:\n            raise KeyError\n        self.discard(value)\n        return value\n\n    def clear(self):\n        """This is slow (creates N new iterators!) but effective."""\n        try:\n            while True:\n                self.pop()\n        except KeyError:\n            pass\n\n    def __ior__(self, it):\n        for value in it:\n            self.add(value)\n        return self\n\n    def __iand__(self, it):\n        for value in (self - it):\n            self.discard(value)\n        return self\n\n    def __ixor__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            if not isinstance(it, Set):\n                it = self._from_iterable(it)\n            for value in it:\n                if value in self:\n                    self.discard(value)\n                else:\n                    self.add(value)\n        return self\n\n    def __isub__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            for value in it:\n                self.discard(value)\n        return self\n\nMutableSet.register(set)\n\n\n### MAPPINGS ###\n\n\nclass Mapping(Sized, Iterable, Container):\n\n    __slots__ = ()\n\n    """A Mapping is a generic container for associating key/value\n    pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __iter__, and __len__.\n\n    """\n\n    @abstractmethod\n    def __getitem__(self, key):\n        raise KeyError\n\n    def get(self, key, default=None):\n        \'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\'\n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def __contains__(self, key):\n        try:\n            self[key]\n        except KeyError:\n            return False\n        else:\n            return True\n\n    def keys(self):\n        "D.keys() -> a set-like object providing a view on D\'s keys"\n        return KeysView(self)\n\n    def items(self):\n        "D.items() -> a set-like object providing a view on D\'s items"\n        return ItemsView(self)\n\n    def values(self):\n        "D.values() -> an object providing a view on D\'s values"\n        return ValuesView(self)\n\n    def __eq__(self, other):\n        if not isinstance(other, Mapping):\n            return NotImplemented\n        return dict(self.items()) == dict(other.items())\n\nMapping.register(mappingproxy)\n\n\nclass MappingView(Sized):\n\n    __slots__ = \'_mapping\',\n\n    def __init__(self, mapping):\n        self._mapping = mapping\n\n    def __len__(self):\n        return len(self._mapping)\n\n    def __repr__(self):\n        return \'{0.__class__.__name__}({0._mapping!r})\'.format(self)\n\n\nclass KeysView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, key):\n        return key in self._mapping\n\n    def __iter__(self):\n        yield from self._mapping\n\nKeysView.register(dict_keys)\n\n\nclass ItemsView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, item):\n        key, value = item\n        try:\n            v = self._mapping[key]\n        except KeyError:\n            return False\n        else:\n            return v == value\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield (key, self._mapping[key])\n\nItemsView.register(dict_items)\n\n\nclass ValuesView(MappingView):\n\n    __slots__ = ()\n\n    def __contains__(self, value):\n        for key in self._mapping:\n            if value == self._mapping[key]:\n                return True\n        return False\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield self._mapping[key]\n\nValuesView.register(dict_values)\n\n\nclass MutableMapping(Mapping):\n\n    __slots__ = ()\n\n    """A MutableMapping is a generic container for associating\n    key/value pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __setitem__, __delitem__,\n    __iter__, and __len__.\n\n    """\n\n    @abstractmethod\n    def __setitem__(self, key, value):\n        raise KeyError\n\n    @abstractmethod\n    def __delitem__(self, key):\n        raise KeyError\n\n    __marker = object()\n\n    def pop(self, key, default=__marker):\n        \'\'\'D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n          If key is not found, d is returned if given, otherwise KeyError is raised.\n        \'\'\'\n        try:\n            value = self[key]\n        except KeyError:\n            if default is self.__marker:\n                raise\n            return default\n        else:\n            del self[key]\n            return value\n\n    def popitem(self):\n        \'\'\'D.popitem() -> (k, v), remove and return some (key, value) pair\n           as a 2-tuple; but raise KeyError if D is empty.\n        \'\'\'\n        try:\n            key = next(iter(self))\n        except StopIteration:\n            raise KeyError\n        value = self[key]\n        del self[key]\n        return key, value\n\n    def clear(self):\n        \'D.clear() -> None.  Remove all items from D.\'\n        try:\n            while True:\n                self.popitem()\n        except KeyError:\n            pass\n\n    def update(*args, **kwds):\n        \'\'\' D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.\n            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]\n            If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\n            In either case, this is followed by: for k, v in F.items(): D[k] = v\n        \'\'\'\n        if not args:\n            raise TypeError("descriptor \'update\' of \'MutableMapping\' object "\n                            "needs an argument")\n        self, *args = args\n        if len(args) > 1:\n            raise TypeError(\'update expected at most 1 arguments, got %d\' %\n                            len(args))\n        if args:\n            other = args[0]\n            if isinstance(other, Mapping):\n                for key in other:\n                    self[key] = other[key]\n            elif hasattr(other, "keys"):\n                for key in other.keys():\n                    self[key] = other[key]\n            else:\n                for key, value in other:\n                    self[key] = value\n        for key, value in kwds.items():\n            self[key] = value\n\n    def setdefault(self, key, default=None):\n        \'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\'\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n        return default\n\nMutableMapping.register(dict)\n\n\n### SEQUENCES ###\n\n\nclass Sequence(Sized, Iterable, Container):\n\n    """All the operations on a read-only sequence.\n\n    Concrete subclasses must override __new__ or __init__,\n    __getitem__, and __len__.\n    """\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __getitem__(self, index):\n        raise IndexError\n\n    def __iter__(self):\n        i = 0\n        try:\n            while True:\n                v = self[i]\n                yield v\n                i += 1\n        except IndexError:\n            return\n\n    def __contains__(self, value):\n        for v in self:\n            if v == value:\n                return True\n        return False\n\n    def __reversed__(self):\n        for i in reversed(range(len(self))):\n            yield self[i]\n\n    def index(self, value, start=0, stop=None):\n        \'\'\'S.index(value, [start, [stop]]) -> integer -- return first index of value.\n           Raises ValueError if the value is not present.\n        \'\'\'\n        if start is not None and start < 0:\n            start = max(len(self) + start, 0)\n        if stop is not None and stop < 0:\n            stop += len(self)\n\n        i = start\n        while stop is None or i < stop:\n            try:\n                if self[i] == value:\n                    return i\n            except IndexError:\n                break\n            i += 1\n        raise ValueError\n\n    def count(self, value):\n        \'S.count(value) -> integer -- return number of occurrences of value\'\n        return sum(1 for v in self if v == value)\n\nSequence.register(tuple)\nSequence.register(str)\nSequence.register(range)\nSequence.register(memoryview)\n\n\nclass ByteString(Sequence):\n\n    """This unifies bytes and bytearray.\n\n    XXX Should add all their methods.\n    """\n\n    __slots__ = ()\n\nByteString.register(bytes)\nByteString.register(bytearray)\n\n\nclass MutableSequence(Sequence):\n\n    __slots__ = ()\n\n    """All the operations on a read-write sequence.\n\n    Concrete subclasses must provide __new__ or __init__,\n    __getitem__, __setitem__, __delitem__, __len__, and insert().\n\n    """\n\n    @abstractmethod\n    def __setitem__(self, index, value):\n        raise IndexError\n\n    @abstractmethod\n    def __delitem__(self, index):\n        raise IndexError\n\n    @abstractmethod\n    def insert(self, index, value):\n        \'S.insert(index, value) -- insert value before index\'\n        raise IndexError\n\n    def append(self, value):\n        \'S.append(value) -- append value to the end of the sequence\'\n        self.insert(len(self), value)\n\n    def clear(self):\n        \'S.clear() -> None -- remove all items from S\'\n        try:\n            while True:\n                self.pop()\n        except IndexError:\n            pass\n\n    def reverse(self):\n        \'S.reverse() -- reverse *IN PLACE*\'\n        n = len(self)\n        for i in range(n//2):\n            self[i], self[n-i-1] = self[n-i-1], self[i]\n\n    def extend(self, values):\n        \'S.extend(iterable) -- extend sequence by appending elements from the iterable\'\n        for v in values:\n            self.append(v)\n\n    def pop(self, index=-1):\n        \'\'\'S.pop([index]) -> item -- remove and return item at index (default last).\n           Raise IndexError if list is empty or index is out of range.\n        \'\'\'\n        v = self[index]\n        del self[index]\n        return v\n\n    def remove(self, value):\n        \'\'\'S.remove(value) -- remove first occurrence of value.\n           Raise ValueError if the value is not present.\n        \'\'\'\n        del self[self.index(value)]\n\n    def __iadd__(self, values):\n        self.extend(values)\n        return self\n\nMutableSequence.register(list)\nMutableSequence.register(bytearray)  # Multiply inheriting, see ByteString\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'# Copyright 2007 Google, Inc. All Rights Reserved.\n# Licensed to PSF under a Contributor Agreement.\n\n"""Abstract Base Classes (ABCs) for collections, according to PEP 3119.\n\nUnit tests are in test_collections.\n"""\n\nfrom abc import ABCMeta, abstractmethod\nimport sys\n\n__all__ = ["Awaitable", "Coroutine", "AsyncIterable", "AsyncIterator",\n           "Hashable", "Iterable", "Iterator", "Generator",\n           "Sized", "Container", "Callable",\n           "Set", "MutableSet",\n           "Mapping", "MutableMapping",\n           "MappingView", "KeysView", "ItemsView", "ValuesView",\n           "Sequence", "MutableSequence",\n           "ByteString",\n           ]\n\n# This module has been renamed from collections.abc to _collections_abc to\n# speed up interpreter startup. Some of the types such as MutableMapping are\n# required early but collections module imports a lot of other modules.\n# See issue #19218\n__name__ = "collections.abc"\n\n# Private list of types that we want to register with the various ABCs\n# so that they will pass tests like:\n#       it = iter(somebytearray)\n#       assert isinstance(it, Iterable)\n# Note:  in other implementations, these types might not be distinct\n# and they may have their own implementation specific types that\n# are not included on this list.\nbytes_iterator = type(iter(b\'\'))\nbytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(""))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n\n\n### ONE-TRICK PONIES ###\n\nclass Hashable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __hash__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Hashable:\n            for B in C.__mro__:\n                if "__hash__" in B.__dict__:\n                    if B.__dict__["__hash__"]:\n                        return True\n                    break\n        return NotImplemented\n\n\nclass Awaitable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __await__(self):\n        yield\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Awaitable:\n            for B in C.__mro__:\n                if "__await__" in B.__dict__:\n                    if B.__dict__["__await__"]:\n                        return True\n                    break\n        return NotImplemented\n\n\nclass Coroutine(Awaitable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def send(self, value):\n        """Send a value into the coroutine.\n        Return next yielded value or raise StopIteration.\n        """\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        """Raise an exception in the coroutine.\n        Return next yielded value or raise StopIteration.\n        """\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        """Raise GeneratorExit inside coroutine.\n        """\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError("coroutine ignored GeneratorExit")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Coroutine:\n            mro = C.__mro__\n            for method in (\'__await__\', \'send\', \'throw\', \'close\'):\n                for base in mro:\n                    if method in base.__dict__:\n                        break\n                else:\n                    return NotImplemented\n            return True\n        return NotImplemented\n\n\nCoroutine.register(coroutine)\n\n\nclass AsyncIterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __aiter__(self):\n        return AsyncIterator()\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterable:\n            if any("__aiter__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass AsyncIterator(AsyncIterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    async def __anext__(self):\n        """Return the next item or raise StopAsyncIteration when exhausted."""\n        raise StopAsyncIteration\n\n    def __aiter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterator:\n            if (any("__anext__" in B.__dict__ for B in C.__mro__) and\n                any("__aiter__" in B.__dict__ for B in C.__mro__)):\n                return True\n        return NotImplemented\n\n\nclass Iterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __iter__(self):\n        while False:\n            yield None\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterable:\n            if any("__iter__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass Iterator(Iterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __next__(self):\n        \'Return the next item from the iterator. When exhausted, raise StopIteration\'\n        raise StopIteration\n\n    def __iter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterator:\n            if (any("__next__" in B.__dict__ for B in C.__mro__) and\n                any("__iter__" in B.__dict__ for B in C.__mro__)):\n                return True\n        return NotImplemented\n\nIterator.register(bytes_iterator)\nIterator.register(bytearray_iterator)\n#Iterator.register(callable_iterator)\nIterator.register(dict_keyiterator)\nIterator.register(dict_valueiterator)\nIterator.register(dict_itemiterator)\nIterator.register(list_iterator)\nIterator.register(list_reverseiterator)\nIterator.register(range_iterator)\nIterator.register(longrange_iterator)\nIterator.register(set_iterator)\nIterator.register(str_iterator)\nIterator.register(tuple_iterator)\nIterator.register(zip_iterator)\n\n\nclass Generator(Iterator):\n\n    __slots__ = ()\n\n    def __next__(self):\n        """Return the next item from the generator.\n        When exhausted, raise StopIteration.\n        """\n        return self.send(None)\n\n    @abstractmethod\n    def send(self, value):\n        """Send a value into the generator.\n        Return next yielded value or raise StopIteration.\n        """\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        """Raise an exception in the generator.\n        Return next yielded value or raise StopIteration.\n        """\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        """Raise GeneratorExit inside generator.\n        """\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError("generator ignored GeneratorExit")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Generator:\n            mro = C.__mro__\n            for method in (\'__iter__\', \'__next__\', \'send\', \'throw\', \'close\'):\n                for base in mro:\n                    if method in base.__dict__:\n                        break\n                else:\n                    return NotImplemented\n            return True\n        return NotImplemented\n\n\nGenerator.register(generator)\n\n\nclass Sized(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __len__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Sized:\n            if any("__len__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass Container(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __contains__(self, x):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Container:\n            if any("__contains__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass Callable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __call__(self, *args, **kwds):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Callable:\n            if any("__call__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\n### SETS ###\n\n\nclass Set(Sized, Iterable, Container):\n\n    """A set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__ and __len__.\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), redefine __le__ and __ge__,\n    then the other operations will automatically follow suit.\n    """\n\n    __slots__ = ()\n\n    def __le__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) > len(other):\n            return False\n        for elem in self:\n            if elem not in other:\n                return False\n        return True\n\n    def __lt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) < len(other) and self.__le__(other)\n\n    def __gt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) > len(other) and self.__ge__(other)\n\n    def __ge__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) < len(other):\n            return False\n        for elem in other:\n            if elem not in self:\n                return False\n        return True\n\n    def __eq__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) == len(other) and self.__le__(other)\n\n    @classmethod\n    def _from_iterable(cls, it):\n        \'\'\'Construct an instance of the class from any iterable input.\n\n        Must override this method if the class constructor signature\n        does not accept an iterable for an input.\n        \'\'\'\n        return cls(it)\n\n    def __and__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        return self._from_iterable(value for value in other if value in self)\n\n    __rand__ = __and__\n\n    def isdisjoint(self, other):\n        \'Return True if two sets have a null intersection.\'\n        for value in other:\n            if value in self:\n                return False\n        return True\n\n    def __or__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        chain = (e for s in (self, other) for e in s)\n        return self._from_iterable(chain)\n\n    __ror__ = __or__\n\n    def __sub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in self\n                                   if value not in other)\n\n    def __rsub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in other\n                                   if value not in self)\n\n    def __xor__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return (self - other) | (other - self)\n\n    __rxor__ = __xor__\n\n    def _hash(self):\n        """Compute the hash value of a set.\n\n        Note that we don\'t define __hash__: not all sets are hashable.\n        But if you define a hashable set type, its __hash__ should\n        call this function.\n\n        This must be compatible __eq__.\n\n        All sets ought to compare equal if they contain the same\n        elements, regardless of how they are implemented, and\n        regardless of the order of the elements; so there\'s not much\n        freedom for __eq__ or __hash__.  We match the algorithm used\n        by the built-in frozenset type.\n        """\n        MAX = sys.maxsize\n        MASK = 2 * MAX + 1\n        n = len(self)\n        h = 1927868237 * (n + 1)\n        h &= MASK\n        for x in self:\n            hx = hash(x)\n            h ^= (hx ^ (hx << 16) ^ 89869747)  * 3644798167\n            h &= MASK\n        h = h * 69069 + 907133923\n        h &= MASK\n        if h > MAX:\n            h -= MASK + 1\n        if h == -1:\n            h = 590923713\n        return h\n\nSet.register(frozenset)\n\n\nclass MutableSet(Set):\n    """A mutable set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__, __len__,\n    add(), and discard().\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), all you have to do is redefine __le__ and\n    then the other operations will automatically follow suit.\n    """\n\n    __slots__ = ()\n\n    @abstractmethod\n    def add(self, value):\n        """Add an element."""\n        raise NotImplementedError\n\n    @abstractmethod\n    def discard(self, value):\n        """Remove an element.  Do not raise an exception if absent."""\n        raise NotImplementedError\n\n    def remove(self, value):\n        """Remove an element. If not a member, raise a KeyError."""\n        if value not in self:\n            raise KeyError(value)\n        self.discard(value)\n\n    def pop(self):\n        """Return the popped value.  Raise KeyError if empty."""\n        it = iter(self)\n        try:\n            value = next(it)\n        except StopIteration:\n            raise KeyError\n        self.discard(value)\n        return value\n\n    def clear(self):\n        """This is slow (creates N new iterators!) but effective."""\n        try:\n            while True:\n                self.pop()\n        except KeyError:\n            pass\n\n    def __ior__(self, it):\n        for value in it:\n            self.add(value)\n        return self\n\n    def __iand__(self, it):\n        for value in (self - it):\n            self.discard(value)\n        return self\n\n    def __ixor__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            if not isinstance(it, Set):\n                it = self._from_iterable(it)\n            for value in it:\n                if value in self:\n                    self.discard(value)\n                else:\n                    self.add(value)\n        return self\n\n    def __isub__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            for value in it:\n                self.discard(value)\n        return self\n\nMutableSet.register(set)\n\n\n### MAPPINGS ###\n\n\nclass Mapping(Sized, Iterable, Container):\n\n    __slots__ = ()\n\n    """A Mapping is a generic container for associating key/value\n    pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __iter__, and __len__.\n\n    """\n\n    @abstractmethod\n    def __getitem__(self, key):\n        raise KeyError\n\n    def get(self, key, default=None):\n        \'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\'\n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def __contains__(self, key):\n        try:\n            self[key]\n        except KeyError:\n            return False\n        else:\n            return True\n\n    def keys(self):\n        "D.keys() -> a set-like object providing a view on D\'s keys"\n        return KeysView(self)\n\n    def items(self):\n        "D.items() -> a set-like object providing a view on D\'s items"\n        return ItemsView(self)\n\n    def values(self):\n        "D.values() -> an object providing a view on D\'s values"\n        return ValuesView(self)\n\n    def __eq__(self, other):\n        if not isinstance(other, Mapping):\n            return NotImplemented\n        return dict(self.items()) == dict(other.items())\n\nMapping.register(mappingproxy)\n\n\nclass MappingView(Sized):\n\n    __slots__ = \'_mapping\',\n\n    def __init__(self, mapping):\n        self._mapping = mapping\n\n    def __len__(self):\n        return len(self._mapping)\n\n    def __repr__(self):\n        return \'{0.__class__.__name__}({0._mapping!r})\'.format(self)\n\n\nclass KeysView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, key):\n        return key in self._mapping\n\n    def __iter__(self):\n        yield from self._mapping\n\nKeysView.register(dict_keys)\n\n\nclass ItemsView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, item):\n        key, value = item\n        try:\n            v = self._mapping[key]\n        except KeyError:\n            return False\n        else:\n            return v == value\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield (key, self._mapping[key])\n\nItemsView.register(dict_items)\n\n\nclass ValuesView(MappingView):\n\n    __slots__ = ()\n\n    def __contains__(self, value):\n        for key in self._mapping:\n            if value == self._mapping[key]:\n                return True\n        return False\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield self._mapping[key]\n\nValuesView.register(dict_values)\n\n\nclass MutableMapping(Mapping):\n\n    __slots__ = ()\n\n    """A MutableMapping is a generic container for associating\n    key/value pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __setitem__, __delitem__,\n    __iter__, and __len__.\n\n    """\n\n    @abstractmethod\n    def __setitem__(self, key, value):\n        raise KeyError\n\n    @abstractmethod\n    def __delitem__(self, key):\n        raise KeyError\n\n    __marker = object()\n\n    def pop(self, key, default=__marker):\n        \'\'\'D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n          If key is not found, d is returned if given, otherwise KeyError is raised.\n        \'\'\'\n        try:\n            value = self[key]\n        except KeyError:\n            if default is self.__marker:\n                raise\n            return default\n        else:\n            del self[key]\n            return value\n\n    def popitem(self):\n        \'\'\'D.popitem() -> (k, v), remove and return some (key, value) pair\n           as a 2-tuple; but raise KeyError if D is empty.\n        \'\'\'\n        try:\n            key = next(iter(self))\n        except StopIteration:\n            raise KeyError\n        value = self[key]\n        del self[key]\n        return key, value\n\n    def clear(self):\n        \'D.clear() -> None.  Remove all items from D.\'\n        try:\n            while True:\n                self.popitem()\n        except KeyError:\n            pass\n\n    def update(*args, **kwds):\n        \'\'\' D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.\n            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]\n            If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\n            In either case, this is followed by: for k, v in F.items(): D[k] = v\n        \'\'\'\n        if not args:\n            raise TypeError("descriptor \'update\' of \'MutableMapping\' object "\n                            "needs an argument")\n        self, *args = args\n        if len(args) > 1:\n            raise TypeError(\'update expected at most 1 arguments, got %d\' %\n                            len(args))\n        if args:\n            other = args[0]\n            if isinstance(other, Mapping):\n                for key in other:\n                    self[key] = other[key]\n            elif hasattr(other, "keys"):\n                for key in other.keys():\n                    self[key] = other[key]\n            else:\n                for key, value in other:\n                    self[key] = value\n        for key, value in kwds.items():\n            self[key] = value\n\n    def setdefault(self, key, default=None):\n        \'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\'\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n        return default\n\nMutableMapping.register(dict)\n\n\n### SEQUENCES ###\n\n\nclass Sequence(Sized, Iterable, Container):\n\n    """All the operations on a read-only sequence.\n\n    Concrete subclasses must override __new__ or __init__,\n    __getitem__, and __len__.\n    """\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __getitem__(self, index):\n        raise IndexError\n\n    def __iter__(self):\n        i = 0\n        try:\n            while True:\n                v = self[i]\n                yield v\n                i += 1\n        except IndexError:\n            return\n\n    def __contains__(self, value):\n        for v in self:\n            if v == value:\n                return True\n        return False\n\n    def __reversed__(self):\n        for i in reversed(range(len(self))):\n            yield self[i]\n\n    def index(self, value, start=0, stop=None):\n        \'\'\'S.index(value, [start, [stop]]) -> integer -- return first index of value.\n           Raises ValueError if the value is not present.\n        \'\'\'\n        if start is not None and start < 0:\n            start = max(len(self) + start, 0)\n        if stop is not None and stop < 0:\n            stop += len(self)\n\n        i = start\n        while stop is None or i < stop:\n            try:\n                if self[i] == value:\n                    return i\n            except IndexError:\n                break\n            i += 1\n        raise ValueError\n\n    def count(self, value):\n        \'S.count(value) -> integer -- return number of occurrences of value\'\n        return sum(1 for v in self if v == value)\n\nSequence.register(tuple)\nSequence.register(str)\nSequence.register(range)\nSequence.register(memoryview)\n\n\nclass ByteString(Sequence):\n\n    """This unifies bytes and bytearray.\n\n    XXX Should add all their methods.\n    """\n\n    __slots__ = ()\n\nByteString.register(bytes)\nByteString.register(bytearray)\n\n\nclass MutableSequence(Sequence):\n\n    __slots__ = ()\n\n    """All the operations on a read-write sequence.\n\n    Concrete subclasses must provide __new__ or __init__,\n    __getitem__, __setitem__, __delitem__, __len__, and insert().\n\n    """\n\n    @abstractmethod\n    def __setitem__(self, index, value):\n        raise IndexError\n\n    @abstractmethod\n    def __delitem__(self, index):\n        raise IndexError\n\n    @abstractmethod\n    def insert(self, index, value):\n        \'S.insert(index, value) -- insert value before index\'\n        raise IndexError\n\n    def append(self, value):\n        \'S.append(value) -- append value to the end of the sequence\'\n        self.insert(len(self), value)\n\n    def clear(self):\n        \'S.clear() -> None -- remove all items from S\'\n        try:\n            while True:\n                self.pop()\n        except IndexError:\n            pass\n\n    def reverse(self):\n        \'S.reverse() -- reverse *IN PLACE*\'\n        n = len(self)\n        for i in range(n//2):\n            self[i], self[n-i-1] = self[n-i-1], self[i]\n\n    def extend(self, values):\n        \'S.extend(iterable) -- extend sequence by appending elements from the iterable\'\n        for v in values:\n            self.append(v)\n\n    def pop(self, index=-1):\n        \'\'\'S.pop([index]) -> item -- remove and return item at index (default last).\n           Raise IndexError if list is empty or index is out of range.\n        \'\'\'\n        v = self[index]\n        del self[index]\n        return v\n\n    def remove(self, value):\n        \'\'\'S.remove(value) -- remove first occurrence of value.\n           Raise ValueError if the value is not present.\n        \'\'\'\n        del self[self.index(value)]\n\n    def __iadd__(self, values):\n        self.extend(values)\n        return self\n\nMutableSequence.register(list)\nMutableSequence.register(bytearray)  # Multiply inheriting, see ByteString\n', resulttype=None
dump b'# Copyright 2007 Google, Inc. All Rights Reserved.\n# Licensed to PSF under a Contributor Agreement.\n\n"""Abstract Base Classes (ABCs) for collections, according to PEP 3119.\n\nUnit tests are in test_collections.\n"""\n\nfrom abc import ABCMeta, abstractmethod\nimport sys\n\n__all__ = ["Awaitable", "Coroutine", "AsyncIterable", "AsyncIterator",\n           "Hashable", "Iterable", "Iterator", "Generator",\n           "Sized", "Container", "Callable",\n           "Set", "MutableSet",\n           "Mapping", "MutableMapping",\n           "MappingView", "KeysView", "ItemsView", "ValuesView",\n           "Sequence", "MutableSequence",\n           "ByteString",\n           ]\n\n# This module has been renamed from collections.abc to _collections_abc to\n# speed up interpreter startup. Some of the types such as MutableMapping are\n# required early but collections module imports a lot of other modules.\n# See issue #19218\n__name__ = "collections.abc"\n\n# Private list of types that we want to register with the various ABCs\n# so that they will pass tests like:\n#       it = iter(somebytearray)\n#       assert isinstance(it, Iterable)\n# Note:  in other implementations, these types might not be distinct\n# and they may have their own implementation specific types that\n# are not included on this list.\nbytes_iterator = type(iter(b\'\'))\nbytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(""))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n\n\n### ONE-TRICK PONIES ###\n\nclass Hashable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __hash__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Hashable:\n            for B in C.__mro__:\n                if "__hash__" in B.__dict__:\n                    if B.__dict__["__hash__"]:\n                        return True\n                    break\n        return NotImplemented\n\n\nclass Awaitable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __await__(self):\n        yield\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Awaitable:\n            for B in C.__mro__:\n                if "__await__" in B.__dict__:\n                    if B.__dict__["__await__"]:\n                        return True\n                    break\n        return NotImplemented\n\n\nclass Coroutine(Awaitable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def send(self, value):\n        """Send a value into the coroutine.\n        Return next yielded value or raise StopIteration.\n        """\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        """Raise an exception in the coroutine.\n        Return next yielded value or raise StopIteration.\n        """\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        """Raise GeneratorExit inside coroutine.\n        """\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError("coroutine ignored GeneratorExit")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Coroutine:\n            mro = C.__mro__\n            for method in (\'__await__\', \'send\', \'throw\', \'close\'):\n                for base in mro:\n                    if method in base.__dict__:\n                        break\n                else:\n                    return NotImplemented\n            return True\n        return NotImplemented\n\n\nCoroutine.register(coroutine)\n\n\nclass AsyncIterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __aiter__(self):\n        return AsyncIterator()\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterable:\n            if any("__aiter__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass AsyncIterator(AsyncIterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    async def __anext__(self):\n        """Return the next item or raise StopAsyncIteration when exhausted."""\n        raise StopAsyncIteration\n\n    def __aiter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterator:\n            if (any("__anext__" in B.__dict__ for B in C.__mro__) and\n                any("__aiter__" in B.__dict__ for B in C.__mro__)):\n                return True\n        return NotImplemented\n\n\nclass Iterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __iter__(self):\n        while False:\n            yield None\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterable:\n            if any("__iter__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass Iterator(Iterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __next__(self):\n        \'Return the next item from the iterator. When exhausted, raise StopIteration\'\n        raise StopIteration\n\n    def __iter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterator:\n            if (any("__next__" in B.__dict__ for B in C.__mro__) and\n                any("__iter__" in B.__dict__ for B in C.__mro__)):\n                return True\n        return NotImplemented\n\nIterator.register(bytes_iterator)\nIterator.register(bytearray_iterator)\n#Iterator.register(callable_iterator)\nIterator.register(dict_keyiterator)\nIterator.register(dict_valueiterator)\nIterator.register(dict_itemiterator)\nIterator.register(list_iterator)\nIterator.register(list_reverseiterator)\nIterator.register(range_iterator)\nIterator.register(longrange_iterator)\nIterator.register(set_iterator)\nIterator.register(str_iterator)\nIterator.register(tuple_iterator)\nIterator.register(zip_iterator)\n\n\nclass Generator(Iterator):\n\n    __slots__ = ()\n\n    def __next__(self):\n        """Return the next item from the generator.\n        When exhausted, raise StopIteration.\n        """\n        return self.send(None)\n\n    @abstractmethod\n    def send(self, value):\n        """Send a value into the generator.\n        Return next yielded value or raise StopIteration.\n        """\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        """Raise an exception in the generator.\n        Return next yielded value or raise StopIteration.\n        """\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        """Raise GeneratorExit inside generator.\n        """\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError("generator ignored GeneratorExit")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Generator:\n            mro = C.__mro__\n            for method in (\'__iter__\', \'__next__\', \'send\', \'throw\', \'close\'):\n                for base in mro:\n                    if method in base.__dict__:\n                        break\n                else:\n                    return NotImplemented\n            return True\n        return NotImplemented\n\n\nGenerator.register(generator)\n\n\nclass Sized(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __len__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Sized:\n            if any("__len__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass Container(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __contains__(self, x):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Container:\n            if any("__contains__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\nclass Callable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __call__(self, *args, **kwds):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Callable:\n            if any("__call__" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\n\n### SETS ###\n\n\nclass Set(Sized, Iterable, Container):\n\n    """A set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__ and __len__.\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), redefine __le__ and __ge__,\n    then the other operations will automatically follow suit.\n    """\n\n    __slots__ = ()\n\n    def __le__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) > len(other):\n            return False\n        for elem in self:\n            if elem not in other:\n                return False\n        return True\n\n    def __lt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) < len(other) and self.__le__(other)\n\n    def __gt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) > len(other) and self.__ge__(other)\n\n    def __ge__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) < len(other):\n            return False\n        for elem in other:\n            if elem not in self:\n                return False\n        return True\n\n    def __eq__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) == len(other) and self.__le__(other)\n\n    @classmethod\n    def _from_iterable(cls, it):\n        \'\'\'Construct an instance of the class from any iterable input.\n\n        Must override this method if the class constructor signature\n        does not accept an iterable for an input.\n        \'\'\'\n        return cls(it)\n\n    def __and__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        return self._from_iterable(value for value in other if value in self)\n\n    __rand__ = __and__\n\n    def isdisjoint(self, other):\n        \'Return True if two sets have a null intersection.\'\n        for value in other:\n            if value in self:\n                return False\n        return True\n\n    def __or__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        chain = (e for s in (self, other) for e in s)\n        return self._from_iterable(chain)\n\n    __ror__ = __or__\n\n    def __sub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in self\n                                   if value not in other)\n\n    def __rsub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in other\n                                   if value not in self)\n\n    def __xor__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return (self - other) | (other - self)\n\n    __rxor__ = __xor__\n\n    def _hash(self):\n        """Compute the hash value of a set.\n\n        Note that we don\'t define __hash__: not all sets are hashable.\n        But if you define a hashable set type, its __hash__ should\n        call this function.\n\n        This must be compatible __eq__.\n\n        All sets ought to compare equal if they contain the same\n        elements, regardless of how they are implemented, and\n        regardless of the order of the elements; so there\'s not much\n        freedom for __eq__ or __hash__.  We match the algorithm used\n        by the built-in frozenset type.\n        """\n        MAX = sys.maxsize\n        MASK = 2 * MAX + 1\n        n = len(self)\n        h = 1927868237 * (n + 1)\n        h &= MASK\n        for x in self:\n            hx = hash(x)\n            h ^= (hx ^ (hx << 16) ^ 89869747)  * 3644798167\n            h &= MASK\n        h = h * 69069 + 907133923\n        h &= MASK\n        if h > MAX:\n            h -= MASK + 1\n        if h == -1:\n            h = 590923713\n        return h\n\nSet.register(frozenset)\n\n\nclass MutableSet(Set):\n    """A mutable set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__, __len__,\n    add(), and discard().\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), all you have to do is redefine __le__ and\n    then the other operations will automatically follow suit.\n    """\n\n    __slots__ = ()\n\n    @abstractmethod\n    def add(self, value):\n        """Add an element."""\n        raise NotImplementedError\n\n    @abstractmethod\n    def discard(self, value):\n        """Remove an element.  Do not raise an exception if absent."""\n        raise NotImplementedError\n\n    def remove(self, value):\n        """Remove an element. If not a member, raise a KeyError."""\n        if value not in self:\n            raise KeyError(value)\n        self.discard(value)\n\n    def pop(self):\n        """Return the popped value.  Raise KeyError if empty."""\n        it = iter(self)\n        try:\n            value = next(it)\n        except StopIteration:\n            raise KeyError\n        self.discard(value)\n        return value\n\n    def clear(self):\n        """This is slow (creates N new iterators!) but effective."""\n        try:\n            while True:\n                self.pop()\n        except KeyError:\n            pass\n\n    def __ior__(self, it):\n        for value in it:\n            self.add(value)\n        return self\n\n    def __iand__(self, it):\n        for value in (self - it):\n            self.discard(value)\n        return self\n\n    def __ixor__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            if not isinstance(it, Set):\n                it = self._from_iterable(it)\n            for value in it:\n                if value in self:\n                    self.discard(value)\n                else:\n                    self.add(value)\n        return self\n\n    def __isub__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            for value in it:\n                self.discard(value)\n        return self\n\nMutableSet.register(set)\n\n\n### MAPPINGS ###\n\n\nclass Mapping(Sized, Iterable, Container):\n\n    __slots__ = ()\n\n    """A Mapping is a generic container for associating key/value\n    pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __iter__, and __len__.\n\n    """\n\n    @abstractmethod\n    def __getitem__(self, key):\n        raise KeyError\n\n    def get(self, key, default=None):\n        \'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\'\n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def __contains__(self, key):\n        try:\n            self[key]\n        except KeyError:\n            return False\n        else:\n            return True\n\n    def keys(self):\n        "D.keys() -> a set-like object providing a view on D\'s keys"\n        return KeysView(self)\n\n    def items(self):\n        "D.items() -> a set-like object providing a view on D\'s items"\n        return ItemsView(self)\n\n    def values(self):\n        "D.values() -> an object providing a view on D\'s values"\n        return ValuesView(self)\n\n    def __eq__(self, other):\n        if not isinstance(other, Mapping):\n            return NotImplemented\n        return dict(self.items()) == dict(other.items())\n\nMapping.register(mappingproxy)\n\n\nclass MappingView(Sized):\n\n    __slots__ = \'_mapping\',\n\n    def __init__(self, mapping):\n        self._mapping = mapping\n\n    def __len__(self):\n        return len(self._mapping)\n\n    def __repr__(self):\n        return \'{0.__class__.__name__}({0._mapping!r})\'.format(self)\n\n\nclass KeysView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, key):\n        return key in self._mapping\n\n    def __iter__(self):\n        yield from self._mapping\n\nKeysView.register(dict_keys)\n\n\nclass ItemsView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, item):\n        key, value = item\n        try:\n            v = self._mapping[key]\n        except KeyError:\n            return False\n        else:\n            return v == value\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield (key, self._mapping[key])\n\nItemsView.register(dict_items)\n\n\nclass ValuesView(MappingView):\n\n    __slots__ = ()\n\n    def __contains__(self, value):\n        for key in self._mapping:\n            if value == self._mapping[key]:\n                return True\n        return False\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield self._mapping[key]\n\nValuesView.register(dict_values)\n\n\nclass MutableMapping(Mapping):\n\n    __slots__ = ()\n\n    """A MutableMapping is a generic container for associating\n    key/value pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __setitem__, __delitem__,\n    __iter__, and __len__.\n\n    """\n\n    @abstractmethod\n    def __setitem__(self, key, value):\n        raise KeyError\n\n    @abstractmethod\n    def __delitem__(self, key):\n        raise KeyError\n\n    __marker = object()\n\n    def pop(self, key, default=__marker):\n        \'\'\'D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n          If key is not found, d is returned if given, otherwise KeyError is raised.\n        \'\'\'\n        try:\n            value = self[key]\n        except KeyError:\n            if default is self.__marker:\n                raise\n            return default\n        else:\n            del self[key]\n            return value\n\n    def popitem(self):\n        \'\'\'D.popitem() -> (k, v), remove and return some (key, value) pair\n           as a 2-tuple; but raise KeyError if D is empty.\n        \'\'\'\n        try:\n            key = next(iter(self))\n        except StopIteration:\n            raise KeyError\n        value = self[key]\n        del self[key]\n        return key, value\n\n    def clear(self):\n        \'D.clear() -> None.  Remove all items from D.\'\n        try:\n            while True:\n                self.popitem()\n        except KeyError:\n            pass\n\n    def update(*args, **kwds):\n        \'\'\' D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.\n            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]\n            If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\n            In either case, this is followed by: for k, v in F.items(): D[k] = v\n        \'\'\'\n        if not args:\n            raise TypeError("descriptor \'update\' of \'MutableMapping\' object "\n                            "needs an argument")\n        self, *args = args\n        if len(args) > 1:\n            raise TypeError(\'update expected at most 1 arguments, got %d\' %\n                            len(args))\n        if args:\n            other = args[0]\n            if isinstance(other, Mapping):\n                for key in other:\n                    self[key] = other[key]\n            elif hasattr(other, "keys"):\n                for key in other.keys():\n                    self[key] = other[key]\n            else:\n                for key, value in other:\n                    self[key] = value\n        for key, value in kwds.items():\n            self[key] = value\n\n    def setdefault(self, key, default=None):\n        \'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\'\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n        return default\n\nMutableMapping.register(dict)\n\n\n### SEQUENCES ###\n\n\nclass Sequence(Sized, Iterable, Container):\n\n    """All the operations on a read-only sequence.\n\n    Concrete subclasses must override __new__ or __init__,\n    __getitem__, and __len__.\n    """\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __getitem__(self, index):\n        raise IndexError\n\n    def __iter__(self):\n        i = 0\n        try:\n            while True:\n                v = self[i]\n                yield v\n                i += 1\n        except IndexError:\n            return\n\n    def __contains__(self, value):\n        for v in self:\n            if v == value:\n                return True\n        return False\n\n    def __reversed__(self):\n        for i in reversed(range(len(self))):\n            yield self[i]\n\n    def index(self, value, start=0, stop=None):\n        \'\'\'S.index(value, [start, [stop]]) -> integer -- return first index of value.\n           Raises ValueError if the value is not present.\n        \'\'\'\n        if start is not None and start < 0:\n            start = max(len(self) + start, 0)\n        if stop is not None and stop < 0:\n            stop += len(self)\n\n        i = start\n        while stop is None or i < stop:\n            try:\n                if self[i] == value:\n                    return i\n            except IndexError:\n                break\n            i += 1\n        raise ValueError\n\n    def count(self, value):\n        \'S.count(value) -> integer -- return number of occurrences of value\'\n        return sum(1 for v in self if v == value)\n\nSequence.register(tuple)\nSequence.register(str)\nSequence.register(range)\nSequence.register(memoryview)\n\n\nclass ByteString(Sequence):\n\n    """This unifies bytes and bytearray.\n\n    XXX Should add all their methods.\n    """\n\n    __slots__ = ()\n\nByteString.register(bytes)\nByteString.register(bytearray)\n\n\nclass MutableSequence(Sequence):\n\n    __slots__ = ()\n\n    """All the operations on a read-write sequence.\n\n    Concrete subclasses must provide __new__ or __init__,\n    __getitem__, __setitem__, __delitem__, __len__, and insert().\n\n    """\n\n    @abstractmethod\n    def __setitem__(self, index, value):\n        raise IndexError\n\n    @abstractmethod\n    def __delitem__(self, index):\n        raise IndexError\n\n    @abstractmethod\n    def insert(self, index, value):\n        \'S.insert(index, value) -- insert value before index\'\n        raise IndexError\n\n    def append(self, value):\n        \'S.append(value) -- append value to the end of the sequence\'\n        self.insert(len(self), value)\n\n    def clear(self):\n        \'S.clear() -> None -- remove all items from S\'\n        try:\n            while True:\n                self.pop()\n        except IndexError:\n            pass\n\n    def reverse(self):\n        \'S.reverse() -- reverse *IN PLACE*\'\n        n = len(self)\n        for i in range(n//2):\n            self[i], self[n-i-1] = self[n-i-1], self[i]\n\n    def extend(self, values):\n        \'S.extend(iterable) -- extend sequence by appending elements from the iterable\'\n        for v in values:\n            self.append(v)\n\n    def pop(self, index=-1):\n        \'\'\'S.pop([index]) -> item -- remove and return item at index (default last).\n           Raise IndexError if list is empty or index is out of range.\n        \'\'\'\n        v = self[index]\n        del self[index]\n        return v\n\n    def remove(self, value):\n        \'\'\'S.remove(value) -- remove first occurrence of value.\n           Raise ValueError if the value is not present.\n        \'\'\'\n        del self[self.index(value)]\n\n    def __iadd__(self, values):\n        self.extend(values)\n        return self\n\nMutableSequence.register(list)\nMutableSequence.register(bytearray)  # Multiply inheriting, see ByteString\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=29, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24794, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=29, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24794, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 29, 1, 1, 0, 0, 24794, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 29, 1, 1, 0, 0, 24794, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 29, type <class 'int'>
Dump int (long) 29
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 24794, type <class 'int'>
Dump int (long) 24794
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 24794
Write message g=<_io.BufferedWriter name=4>, msg=24794, resulttype=None
dump 24794, type <class 'int'>
Dump int (long) 24794
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 1)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b"/debug/Got_path/['/bin/lib_pypy/__extensions__', '/bin/lib_pypy', '/bin/lib-python/3', '/bin/lib-python/3/lib-tk', '/bin/lib-python/3/plat-linux2']", 524288, 511))
['', 'debug', 'Got_path', "['", 'bin', 'lib_pypy', "__extensions__', '", 'bin', "lib_pypy', '", 'bin', 'lib-python', "3', '", 'bin', 'lib-python', '3', "lib-tk', '", 'bin', 'lib-python', '3', "plat-linux2']"]
checking 
checking debug
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=30, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=30, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 30, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 30, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 30, type <class 'int'>
Dump int (long) 30
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/__init__.pypy3-59-x86_64-linux-gnu.so',))
['', 'bin', 'lib-python', '3', 'encodings', '__init__.pypy3-59-x86_64-linux-gnu.so']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/__init__.py',))
['', 'bin', 'lib-python', '3', 'encodings', '__init__.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/__init__.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=31, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5067, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=31, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5067, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 31, 1, 1, 0, 0, 5067, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 31, 1, 1, 0, 0, 5067, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 31, type <class 'int'>
Dump int (long) 31
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 5067, type <class 'int'>
Dump int (long) 5067
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/__init__.py',))
['', 'bin', 'lib-python', '3', 'encodings', '__init__.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/__init__.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=32, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5067, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=32, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5067, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 32, 1, 1, 0, 0, 5067, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 32, 1, 1, 0, 0, 5067, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 32, type <class 'int'>
Dump int (long) 32
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 5067, type <class 'int'>
Dump int (long) 5067
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/__pycache__/__init__.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', 'encodings', '__pycache__', '__init__.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings> ['aliases.py', 'ascii.py', 'base64_codec.py', 'big5.py', 'big5hkscs.py', 'bz2_codec.py', 'charmap.py', 'cp037.py', 'cp1006.py', 'cp1026.py', 'cp1125.py', 'cp1140.py', 'cp1250.py', 'cp1251.py', 'cp1252.py', 'cp1253.py', 'cp1254.py', 'cp1255.py', 'cp1256.py', 'cp1257.py', 'cp1258.py', 'cp273.py', 'cp424.py', 'cp437.py', 'cp500.py', 'cp65001.py', 'cp720.py', 'cp737.py', 'cp775.py', 'cp850.py', 'cp852.py', 'cp855.py', 'cp856.py', 'cp857.py', 'cp858.py', 'cp860.py', 'cp861.py', 'cp862.py', 'cp863.py', 'cp864.py', 'cp865.py', 'cp866.py', 'cp869.py', 'cp874.py', 'cp875.py', 'cp932.py', 'cp949.py', 'cp950.py', 'euc_jisx0213.py', 'euc_jis_2004.py', 'euc_jp.py', 'euc_kr.py', 'gb18030.py', 'gb2312.py', 'gbk.py', 'hex_codec.py', 'hp_roman8.py', 'hz.py', 'idna.py', 'iso2022_jp.py', 'iso2022_jp_1.py', 'iso2022_jp_2.py', 'iso2022_jp_2004.py', 'iso2022_jp_3.py', 'iso2022_jp_ext.py', 'iso2022_kr.py', 'iso8859_1.py', 'iso8859_10.py', 'iso8859_11.py', 'iso8859_13.py', 'iso8859_14.py', 'iso8859_15.py', 'iso8859_16.py', 'iso8859_2.py', 'iso8859_3.py', 'iso8859_4.py', 'iso8859_5.py', 'iso8859_6.py', 'iso8859_7.py', 'iso8859_8.py', 'iso8859_9.py', 'johab.py', 'koi8_r.py', 'koi8_t.py', 'koi8_u.py', 'kz1048.py', 'latin_1.py', 'mac_arabic.py', 'mac_centeuro.py', 'mac_croatian.py', 'mac_cyrillic.py', 'mac_farsi.py', 'mac_greek.py', 'mac_iceland.py', 'mac_latin2.py', 'mac_roman.py', 'mac_romanian.py', 'mac_turkish.py', 'mbcs.py', 'palmos.py', 'ptcp154.py', 'punycode.py', 'quopri_codec.py', 'raw_unicode_escape.py', 'rot_13.py', 'shift_jis.py', 'shift_jisx0213.py', 'shift_jis_2004.py', 'tis_620.py', 'undefined.py', 'unicode_escape.py', 'unicode_internal.py', 'utf_16.py', 'utf_16_be.py', 'utf_16_le.py', 'utf_32.py', 'utf_32_be.py', 'utf_32_le.py', 'utf_7.py', 'utf_8.py', 'utf_8_sig.py', 'uu_codec.py', 'zlib_codec.py', '__init__.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/__init__.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'encodings', '__init__.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/__init__.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=33, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5067, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=33, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5067, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 33, 1, 1, 0, 0, 5067, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 33, 1, 1, 0, 0, 5067, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 33, type <class 'int'>
Dump int (long) 33
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 5067, type <class 'int'>
Dump int (long) 5067
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=33, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5067, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=33, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5067, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 33, 1, 1, 0, 0, 5067, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 33, 1, 1, 0, 0, 5067, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 33, type <class 'int'>
Dump int (long) 33
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 5067, type <class 'int'>
Dump int (long) 5067
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b'""" Standard "encodings" Package\n\n    Standard Python encoding modules are stored in this package\n    directory.\n\n    Codec modules must have names corresponding to normalized encoding\n    names as defined in the normalize_encoding() function below, e.g.\n    \'utf-8\' must be implemented by the module \'utf_8.py\'.\n\n    Each codec module must export the following interface:\n\n    * getregentry() -> codecs.CodecInfo object\n    The getregentry() API must return a CodecInfo object with encoder, decoder,\n    incrementalencoder, incrementaldecoder, streamwriter and streamreader\n    atttributes which adhere to the Python Codec Interface Standard.\n\n    In addition, a module may optionally also define the following\n    APIs which are then used by the package\'s codec search function:\n\n    * getaliases() -> sequence of encoding name strings to use as aliases\n\n    Alias names returned by getaliases() must be normalized encoding\n    names as defined by normalize_encoding().\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""#"\n\nimport codecs\nfrom . import aliases\n\n_cache = {}\n_unknown = \'--unknown--\'\n_import_tail = [\'*\']\n_aliases = aliases.aliases\n\nclass CodecRegistryError(LookupError, SystemError):\n    pass\n\ndef normalize_encoding(encoding):\n\n    """ Normalize an encoding name.\n\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. \'  -;#\'\n        becomes \'_\'. Leading and trailing underscores are removed.\n\n        Note that encoding names should be ASCII only; if they do use\n        non-ASCII characters, these must be Latin-1 compatible.\n\n    """\n    if isinstance(encoding, bytes):\n        encoding = str(encoding, "ascii")\n    chars = []\n    punct = False\n    for c in encoding:\n        if c.isalnum() or c == \'.\':\n            if punct and chars:\n                chars.append(\'_\')\n            chars.append(c)\n            punct = False\n        else:\n            punct = True\n    return \'\'.join(chars)\n\ndef search_function(encoding):\n\n    # Cache lookup\n    entry = _cache.get(encoding, _unknown)\n    if entry is not _unknown:\n        return entry\n\n    # Import the module:\n    #\n    # First try to find an alias for the normalized encoding\n    # name and lookup the module using the aliased name, then try to\n    # lookup the module using the standard import scheme, i.e. first\n    # try in the encodings package, then at top-level.\n    #\n    norm_encoding = normalize_encoding(encoding)\n    aliased_encoding = _aliases.get(norm_encoding) or \\\n                       _aliases.get(norm_encoding.replace(\'.\', \'_\'))\n    if aliased_encoding is not None:\n        modnames = [aliased_encoding,\n                    norm_encoding]\n    else:\n        modnames = [norm_encoding]\n    for modname in modnames:\n        if not modname or \'.\' in modname:\n            continue\n        try:\n            # Import is absolute to prevent the possibly malicious import of a\n            # module with side-effects that is not in the \'encodings\' package.\n            mod = __import__(\'encodings.\' + modname, fromlist=_import_tail,\n                             level=0)\n        except ImportError:\n            pass\n        else:\n            break\n    else:\n        mod = None\n\n    try:\n        getregentry = mod.getregentry\n    except AttributeError:\n        # Not a codec module\n        mod = None\n\n    if mod is None:\n        # Cache misses\n        _cache[encoding] = None\n        return None\n\n    # Now ask the module for the registry entry\n    entry = getregentry()\n    if not isinstance(entry, codecs.CodecInfo):\n        if not 4 <= len(entry) <= 7:\n            raise CodecRegistryError(\'module "%s" (%s) failed to register\'\n                                     % (mod.__name__, mod.__file__))\n        if not callable(entry[0]) or not callable(entry[1]) or \\\n           (entry[2] is not None and not callable(entry[2])) or \\\n           (entry[3] is not None and not callable(entry[3])) or \\\n           (len(entry) > 4 and entry[4] is not None and not callable(entry[4])) or \\\n           (len(entry) > 5 and entry[5] is not None and not callable(entry[5])):\n            raise CodecRegistryError(\'incompatible codecs in module "%s" (%s)\'\n                                     % (mod.__name__, mod.__file__))\n        if len(entry)<7 or entry[6] is None:\n            entry += (None,)*(6-len(entry)) + (mod.__name__.split(".", 1)[1],)\n        entry = codecs.CodecInfo(*entry)\n\n    # Cache the codec registry entry\n    _cache[encoding] = entry\n\n    # Register its aliases (without overwriting previously registered\n    # aliases)\n    try:\n        codecaliases = mod.getaliases()\n    except AttributeError:\n        pass\n    else:\n        for alias in codecaliases:\n            if alias not in _aliases:\n                _aliases[alias] = modname\n\n    # Return the registry entry\n    return entry\n\n# Register the search_function in the Python codec registry\ncodecs.register(search_function)\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'""" Standard "encodings" Package\n\n    Standard Python encoding modules are stored in this package\n    directory.\n\n    Codec modules must have names corresponding to normalized encoding\n    names as defined in the normalize_encoding() function below, e.g.\n    \'utf-8\' must be implemented by the module \'utf_8.py\'.\n\n    Each codec module must export the following interface:\n\n    * getregentry() -> codecs.CodecInfo object\n    The getregentry() API must return a CodecInfo object with encoder, decoder,\n    incrementalencoder, incrementaldecoder, streamwriter and streamreader\n    atttributes which adhere to the Python Codec Interface Standard.\n\n    In addition, a module may optionally also define the following\n    APIs which are then used by the package\'s codec search function:\n\n    * getaliases() -> sequence of encoding name strings to use as aliases\n\n    Alias names returned by getaliases() must be normalized encoding\n    names as defined by normalize_encoding().\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""#"\n\nimport codecs\nfrom . import aliases\n\n_cache = {}\n_unknown = \'--unknown--\'\n_import_tail = [\'*\']\n_aliases = aliases.aliases\n\nclass CodecRegistryError(LookupError, SystemError):\n    pass\n\ndef normalize_encoding(encoding):\n\n    """ Normalize an encoding name.\n\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. \'  -;#\'\n        becomes \'_\'. Leading and trailing underscores are removed.\n\n        Note that encoding names should be ASCII only; if they do use\n        non-ASCII characters, these must be Latin-1 compatible.\n\n    """\n    if isinstance(encoding, bytes):\n        encoding = str(encoding, "ascii")\n    chars = []\n    punct = False\n    for c in encoding:\n        if c.isalnum() or c == \'.\':\n            if punct and chars:\n                chars.append(\'_\')\n            chars.append(c)\n            punct = False\n        else:\n            punct = True\n    return \'\'.join(chars)\n\ndef search_function(encoding):\n\n    # Cache lookup\n    entry = _cache.get(encoding, _unknown)\n    if entry is not _unknown:\n        return entry\n\n    # Import the module:\n    #\n    # First try to find an alias for the normalized encoding\n    # name and lookup the module using the aliased name, then try to\n    # lookup the module using the standard import scheme, i.e. first\n    # try in the encodings package, then at top-level.\n    #\n    norm_encoding = normalize_encoding(encoding)\n    aliased_encoding = _aliases.get(norm_encoding) or \\\n                       _aliases.get(norm_encoding.replace(\'.\', \'_\'))\n    if aliased_encoding is not None:\n        modnames = [aliased_encoding,\n                    norm_encoding]\n    else:\n        modnames = [norm_encoding]\n    for modname in modnames:\n        if not modname or \'.\' in modname:\n            continue\n        try:\n            # Import is absolute to prevent the possibly malicious import of a\n            # module with side-effects that is not in the \'encodings\' package.\n            mod = __import__(\'encodings.\' + modname, fromlist=_import_tail,\n                             level=0)\n        except ImportError:\n            pass\n        else:\n            break\n    else:\n        mod = None\n\n    try:\n        getregentry = mod.getregentry\n    except AttributeError:\n        # Not a codec module\n        mod = None\n\n    if mod is None:\n        # Cache misses\n        _cache[encoding] = None\n        return None\n\n    # Now ask the module for the registry entry\n    entry = getregentry()\n    if not isinstance(entry, codecs.CodecInfo):\n        if not 4 <= len(entry) <= 7:\n            raise CodecRegistryError(\'module "%s" (%s) failed to register\'\n                                     % (mod.__name__, mod.__file__))\n        if not callable(entry[0]) or not callable(entry[1]) or \\\n           (entry[2] is not None and not callable(entry[2])) or \\\n           (entry[3] is not None and not callable(entry[3])) or \\\n           (len(entry) > 4 and entry[4] is not None and not callable(entry[4])) or \\\n           (len(entry) > 5 and entry[5] is not None and not callable(entry[5])):\n            raise CodecRegistryError(\'incompatible codecs in module "%s" (%s)\'\n                                     % (mod.__name__, mod.__file__))\n        if len(entry)<7 or entry[6] is None:\n            entry += (None,)*(6-len(entry)) + (mod.__name__.split(".", 1)[1],)\n        entry = codecs.CodecInfo(*entry)\n\n    # Cache the codec registry entry\n    _cache[encoding] = entry\n\n    # Register its aliases (without overwriting previously registered\n    # aliases)\n    try:\n        codecaliases = mod.getaliases()\n    except AttributeError:\n        pass\n    else:\n        for alias in codecaliases:\n            if alias not in _aliases:\n                _aliases[alias] = modname\n\n    # Return the registry entry\n    return entry\n\n# Register the search_function in the Python codec registry\ncodecs.register(search_function)\n', resulttype=None
dump b'""" Standard "encodings" Package\n\n    Standard Python encoding modules are stored in this package\n    directory.\n\n    Codec modules must have names corresponding to normalized encoding\n    names as defined in the normalize_encoding() function below, e.g.\n    \'utf-8\' must be implemented by the module \'utf_8.py\'.\n\n    Each codec module must export the following interface:\n\n    * getregentry() -> codecs.CodecInfo object\n    The getregentry() API must return a CodecInfo object with encoder, decoder,\n    incrementalencoder, incrementaldecoder, streamwriter and streamreader\n    atttributes which adhere to the Python Codec Interface Standard.\n\n    In addition, a module may optionally also define the following\n    APIs which are then used by the package\'s codec search function:\n\n    * getaliases() -> sequence of encoding name strings to use as aliases\n\n    Alias names returned by getaliases() must be normalized encoding\n    names as defined by normalize_encoding().\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""#"\n\nimport codecs\nfrom . import aliases\n\n_cache = {}\n_unknown = \'--unknown--\'\n_import_tail = [\'*\']\n_aliases = aliases.aliases\n\nclass CodecRegistryError(LookupError, SystemError):\n    pass\n\ndef normalize_encoding(encoding):\n\n    """ Normalize an encoding name.\n\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. \'  -;#\'\n        becomes \'_\'. Leading and trailing underscores are removed.\n\n        Note that encoding names should be ASCII only; if they do use\n        non-ASCII characters, these must be Latin-1 compatible.\n\n    """\n    if isinstance(encoding, bytes):\n        encoding = str(encoding, "ascii")\n    chars = []\n    punct = False\n    for c in encoding:\n        if c.isalnum() or c == \'.\':\n            if punct and chars:\n                chars.append(\'_\')\n            chars.append(c)\n            punct = False\n        else:\n            punct = True\n    return \'\'.join(chars)\n\ndef search_function(encoding):\n\n    # Cache lookup\n    entry = _cache.get(encoding, _unknown)\n    if entry is not _unknown:\n        return entry\n\n    # Import the module:\n    #\n    # First try to find an alias for the normalized encoding\n    # name and lookup the module using the aliased name, then try to\n    # lookup the module using the standard import scheme, i.e. first\n    # try in the encodings package, then at top-level.\n    #\n    norm_encoding = normalize_encoding(encoding)\n    aliased_encoding = _aliases.get(norm_encoding) or \\\n                       _aliases.get(norm_encoding.replace(\'.\', \'_\'))\n    if aliased_encoding is not None:\n        modnames = [aliased_encoding,\n                    norm_encoding]\n    else:\n        modnames = [norm_encoding]\n    for modname in modnames:\n        if not modname or \'.\' in modname:\n            continue\n        try:\n            # Import is absolute to prevent the possibly malicious import of a\n            # module with side-effects that is not in the \'encodings\' package.\n            mod = __import__(\'encodings.\' + modname, fromlist=_import_tail,\n                             level=0)\n        except ImportError:\n            pass\n        else:\n            break\n    else:\n        mod = None\n\n    try:\n        getregentry = mod.getregentry\n    except AttributeError:\n        # Not a codec module\n        mod = None\n\n    if mod is None:\n        # Cache misses\n        _cache[encoding] = None\n        return None\n\n    # Now ask the module for the registry entry\n    entry = getregentry()\n    if not isinstance(entry, codecs.CodecInfo):\n        if not 4 <= len(entry) <= 7:\n            raise CodecRegistryError(\'module "%s" (%s) failed to register\'\n                                     % (mod.__name__, mod.__file__))\n        if not callable(entry[0]) or not callable(entry[1]) or \\\n           (entry[2] is not None and not callable(entry[2])) or \\\n           (entry[3] is not None and not callable(entry[3])) or \\\n           (len(entry) > 4 and entry[4] is not None and not callable(entry[4])) or \\\n           (len(entry) > 5 and entry[5] is not None and not callable(entry[5])):\n            raise CodecRegistryError(\'incompatible codecs in module "%s" (%s)\'\n                                     % (mod.__name__, mod.__file__))\n        if len(entry)<7 or entry[6] is None:\n            entry += (None,)*(6-len(entry)) + (mod.__name__.split(".", 1)[1],)\n        entry = codecs.CodecInfo(*entry)\n\n    # Cache the codec registry entry\n    _cache[encoding] = entry\n\n    # Register its aliases (without overwriting previously registered\n    # aliases)\n    try:\n        codecaliases = mod.getaliases()\n    except AttributeError:\n        pass\n    else:\n        for alias in codecaliases:\n            if alias not in _aliases:\n                _aliases[alias] = modname\n\n    # Return the registry entry\n    return entry\n\n# Register the search_function in the Python codec registry\ncodecs.register(search_function)\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=33, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5067, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=33, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=5067, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 33, 1, 1, 0, 0, 5067, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 33, 1, 1, 0, 0, 5067, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 33, type <class 'int'>
Dump int (long) 33
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 5067, type <class 'int'>
Dump int (long) 5067
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 5067
Write message g=<_io.BufferedWriter name=4>, msg=5067, resulttype=None
dump 5067, type <class 'int'>
Dump int (long) 5067
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=34, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=34, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 34, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 34, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 34, type <class 'int'>
Dump int (long) 34
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/codecs.py',))
['', 'bin', 'lib-python', '3', 'codecs.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/codecs.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=35, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36231, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=35, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36231, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 35, 1, 1, 0, 0, 36231, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 35, 1, 1, 0, 0, 36231, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 35, type <class 'int'>
Dump int (long) 35
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 36231, type <class 'int'>
Dump int (long) 36231
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/codecs.py',))
['', 'bin', 'lib-python', '3', 'codecs.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/codecs.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=36, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36231, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=36, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36231, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 36, 1, 1, 0, 0, 36231, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 36, 1, 1, 0, 0, 36231, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 36, type <class 'int'>
Dump int (long) 36
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 36231, type <class 'int'>
Dump int (long) 36231
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/__pycache__/codecs.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', '__pycache__', 'codecs.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/codecs.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'codecs.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/codecs.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=37, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36231, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=37, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36231, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 37, 1, 1, 0, 0, 36231, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 37, 1, 1, 0, 0, 36231, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 37, type <class 'int'>
Dump int (long) 37
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 36231, type <class 'int'>
Dump int (long) 36231
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=37, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36231, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=37, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36231, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 37, 1, 1, 0, 0, 36231, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 37, 1, 1, 0, 0, 36231, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 37, type <class 'int'>
Dump int (long) 37
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 36231, type <class 'int'>
Dump int (long) 36231
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 36232))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 36232)) complete. Writing back b'""" codecs -- Python Codec Registry, API and helpers.\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""#"\n\nimport builtins, sys\n\n### Registry and builtin stateless codec functions\n\ntry:\n    from _codecs import *\nexcept ImportError as why:\n    raise SystemError(\'Failed to load the builtin codecs: %s\' % why)\n\n__all__ = ["register", "lookup", "open", "EncodedFile", "BOM", "BOM_BE",\n           "BOM_LE", "BOM32_BE", "BOM32_LE", "BOM64_BE", "BOM64_LE",\n           "BOM_UTF8", "BOM_UTF16", "BOM_UTF16_LE", "BOM_UTF16_BE",\n           "BOM_UTF32", "BOM_UTF32_LE", "BOM_UTF32_BE",\n           "CodecInfo", "Codec", "IncrementalEncoder", "IncrementalDecoder",\n           "StreamReader", "StreamWriter",\n           "StreamReaderWriter", "StreamRecoder",\n           "getencoder", "getdecoder", "getincrementalencoder",\n           "getincrementaldecoder", "getreader", "getwriter",\n           "encode", "decode", "iterencode", "iterdecode",\n           "strict_errors", "ignore_errors", "replace_errors",\n           "xmlcharrefreplace_errors",\n           "backslashreplace_errors", "namereplace_errors",\n           "register_error", "lookup_error"]\n\n### Constants\n\n#\n# Byte Order Mark (BOM = ZERO WIDTH NO-BREAK SPACE = U+FEFF)\n# and its possible byte string values\n# for UTF8/UTF16/UTF32 output and little/big endian machines\n#\n\n# UTF-8\nBOM_UTF8 = b\'\\xef\\xbb\\xbf\'\n\n# UTF-16, little endian\nBOM_LE = BOM_UTF16_LE = b\'\\xff\\xfe\'\n\n# UTF-16, big endian\nBOM_BE = BOM_UTF16_BE = b\'\\xfe\\xff\'\n\n# UTF-32, little endian\nBOM_UTF32_LE = b\'\\xff\\xfe\\x00\\x00\'\n\n# UTF-32, big endian\nBOM_UTF32_BE = b\'\\x00\\x00\\xfe\\xff\'\n\nif sys.byteorder == \'little\':\n\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\n\nelse:\n\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_BE\n\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_BE\n\n# Old broken names (don\'t use in new code)\nBOM32_LE = BOM_UTF16_LE\nBOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n\n\n### Codec base classes (defining the API)\n\nclass CodecInfo(tuple):\n    """Codec details when looking up the codec registry"""\n\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n    # See http://bugs.python.org/issue19619\n    _is_text_encoding = True # Assume codecs are text encodings by default\n\n    def __new__(cls, encode, decode, streamreader=None, streamwriter=None,\n        incrementalencoder=None, incrementaldecoder=None, name=None,\n        *, _is_text_encoding=None):\n        self = tuple.__new__(cls, (encode, decode, streamreader, streamwriter))\n        self.name = name\n        self.encode = encode\n        self.decode = decode\n        self.incrementalencoder = incrementalencoder\n        self.incrementaldecoder = incrementaldecoder\n        self.streamwriter = streamwriter\n        self.streamreader = streamreader\n        if _is_text_encoding is not None:\n            self._is_text_encoding = _is_text_encoding\n        return self\n\n    def __repr__(self):\n        return "<%s.%s object for encoding %s at %#x>" % \\\n                (self.__class__.__module__, self.__class__.__qualname__,\n                 self.name, id(self))\n\nclass Codec:\n\n    """ Defines the interface for stateless encoders/decoders.\n\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n\n         \'strict\' - raise a ValueError error (or a subclass)\n         \'ignore\' - ignore the character and continue with the next\n         \'replace\' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on\n                    decoding and \'?\' on encoding.\n         \'surrogateescape\' - replace with private code points U+DCnn.\n         \'xmlcharrefreplace\' - Replace with the appropriate XML\n                               character reference (only for encoding).\n         \'backslashreplace\'  - Replace with backslashed escape sequences.\n         \'namereplace\'       - Replace with \\\\N{...} escape sequences\n                               (only for encoding).\n\n        The set of allowed values can be extended via register_error.\n\n    """\n    def encode(self, input, errors=\'strict\'):\n\n        """ Encodes the object input and returns a tuple (output\n            object, length consumed).\n\n            errors defines the error handling to apply. It defaults to\n            \'strict\' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamWriter for codecs which have to keep state in order to\n            make encoding efficient.\n\n            The encoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        """\n        raise NotImplementedError\n\n    def decode(self, input, errors=\'strict\'):\n\n        """ Decodes the object input and returns a tuple (output\n            object, length consumed).\n\n            input must be an object which provides the bf_getreadbuf\n            buffer slot. Python strings, buffer objects and memory\n            mapped files are examples of objects providing this slot.\n\n            errors defines the error handling to apply. It defaults to\n            \'strict\' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamReader for codecs which have to keep state in order to\n            make decoding efficient.\n\n            The decoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        """\n        raise NotImplementedError\n\nclass IncrementalEncoder(object):\n    """\n    An IncrementalEncoder encodes an input in multiple steps. The input can\n    be passed piece by piece to the encode() method. The IncrementalEncoder\n    remembers the state of the encoding process between calls to encode().\n    """\n    def __init__(self, errors=\'strict\'):\n        """\n        Creates an IncrementalEncoder instance.\n\n        The IncrementalEncoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        """\n        self.errors = errors\n        self.buffer = ""\n\n    def encode(self, input, final=False):\n        """\n        Encodes input and returns the resulting object.\n        """\n        raise NotImplementedError\n\n    def reset(self):\n        """\n        Resets the encoder to the initial state.\n        """\n\n    def getstate(self):\n        """\n        Return the current state of the encoder.\n        """\n        return 0\n\n    def setstate(self, state):\n        """\n        Set the current state of the encoder. state must have been\n        returned by getstate().\n        """\n\nclass BufferedIncrementalEncoder(IncrementalEncoder):\n    """\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    """\n    def __init__(self, errors=\'strict\'):\n        IncrementalEncoder.__init__(self, errors)\n        # unencoded input that is kept between calls to encode()\n        self.buffer = ""\n\n    def _buffer_encode(self, input, errors, final):\n        # Overwrite this method in subclasses: It must encode input\n        # and return an (output, length consumed) tuple\n        raise NotImplementedError\n\n    def encode(self, input, final=False):\n        # encode input (taking the buffer into account)\n        data = self.buffer + input\n        (result, consumed) = self._buffer_encode(data, self.errors, final)\n        # keep unencoded input until the next call\n        self.buffer = data[consumed:]\n        return result\n\n    def reset(self):\n        IncrementalEncoder.reset(self)\n        self.buffer = ""\n\n    def getstate(self):\n        return self.buffer or 0\n\n    def setstate(self, state):\n        self.buffer = state or ""\n\nclass IncrementalDecoder(object):\n    """\n    An IncrementalDecoder decodes an input in multiple steps. The input can\n    be passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    """\n    def __init__(self, errors=\'strict\'):\n        """\n        Create an IncrementalDecoder instance.\n\n        The IncrementalDecoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        """\n        self.errors = errors\n\n    def decode(self, input, final=False):\n        """\n        Decode input and returns the resulting object.\n        """\n        raise NotImplementedError\n\n    def reset(self):\n        """\n        Reset the decoder to the initial state.\n        """\n\n    def getstate(self):\n        """\n        Return the current state of the decoder.\n\n        This must be a (buffered_input, additional_state_info) tuple.\n        buffered_input must be a bytes object containing bytes that\n        were passed to decode() that have not yet been converted.\n        additional_state_info must be a non-negative integer\n        representing the state of the decoder WITHOUT yet having\n        processed the contents of buffered_input.  In the initial state\n        and after reset(), getstate() must return (b"", 0).\n        """\n        return (b"", 0)\n\n    def setstate(self, state):\n        """\n        Set the current state of the decoder.\n\n        state must have been returned by getstate().  The effect of\n        setstate((b"", 0)) must be equivalent to reset().\n        """\n\nclass BufferedIncrementalDecoder(IncrementalDecoder):\n    """\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete\n    byte sequences.\n    """\n    def __init__(self, errors=\'strict\'):\n        IncrementalDecoder.__init__(self, errors)\n        # undecoded input that is kept between calls to decode()\n        self.buffer = b""\n\n    def _buffer_decode(self, input, errors, final):\n        # Overwrite this method in subclasses: It must decode input\n        # and return an (output, length consumed) tuple\n        raise NotImplementedError\n\n    def decode(self, input, final=False):\n        # decode input (taking the buffer into account)\n        data = self.buffer + input\n        (result, consumed) = self._buffer_decode(data, self.errors, final)\n        # keep undecoded input until the next call\n        self.buffer = data[consumed:]\n        return result\n\n    def reset(self):\n        IncrementalDecoder.reset(self)\n        self.buffer = b""\n\n    def getstate(self):\n        # additional state info is always 0\n        return (self.buffer, 0)\n\n    def setstate(self, state):\n        # ignore additional state info\n        self.buffer = state[0]\n\n#\n# The StreamWriter and StreamReader class provide generic working\n# interfaces which can be used to implement new encoding submodules\n# very easily. See encodings/utf_8.py for an example on how this is\n# done.\n#\n\nclass StreamWriter(Codec):\n\n    def __init__(self, stream, errors=\'strict\'):\n\n        """ Creates a StreamWriter instance.\n\n            stream must be a file-like object open for writing.\n\n            The StreamWriter may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             \'strict\' - raise a ValueError (or a subclass)\n             \'ignore\' - ignore the character and continue with the next\n             \'replace\'- replace with a suitable replacement character\n             \'xmlcharrefreplace\' - Replace with the appropriate XML\n                                   character reference.\n             \'backslashreplace\'  - Replace with backslashed escape\n                                   sequences.\n             \'namereplace\'       - Replace with \\\\N{...} escape sequences.\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        """\n        self.stream = stream\n        self.errors = errors\n\n    def write(self, object):\n\n        """ Writes the object\'s contents encoded to self.stream.\n        """\n        data, consumed = self.encode(object, self.errors)\n        self.stream.write(data)\n\n    def writelines(self, list):\n\n        """ Writes the concatenated list of strings to the stream\n            using .write().\n        """\n        self.write(\'\'.join(list))\n\n    def reset(self):\n\n        """ Flushes and resets the codec buffers used for keeping state.\n\n            Calling this method should ensure that the data on the\n            output is put into a clean state, that allows appending\n            of new fresh data without having to rescan the whole\n            stream to recover state.\n\n        """\n        pass\n\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        if whence == 0 and offset == 0:\n            self.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamReader(Codec):\n\n    charbuffertype = str\n\n    def __init__(self, stream, errors=\'strict\'):\n\n        """ Creates a StreamReader instance.\n\n            stream must be a file-like object open for reading.\n\n            The StreamReader may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             \'strict\' - raise a ValueError (or a subclass)\n             \'ignore\' - ignore the character and continue with the next\n             \'replace\'- replace with a suitable replacement character\n             \'backslashreplace\' - Replace with backslashed escape sequences;\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        """\n        self.stream = stream\n        self.errors = errors\n        self.bytebuffer = b""\n        self._empty_charbuffer = self.charbuffertype()\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n\n    def decode(self, input, errors=\'strict\'):\n        raise NotImplementedError\n\n    def read(self, size=-1, chars=-1, firstline=False):\n\n        """ Decodes data from the stream self.stream and returns the\n            resulting object.\n\n            chars indicates the number of decoded code points or bytes to\n            return. read() will never return more data than requested,\n            but it might return less, if there is not enough available.\n\n            size indicates the approximate maximum number of decoded\n            bytes or code points to read for decoding. The decoder\n            can modify this setting as appropriate. The default value\n            -1 indicates to read and decode as much as possible.  size\n            is intended to prevent having to decode huge files in one\n            step.\n\n            If firstline is true, and a UnicodeDecodeError happens\n            after the first line terminator in the input only the first line\n            will be returned, the rest of the input will be kept until the\n            next call to read().\n\n            The method should use a greedy read strategy, meaning that\n            it should read as much data as is allowed within the\n            definition of the encoding and the given size, e.g.  if\n            optional encoding endings or state markers are available\n            on the stream, these should be read too.\n        """\n        # If we have lines cached, first merge them back into characters\n        if self.linebuffer:\n            self.charbuffer = self._empty_charbuffer.join(self.linebuffer)\n            self.linebuffer = None\n\n        # read until we get the required number of characters (if available)\n        while True:\n            # can the request be satisfied from the character buffer?\n            if chars >= 0:\n                if len(self.charbuffer) >= chars:\n                    break\n            elif size >= 0:\n                if len(self.charbuffer) >= size:\n                    break\n            # we need more data\n            if size < 0:\n                newdata = self.stream.read()\n            else:\n                newdata = self.stream.read(size)\n            # decode bytes (those remaining from the last call included)\n            data = self.bytebuffer + newdata\n            if not data:\n                break\n            try:\n                newchars, decodedbytes = self.decode(data, self.errors)\n            except UnicodeDecodeError as exc:\n                if firstline:\n                    newchars, decodedbytes = \\\n                        self.decode(data[:exc.start], self.errors)\n                    lines = newchars.splitlines(keepends=True)\n                    if len(lines)<=1:\n                        raise\n                else:\n                    raise\n            # keep undecoded bytes until the next call\n            self.bytebuffer = data[decodedbytes:]\n            # put new characters in the character buffer\n            self.charbuffer += newchars\n            # there was no data available\n            if not newdata:\n                break\n        if chars < 0:\n            # Return everything we\'ve got\n            result = self.charbuffer\n            self.charbuffer = self._empty_charbuffer\n        else:\n            # Return the first chars characters\n            result = self.charbuffer[:chars]\n            self.charbuffer = self.charbuffer[chars:]\n        return result\n\n    def readline(self, size=None, keepends=True):\n\n        """ Read one line from the input stream and return the\n            decoded data.\n\n            size, if given, is passed as size argument to the\n            read() method.\n\n        """\n        # If we have lines cached from an earlier read, return\n        # them unconditionally\n        if self.linebuffer:\n            line = self.linebuffer[0]\n            del self.linebuffer[0]\n            if len(self.linebuffer) == 1:\n                # revert to charbuffer mode; we might need more data\n                # next time\n                self.charbuffer = self.linebuffer[0]\n                self.linebuffer = None\n            if not keepends:\n                line = line.splitlines(keepends=False)[0]\n            return line\n\n        readsize = size or 72\n        line = self._empty_charbuffer\n        # If size is given, we call read() only once\n        while True:\n            data = self.read(readsize, firstline=True)\n            if data:\n                # If we\'re at a "\\r" read one extra character (which might\n                # be a "\\n") to get a proper line ending. If the stream is\n                # temporarily exhausted we return the wrong line ending.\n                if (isinstance(data, str) and data.endswith("\\r")) or \\\n                   (isinstance(data, bytes) and data.endswith(b"\\r")):\n                    data += self.read(size=1, chars=1)\n\n            line += data\n            lines = line.splitlines(keepends=True)\n            if lines:\n                if len(lines) > 1:\n                    # More than one line result; the first line is a full line\n                    # to return\n                    line = lines[0]\n                    del lines[0]\n                    if len(lines) > 1:\n                        # cache the remaining lines\n                        lines[-1] += self.charbuffer\n                        self.linebuffer = lines\n                        self.charbuffer = None\n                    else:\n                        # only one remaining line, put it back into charbuffer\n                        self.charbuffer = lines[0] + self.charbuffer\n                    if not keepends:\n                        line = line.splitlines(keepends=False)[0]\n                    break\n                line0withend = lines[0]\n                line0withoutend = lines[0].splitlines(keepends=False)[0]\n                if line0withend != line0withoutend: # We really have a line end\n                    # Put the rest back together and keep it until the next call\n                    self.charbuffer = self._empty_charbuffer.join(lines[1:]) + \\\n                                      self.charbuffer\n                    if keepends:\n                        line = line0withend\n                    else:\n                        line = line0withoutend\n                    break\n            # we didn\'t get anything or this was our only try\n            if not data or size is not None:\n                if line and not keepends:\n                    line = line.splitlines(keepends=False)[0]\n                break\n            if readsize < 8000:\n                readsize *= 2\n        return line\n\n    def readlines(self, sizehint=None, keepends=True):\n\n        """ Read all lines available on the input stream\n            and return them as a list.\n\n            Line breaks are implemented using the codec\'s decoder\n            method and are included in the list entries.\n\n            sizehint, if given, is ignored since there is no efficient\n            way to finding the true end-of-line.\n\n        """\n        data = self.read()\n        return data.splitlines(keepends)\n\n    def reset(self):\n\n        """ Resets the codec buffers used for keeping state.\n\n            Note that no stream repositioning should take place.\n            This method is primarily intended to be able to recover\n            from decoding errors.\n\n        """\n        self.bytebuffer = b""\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n\n    def seek(self, offset, whence=0):\n        """ Set the input stream\'s current position.\n\n            Resets the codec buffers used for keeping state.\n        """\n        self.stream.seek(offset, whence)\n        self.reset()\n\n    def __next__(self):\n\n        """ Return the next decoded line from the input stream."""\n        line = self.readline()\n        if line:\n            return line\n        raise StopIteration\n\n    def __iter__(self):\n        return self\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamReaderWriter:\n\n    """ StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n\n    """\n    # Optional attributes set by the file wrappers below\n    encoding = \'unknown\'\n\n    def __init__(self, stream, Reader, Writer, errors=\'strict\'):\n\n        """ Creates a StreamReaderWriter instance.\n\n            stream must be a Stream-like object.\n\n            Reader, Writer must be factory functions or classes\n            providing the StreamReader, StreamWriter interface resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        """\n        self.stream = stream\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n\n    def read(self, size=-1):\n\n        return self.reader.read(size)\n\n    def readline(self, size=None):\n\n        return self.reader.readline(size)\n\n    def readlines(self, sizehint=None):\n\n        return self.reader.readlines(sizehint)\n\n    def __next__(self):\n\n        """ Return the next decoded line from the input stream."""\n        return next(self.reader)\n\n    def __iter__(self):\n        return self\n\n    def write(self, data):\n\n        return self.writer.write(data)\n\n    def writelines(self, list):\n\n        return self.writer.writelines(list)\n\n    def reset(self):\n\n        self.reader.reset()\n        self.writer.reset()\n\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        self.reader.reset()\n        if whence == 0 and offset == 0:\n            self.writer.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    # these are needed to make "with codecs.open(...)" work properly\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamRecoder:\n\n    """ StreamRecoder instances translate data from one encoding to another.\n\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n\n        Data written to the StreamRecoder is first decoded into an\n        intermediate format (depending on the "decode" codec) and then\n        written to the underlying stream using an instance of the provided\n        Writer class.\n\n        In the other direction, data is read from the underlying stream using\n        a Reader instance and then encoded and returned to the caller.\n\n    """\n    # Optional attributes set by the file wrappers below\n    data_encoding = \'unknown\'\n    file_encoding = \'unknown\'\n\n    def __init__(self, stream, encode, decode, Reader, Writer,\n                 errors=\'strict\'):\n\n        """ Creates a StreamRecoder instance which implements a two-way\n            conversion: encode and decode work on the frontend (the\n            data visible to .read() and .write()) while Reader and Writer\n            work on the backend (the data in stream).\n\n            You can use these objects to do transparent\n            transcodings from e.g. latin-1 to utf-8 and back.\n\n            stream must be a file-like object.\n\n            encode and decode must adhere to the Codec interface; Reader and\n            Writer must be factory functions or classes providing the\n            StreamReader and StreamWriter interfaces resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        """\n        self.stream = stream\n        self.encode = encode\n        self.decode = decode\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n\n    def read(self, size=-1):\n\n        data = self.reader.read(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def readline(self, size=None):\n\n        if size is None:\n            data = self.reader.readline()\n        else:\n            data = self.reader.readline(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def readlines(self, sizehint=None):\n\n        data = self.reader.read()\n        data, bytesencoded = self.encode(data, self.errors)\n        return data.splitlines(keepends=True)\n\n    def __next__(self):\n\n        """ Return the next decoded line from the input stream."""\n        data = next(self.reader)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def __iter__(self):\n        return self\n\n    def write(self, data):\n\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n\n    def writelines(self, list):\n\n        data = \'\'.join(list)\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n\n    def reset(self):\n\n        self.reader.reset()\n        self.writer.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n### Shortcuts\n\ndef open(filename, mode=\'r\', encoding=None, errors=\'strict\', buffering=1):\n\n    """ Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n\n        Underlying encoded files are always opened in binary mode.\n        The default file mode is \'r\', meaning to open the file in read mode.\n\n        encoding specifies the encoding which is to be used for the\n        file.\n\n        errors may be given to define the error handling. It defaults\n        to \'strict\' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        buffering has the same meaning as for the builtin open() API.\n        It defaults to line buffered.\n\n        The returned wrapped file object provides an extra attribute\n        .encoding which allows querying the used encoding. This\n        attribute is only available if an encoding was specified as\n        parameter.\n\n    """\n    if encoding is not None and \\\n       \'b\' not in mode:\n        # Force opening of the file in binary mode\n        mode = mode + \'b\'\n    file = builtins.open(filename, mode, buffering)\n    if encoding is None:\n        return file\n    info = lookup(encoding)\n    srw = StreamReaderWriter(file, info.streamreader, info.streamwriter, errors)\n    # Add attributes to simplify introspection\n    srw.encoding = encoding\n    return srw\n\ndef EncodedFile(file, data_encoding, file_encoding=None, errors=\'strict\'):\n\n    """ Return a wrapped version of file which provides transparent\n        encoding translation.\n\n        Data written to the wrapped file is decoded according\n        to the given data_encoding and then encoded to the underlying\n        file using file_encoding. The intermediate data type\n        will usually be Unicode but depends on the specified codecs.\n\n        Bytes read from the file are decoded using file_encoding and then\n        passed back to the caller encoded using data_encoding.\n\n        If file_encoding is not given, it defaults to data_encoding.\n\n        errors may be given to define the error handling. It defaults\n        to \'strict\' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        The returned wrapped file object provides two extra attributes\n        .data_encoding and .file_encoding which reflect the given\n        parameters of the same name. The attributes can be used for\n        introspection by Python programs.\n\n    """\n    if file_encoding is None:\n        file_encoding = data_encoding\n    data_info = lookup(data_encoding)\n    file_info = lookup(file_encoding)\n    sr = StreamRecoder(file, data_info.encode, data_info.decode,\n                       file_info.streamreader, file_info.streamwriter, errors)\n    # Add attributes to simplify introspection\n    sr.data_encoding = data_encoding\n    sr.file_encoding = file_encoding\n    return sr\n\n### Helpers for codec lookup\n\ndef getencoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its encoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).encode\n\ndef getdecoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its decoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).decode\n\ndef getincrementalencoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn\'t provide an incremental encoder.\n\n    """\n    encoder = lookup(encoding).incrementalencoder\n    if encoder is None:\n        raise LookupError(encoding)\n    return encoder\n\ndef getincrementaldecoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn\'t provide an incremental decoder.\n\n    """\n    decoder = lookup(encoding).incrementaldecoder\n    if decoder is None:\n        raise LookupError(encoding)\n    return decoder\n\ndef getreader(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).streamreader\n\ndef getwriter(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).streamwriter\n\ndef iterencode(iterator, encoding, errors=\'strict\', **kwargs):\n    """\n    Encoding iterator.\n\n    Encodes the input strings from the iterator using an IncrementalEncoder.\n\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    """\n    encoder = getincrementalencoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = encoder.encode(input)\n        if output:\n            yield output\n    output = encoder.encode("", True)\n    if output:\n        yield output\n\ndef iterdecode(iterator, encoding, errors=\'strict\', **kwargs):\n    """\n    Decoding iterator.\n\n    Decodes the input strings from the iterator using an IncrementalDecoder.\n\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    """\n    decoder = getincrementaldecoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = decoder.decode(input)\n        if output:\n            yield output\n    output = decoder.decode(b"", True)\n    if output:\n        yield output\n\n### Helpers for charmap-based codecs\n\ndef make_identity_dict(rng):\n\n    """ make_identity_dict(rng) -> dict\n\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n\n    """\n    return {i:i for i in rng}\n\ndef make_encoding_map(decoding_map):\n\n    """ Creates an encoding map from a decoding map.\n\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n\n        One example where this happens is cp875.py which decodes\n        multiple character to \\\\u001a.\n\n    """\n    m = {}\n    for k,v in decoding_map.items():\n        if not v in m:\n            m[v] = k\n        else:\n            m[v] = None\n    return m\n\n### error handlers\n\ntry:\n    strict_errors = lookup_error("strict")\n    ignore_errors = lookup_error("ignore")\n    replace_errors = lookup_error("replace")\n    xmlcharrefreplace_errors = lookup_error("xmlcharrefreplace")\n    backslashreplace_errors = lookup_error("backslashreplace")\n    namereplace_errors = lookup_error("namereplace")\nexcept LookupError:\n    # In --disable-unicode builds, these error handler are missing\n    strict_errors = None\n    ignore_errors = None\n    replace_errors = None\n    xmlcharrefreplace_errors = None\n    backslashreplace_errors = None\n    namereplace_errors = None\n\n# Tell modulefinder that using codecs probably needs the encodings\n# package\n_false = 0\nif _false:\n    import encodings\n\n### Tests\n\nif __name__ == \'__main__\':\n\n    # Make stdout translate Latin-1 output into UTF-8 output\n    sys.stdout = EncodedFile(sys.stdout, \'latin-1\', \'utf-8\')\n\n    # Have stdin translate Latin-1 input into UTF-8 input\n    sys.stdin = EncodedFile(sys.stdin, \'utf-8\', \'latin-1\')\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'""" codecs -- Python Codec Registry, API and helpers.\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""#"\n\nimport builtins, sys\n\n### Registry and builtin stateless codec functions\n\ntry:\n    from _codecs import *\nexcept ImportError as why:\n    raise SystemError(\'Failed to load the builtin codecs: %s\' % why)\n\n__all__ = ["register", "lookup", "open", "EncodedFile", "BOM", "BOM_BE",\n           "BOM_LE", "BOM32_BE", "BOM32_LE", "BOM64_BE", "BOM64_LE",\n           "BOM_UTF8", "BOM_UTF16", "BOM_UTF16_LE", "BOM_UTF16_BE",\n           "BOM_UTF32", "BOM_UTF32_LE", "BOM_UTF32_BE",\n           "CodecInfo", "Codec", "IncrementalEncoder", "IncrementalDecoder",\n           "StreamReader", "StreamWriter",\n           "StreamReaderWriter", "StreamRecoder",\n           "getencoder", "getdecoder", "getincrementalencoder",\n           "getincrementaldecoder", "getreader", "getwriter",\n           "encode", "decode", "iterencode", "iterdecode",\n           "strict_errors", "ignore_errors", "replace_errors",\n           "xmlcharrefreplace_errors",\n           "backslashreplace_errors", "namereplace_errors",\n           "register_error", "lookup_error"]\n\n### Constants\n\n#\n# Byte Order Mark (BOM = ZERO WIDTH NO-BREAK SPACE = U+FEFF)\n# and its possible byte string values\n# for UTF8/UTF16/UTF32 output and little/big endian machines\n#\n\n# UTF-8\nBOM_UTF8 = b\'\\xef\\xbb\\xbf\'\n\n# UTF-16, little endian\nBOM_LE = BOM_UTF16_LE = b\'\\xff\\xfe\'\n\n# UTF-16, big endian\nBOM_BE = BOM_UTF16_BE = b\'\\xfe\\xff\'\n\n# UTF-32, little endian\nBOM_UTF32_LE = b\'\\xff\\xfe\\x00\\x00\'\n\n# UTF-32, big endian\nBOM_UTF32_BE = b\'\\x00\\x00\\xfe\\xff\'\n\nif sys.byteorder == \'little\':\n\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\n\nelse:\n\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_BE\n\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_BE\n\n# Old broken names (don\'t use in new code)\nBOM32_LE = BOM_UTF16_LE\nBOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n\n\n### Codec base classes (defining the API)\n\nclass CodecInfo(tuple):\n    """Codec details when looking up the codec registry"""\n\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n    # See http://bugs.python.org/issue19619\n    _is_text_encoding = True # Assume codecs are text encodings by default\n\n    def __new__(cls, encode, decode, streamreader=None, streamwriter=None,\n        incrementalencoder=None, incrementaldecoder=None, name=None,\n        *, _is_text_encoding=None):\n        self = tuple.__new__(cls, (encode, decode, streamreader, streamwriter))\n        self.name = name\n        self.encode = encode\n        self.decode = decode\n        self.incrementalencoder = incrementalencoder\n        self.incrementaldecoder = incrementaldecoder\n        self.streamwriter = streamwriter\n        self.streamreader = streamreader\n        if _is_text_encoding is not None:\n            self._is_text_encoding = _is_text_encoding\n        return self\n\n    def __repr__(self):\n        return "<%s.%s object for encoding %s at %#x>" % \\\n                (self.__class__.__module__, self.__class__.__qualname__,\n                 self.name, id(self))\n\nclass Codec:\n\n    """ Defines the interface for stateless encoders/decoders.\n\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n\n         \'strict\' - raise a ValueError error (or a subclass)\n         \'ignore\' - ignore the character and continue with the next\n         \'replace\' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on\n                    decoding and \'?\' on encoding.\n         \'surrogateescape\' - replace with private code points U+DCnn.\n         \'xmlcharrefreplace\' - Replace with the appropriate XML\n                               character reference (only for encoding).\n         \'backslashreplace\'  - Replace with backslashed escape sequences.\n         \'namereplace\'       - Replace with \\\\N{...} escape sequences\n                               (only for encoding).\n\n        The set of allowed values can be extended via register_error.\n\n    """\n    def encode(self, input, errors=\'strict\'):\n\n        """ Encodes the object input and returns a tuple (output\n            object, length consumed).\n\n            errors defines the error handling to apply. It defaults to\n            \'strict\' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamWriter for codecs which have to keep state in order to\n            make encoding efficient.\n\n            The encoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        """\n        raise NotImplementedError\n\n    def decode(self, input, errors=\'strict\'):\n\n        """ Decodes the object input and returns a tuple (output\n            object, length consumed).\n\n            input must be an object which provides the bf_getreadbuf\n            buffer slot. Python strings, buffer objects and memory\n            mapped files are examples of objects providing this slot.\n\n            errors defines the error handling to apply. It defaults to\n            \'strict\' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamReader for codecs which have to keep state in order to\n            make decoding efficient.\n\n            The decoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        """\n        raise NotImplementedError\n\nclass IncrementalEncoder(object):\n    """\n    An IncrementalEncoder encodes an input in multiple steps. The input can\n    be passed piece by piece to the encode() method. The IncrementalEncoder\n    remembers the state of the encoding process between calls to encode().\n    """\n    def __init__(self, errors=\'strict\'):\n        """\n        Creates an IncrementalEncoder instance.\n\n        The IncrementalEncoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        """\n        self.errors = errors\n        self.buffer = ""\n\n    def encode(self, input, final=False):\n        """\n        Encodes input and returns the resulting object.\n        """\n        raise NotImplementedError\n\n    def reset(self):\n        """\n        Resets the encoder to the initial state.\n        """\n\n    def getstate(self):\n        """\n        Return the current state of the encoder.\n        """\n        return 0\n\n    def setstate(self, state):\n        """\n        Set the current state of the encoder. state must have been\n        returned by getstate().\n        """\n\nclass BufferedIncrementalEncoder(IncrementalEncoder):\n    """\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    """\n    def __init__(self, errors=\'strict\'):\n        IncrementalEncoder.__init__(self, errors)\n        # unencoded input that is kept between calls to encode()\n        self.buffer = ""\n\n    def _buffer_encode(self, input, errors, final):\n        # Overwrite this method in subclasses: It must encode input\n        # and return an (output, length consumed) tuple\n        raise NotImplementedError\n\n    def encode(self, input, final=False):\n        # encode input (taking the buffer into account)\n        data = self.buffer + input\n        (result, consumed) = self._buffer_encode(data, self.errors, final)\n        # keep unencoded input until the next call\n        self.buffer = data[consumed:]\n        return result\n\n    def reset(self):\n        IncrementalEncoder.reset(self)\n        self.buffer = ""\n\n    def getstate(self):\n        return self.buffer or 0\n\n    def setstate(self, state):\n        self.buffer = state or ""\n\nclass IncrementalDecoder(object):\n    """\n    An IncrementalDecoder decodes an input in multiple steps. The input can\n    be passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    """\n    def __init__(self, errors=\'strict\'):\n        """\n        Create an IncrementalDecoder instance.\n\n        The IncrementalDecoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        """\n        self.errors = errors\n\n    def decode(self, input, final=False):\n        """\n        Decode input and returns the resulting object.\n        """\n        raise NotImplementedError\n\n    def reset(self):\n        """\n        Reset the decoder to the initial state.\n        """\n\n    def getstate(self):\n        """\n        Return the current state of the decoder.\n\n        This must be a (buffered_input, additional_state_info) tuple.\n        buffered_input must be a bytes object containing bytes that\n        were passed to decode() that have not yet been converted.\n        additional_state_info must be a non-negative integer\n        representing the state of the decoder WITHOUT yet having\n        processed the contents of buffered_input.  In the initial state\n        and after reset(), getstate() must return (b"", 0).\n        """\n        return (b"", 0)\n\n    def setstate(self, state):\n        """\n        Set the current state of the decoder.\n\n        state must have been returned by getstate().  The effect of\n        setstate((b"", 0)) must be equivalent to reset().\n        """\n\nclass BufferedIncrementalDecoder(IncrementalDecoder):\n    """\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete\n    byte sequences.\n    """\n    def __init__(self, errors=\'strict\'):\n        IncrementalDecoder.__init__(self, errors)\n        # undecoded input that is kept between calls to decode()\n        self.buffer = b""\n\n    def _buffer_decode(self, input, errors, final):\n        # Overwrite this method in subclasses: It must decode input\n        # and return an (output, length consumed) tuple\n        raise NotImplementedError\n\n    def decode(self, input, final=False):\n        # decode input (taking the buffer into account)\n        data = self.buffer + input\n        (result, consumed) = self._buffer_decode(data, self.errors, final)\n        # keep undecoded input until the next call\n        self.buffer = data[consumed:]\n        return result\n\n    def reset(self):\n        IncrementalDecoder.reset(self)\n        self.buffer = b""\n\n    def getstate(self):\n        # additional state info is always 0\n        return (self.buffer, 0)\n\n    def setstate(self, state):\n        # ignore additional state info\n        self.buffer = state[0]\n\n#\n# The StreamWriter and StreamReader class provide generic working\n# interfaces which can be used to implement new encoding submodules\n# very easily. See encodings/utf_8.py for an example on how this is\n# done.\n#\n\nclass StreamWriter(Codec):\n\n    def __init__(self, stream, errors=\'strict\'):\n\n        """ Creates a StreamWriter instance.\n\n            stream must be a file-like object open for writing.\n\n            The StreamWriter may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             \'strict\' - raise a ValueError (or a subclass)\n             \'ignore\' - ignore the character and continue with the next\n             \'replace\'- replace with a suitable replacement character\n             \'xmlcharrefreplace\' - Replace with the appropriate XML\n                                   character reference.\n             \'backslashreplace\'  - Replace with backslashed escape\n                                   sequences.\n             \'namereplace\'       - Replace with \\\\N{...} escape sequences.\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        """\n        self.stream = stream\n        self.errors = errors\n\n    def write(self, object):\n\n        """ Writes the object\'s contents encoded to self.stream.\n        """\n        data, consumed = self.encode(object, self.errors)\n        self.stream.write(data)\n\n    def writelines(self, list):\n\n        """ Writes the concatenated list of strings to the stream\n            using .write().\n        """\n        self.write(\'\'.join(list))\n\n    def reset(self):\n\n        """ Flushes and resets the codec buffers used for keeping state.\n\n            Calling this method should ensure that the data on the\n            output is put into a clean state, that allows appending\n            of new fresh data without having to rescan the whole\n            stream to recover state.\n\n        """\n        pass\n\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        if whence == 0 and offset == 0:\n            self.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamReader(Codec):\n\n    charbuffertype = str\n\n    def __init__(self, stream, errors=\'strict\'):\n\n        """ Creates a StreamReader instance.\n\n            stream must be a file-like object open for reading.\n\n            The StreamReader may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             \'strict\' - raise a ValueError (or a subclass)\n             \'ignore\' - ignore the character and continue with the next\n             \'replace\'- replace with a suitable replacement character\n             \'backslashreplace\' - Replace with backslashed escape sequences;\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        """\n        self.stream = stream\n        self.errors = errors\n        self.bytebuffer = b""\n        self._empty_charbuffer = self.charbuffertype()\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n\n    def decode(self, input, errors=\'strict\'):\n        raise NotImplementedError\n\n    def read(self, size=-1, chars=-1, firstline=False):\n\n        """ Decodes data from the stream self.stream and returns the\n            resulting object.\n\n            chars indicates the number of decoded code points or bytes to\n            return. read() will never return more data than requested,\n            but it might return less, if there is not enough available.\n\n            size indicates the approximate maximum number of decoded\n            bytes or code points to read for decoding. The decoder\n            can modify this setting as appropriate. The default value\n            -1 indicates to read and decode as much as possible.  size\n            is intended to prevent having to decode huge files in one\n            step.\n\n            If firstline is true, and a UnicodeDecodeError happens\n            after the first line terminator in the input only the first line\n            will be returned, the rest of the input will be kept until the\n            next call to read().\n\n            The method should use a greedy read strategy, meaning that\n            it should read as much data as is allowed within the\n            definition of the encoding and the given size, e.g.  if\n            optional encoding endings or state markers are available\n            on the stream, these should be read too.\n        """\n        # If we have lines cached, first merge them back into characters\n        if self.linebuffer:\n            self.charbuffer = self._empty_charbuffer.join(self.linebuffer)\n            self.linebuffer = None\n\n        # read until we get the required number of characters (if available)\n        while True:\n            # can the request be satisfied from the character buffer?\n            if chars >= 0:\n                if len(self.charbuffer) >= chars:\n                    break\n            elif size >= 0:\n                if len(self.charbuffer) >= size:\n                    break\n            # we need more data\n            if size < 0:\n                newdata = self.stream.read()\n            else:\n                newdata = self.stream.read(size)\n            # decode bytes (those remaining from the last call included)\n            data = self.bytebuffer + newdata\n            if not data:\n                break\n            try:\n                newchars, decodedbytes = self.decode(data, self.errors)\n            except UnicodeDecodeError as exc:\n                if firstline:\n                    newchars, decodedbytes = \\\n                        self.decode(data[:exc.start], self.errors)\n                    lines = newchars.splitlines(keepends=True)\n                    if len(lines)<=1:\n                        raise\n                else:\n                    raise\n            # keep undecoded bytes until the next call\n            self.bytebuffer = data[decodedbytes:]\n            # put new characters in the character buffer\n            self.charbuffer += newchars\n            # there was no data available\n            if not newdata:\n                break\n        if chars < 0:\n            # Return everything we\'ve got\n            result = self.charbuffer\n            self.charbuffer = self._empty_charbuffer\n        else:\n            # Return the first chars characters\n            result = self.charbuffer[:chars]\n            self.charbuffer = self.charbuffer[chars:]\n        return result\n\n    def readline(self, size=None, keepends=True):\n\n        """ Read one line from the input stream and return the\n            decoded data.\n\n            size, if given, is passed as size argument to the\n            read() method.\n\n        """\n        # If we have lines cached from an earlier read, return\n        # them unconditionally\n        if self.linebuffer:\n            line = self.linebuffer[0]\n            del self.linebuffer[0]\n            if len(self.linebuffer) == 1:\n                # revert to charbuffer mode; we might need more data\n                # next time\n                self.charbuffer = self.linebuffer[0]\n                self.linebuffer = None\n            if not keepends:\n                line = line.splitlines(keepends=False)[0]\n            return line\n\n        readsize = size or 72\n        line = self._empty_charbuffer\n        # If size is given, we call read() only once\n        while True:\n            data = self.read(readsize, firstline=True)\n            if data:\n                # If we\'re at a "\\r" read one extra character (which might\n                # be a "\\n") to get a proper line ending. If the stream is\n                # temporarily exhausted we return the wrong line ending.\n                if (isinstance(data, str) and data.endswith("\\r")) or \\\n                   (isinstance(data, bytes) and data.endswith(b"\\r")):\n                    data += self.read(size=1, chars=1)\n\n            line += data\n            lines = line.splitlines(keepends=True)\n            if lines:\n                if len(lines) > 1:\n                    # More than one line result; the first line is a full line\n                    # to return\n                    line = lines[0]\n                    del lines[0]\n                    if len(lines) > 1:\n                        # cache the remaining lines\n                        lines[-1] += self.charbuffer\n                        self.linebuffer = lines\n                        self.charbuffer = None\n                    else:\n                        # only one remaining line, put it back into charbuffer\n                        self.charbuffer = lines[0] + self.charbuffer\n                    if not keepends:\n                        line = line.splitlines(keepends=False)[0]\n                    break\n                line0withend = lines[0]\n                line0withoutend = lines[0].splitlines(keepends=False)[0]\n                if line0withend != line0withoutend: # We really have a line end\n                    # Put the rest back together and keep it until the next call\n                    self.charbuffer = self._empty_charbuffer.join(lines[1:]) + \\\n                                      self.charbuffer\n                    if keepends:\n                        line = line0withend\n                    else:\n                        line = line0withoutend\n                    break\n            # we didn\'t get anything or this was our only try\n            if not data or size is not None:\n                if line and not keepends:\n                    line = line.splitlines(keepends=False)[0]\n                break\n            if readsize < 8000:\n                readsize *= 2\n        return line\n\n    def readlines(self, sizehint=None, keepends=True):\n\n        """ Read all lines available on the input stream\n            and return them as a list.\n\n            Line breaks are implemented using the codec\'s decoder\n            method and are included in the list entries.\n\n            sizehint, if given, is ignored since there is no efficient\n            way to finding the true end-of-line.\n\n        """\n        data = self.read()\n        return data.splitlines(keepends)\n\n    def reset(self):\n\n        """ Resets the codec buffers used for keeping state.\n\n            Note that no stream repositioning should take place.\n            This method is primarily intended to be able to recover\n            from decoding errors.\n\n        """\n        self.bytebuffer = b""\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n\n    def seek(self, offset, whence=0):\n        """ Set the input stream\'s current position.\n\n            Resets the codec buffers used for keeping state.\n        """\n        self.stream.seek(offset, whence)\n        self.reset()\n\n    def __next__(self):\n\n        """ Return the next decoded line from the input stream."""\n        line = self.readline()\n        if line:\n            return line\n        raise StopIteration\n\n    def __iter__(self):\n        return self\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamReaderWriter:\n\n    """ StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n\n    """\n    # Optional attributes set by the file wrappers below\n    encoding = \'unknown\'\n\n    def __init__(self, stream, Reader, Writer, errors=\'strict\'):\n\n        """ Creates a StreamReaderWriter instance.\n\n            stream must be a Stream-like object.\n\n            Reader, Writer must be factory functions or classes\n            providing the StreamReader, StreamWriter interface resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        """\n        self.stream = stream\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n\n    def read(self, size=-1):\n\n        return self.reader.read(size)\n\n    def readline(self, size=None):\n\n        return self.reader.readline(size)\n\n    def readlines(self, sizehint=None):\n\n        return self.reader.readlines(sizehint)\n\n    def __next__(self):\n\n        """ Return the next decoded line from the input stream."""\n        return next(self.reader)\n\n    def __iter__(self):\n        return self\n\n    def write(self, data):\n\n        return self.writer.write(data)\n\n    def writelines(self, list):\n\n        return self.writer.writelines(list)\n\n    def reset(self):\n\n        self.reader.reset()\n        self.writer.reset()\n\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        self.reader.reset()\n        if whence == 0 and offset == 0:\n            self.writer.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    # these are needed to make "with codecs.open(...)" work properly\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamRecoder:\n\n    """ StreamRecoder instances translate data from one encoding to another.\n\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n\n        Data written to the StreamRecoder is first decoded into an\n        intermediate format (depending on the "decode" codec) and then\n        written to the underlying stream using an instance of the provided\n        Writer class.\n\n        In the other direction, data is read from the underlying stream using\n        a Reader instance and then encoded and returned to the caller.\n\n    """\n    # Optional attributes set by the file wrappers below\n    data_encoding = \'unknown\'\n    file_encoding = \'unknown\'\n\n    def __init__(self, stream, encode, decode, Reader, Writer,\n                 errors=\'strict\'):\n\n        """ Creates a StreamRecoder instance which implements a two-way\n            conversion: encode and decode work on the frontend (the\n            data visible to .read() and .write()) while Reader and Writer\n            work on the backend (the data in stream).\n\n            You can use these objects to do transparent\n            transcodings from e.g. latin-1 to utf-8 and back.\n\n            stream must be a file-like object.\n\n            encode and decode must adhere to the Codec interface; Reader and\n            Writer must be factory functions or classes providing the\n            StreamReader and StreamWriter interfaces resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        """\n        self.stream = stream\n        self.encode = encode\n        self.decode = decode\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n\n    def read(self, size=-1):\n\n        data = self.reader.read(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def readline(self, size=None):\n\n        if size is None:\n            data = self.reader.readline()\n        else:\n            data = self.reader.readline(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def readlines(self, sizehint=None):\n\n        data = self.reader.read()\n        data, bytesencoded = self.encode(data, self.errors)\n        return data.splitlines(keepends=True)\n\n    def __next__(self):\n\n        """ Return the next decoded line from the input stream."""\n        data = next(self.reader)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def __iter__(self):\n        return self\n\n    def write(self, data):\n\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n\n    def writelines(self, list):\n\n        data = \'\'.join(list)\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n\n    def reset(self):\n\n        self.reader.reset()\n        self.writer.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n### Shortcuts\n\ndef open(filename, mode=\'r\', encoding=None, errors=\'strict\', buffering=1):\n\n    """ Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n\n        Underlying encoded files are always opened in binary mode.\n        The default file mode is \'r\', meaning to open the file in read mode.\n\n        encoding specifies the encoding which is to be used for the\n        file.\n\n        errors may be given to define the error handling. It defaults\n        to \'strict\' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        buffering has the same meaning as for the builtin open() API.\n        It defaults to line buffered.\n\n        The returned wrapped file object provides an extra attribute\n        .encoding which allows querying the used encoding. This\n        attribute is only available if an encoding was specified as\n        parameter.\n\n    """\n    if encoding is not None and \\\n       \'b\' not in mode:\n        # Force opening of the file in binary mode\n        mode = mode + \'b\'\n    file = builtins.open(filename, mode, buffering)\n    if encoding is None:\n        return file\n    info = lookup(encoding)\n    srw = StreamReaderWriter(file, info.streamreader, info.streamwriter, errors)\n    # Add attributes to simplify introspection\n    srw.encoding = encoding\n    return srw\n\ndef EncodedFile(file, data_encoding, file_encoding=None, errors=\'strict\'):\n\n    """ Return a wrapped version of file which provides transparent\n        encoding translation.\n\n        Data written to the wrapped file is decoded according\n        to the given data_encoding and then encoded to the underlying\n        file using file_encoding. The intermediate data type\n        will usually be Unicode but depends on the specified codecs.\n\n        Bytes read from the file are decoded using file_encoding and then\n        passed back to the caller encoded using data_encoding.\n\n        If file_encoding is not given, it defaults to data_encoding.\n\n        errors may be given to define the error handling. It defaults\n        to \'strict\' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        The returned wrapped file object provides two extra attributes\n        .data_encoding and .file_encoding which reflect the given\n        parameters of the same name. The attributes can be used for\n        introspection by Python programs.\n\n    """\n    if file_encoding is None:\n        file_encoding = data_encoding\n    data_info = lookup(data_encoding)\n    file_info = lookup(file_encoding)\n    sr = StreamRecoder(file, data_info.encode, data_info.decode,\n                       file_info.streamreader, file_info.streamwriter, errors)\n    # Add attributes to simplify introspection\n    sr.data_encoding = data_encoding\n    sr.file_encoding = file_encoding\n    return sr\n\n### Helpers for codec lookup\n\ndef getencoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its encoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).encode\n\ndef getdecoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its decoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).decode\n\ndef getincrementalencoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn\'t provide an incremental encoder.\n\n    """\n    encoder = lookup(encoding).incrementalencoder\n    if encoder is None:\n        raise LookupError(encoding)\n    return encoder\n\ndef getincrementaldecoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn\'t provide an incremental decoder.\n\n    """\n    decoder = lookup(encoding).incrementaldecoder\n    if decoder is None:\n        raise LookupError(encoding)\n    return decoder\n\ndef getreader(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).streamreader\n\ndef getwriter(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).streamwriter\n\ndef iterencode(iterator, encoding, errors=\'strict\', **kwargs):\n    """\n    Encoding iterator.\n\n    Encodes the input strings from the iterator using an IncrementalEncoder.\n\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    """\n    encoder = getincrementalencoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = encoder.encode(input)\n        if output:\n            yield output\n    output = encoder.encode("", True)\n    if output:\n        yield output\n\ndef iterdecode(iterator, encoding, errors=\'strict\', **kwargs):\n    """\n    Decoding iterator.\n\n    Decodes the input strings from the iterator using an IncrementalDecoder.\n\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    """\n    decoder = getincrementaldecoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = decoder.decode(input)\n        if output:\n            yield output\n    output = decoder.decode(b"", True)\n    if output:\n        yield output\n\n### Helpers for charmap-based codecs\n\ndef make_identity_dict(rng):\n\n    """ make_identity_dict(rng) -> dict\n\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n\n    """\n    return {i:i for i in rng}\n\ndef make_encoding_map(decoding_map):\n\n    """ Creates an encoding map from a decoding map.\n\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n\n        One example where this happens is cp875.py which decodes\n        multiple character to \\\\u001a.\n\n    """\n    m = {}\n    for k,v in decoding_map.items():\n        if not v in m:\n            m[v] = k\n        else:\n            m[v] = None\n    return m\n\n### error handlers\n\ntry:\n    strict_errors = lookup_error("strict")\n    ignore_errors = lookup_error("ignore")\n    replace_errors = lookup_error("replace")\n    xmlcharrefreplace_errors = lookup_error("xmlcharrefreplace")\n    backslashreplace_errors = lookup_error("backslashreplace")\n    namereplace_errors = lookup_error("namereplace")\nexcept LookupError:\n    # In --disable-unicode builds, these error handler are missing\n    strict_errors = None\n    ignore_errors = None\n    replace_errors = None\n    xmlcharrefreplace_errors = None\n    backslashreplace_errors = None\n    namereplace_errors = None\n\n# Tell modulefinder that using codecs probably needs the encodings\n# package\n_false = 0\nif _false:\n    import encodings\n\n### Tests\n\nif __name__ == \'__main__\':\n\n    # Make stdout translate Latin-1 output into UTF-8 output\n    sys.stdout = EncodedFile(sys.stdout, \'latin-1\', \'utf-8\')\n\n    # Have stdin translate Latin-1 input into UTF-8 input\n    sys.stdin = EncodedFile(sys.stdin, \'utf-8\', \'latin-1\')\n', resulttype=None
dump b'""" codecs -- Python Codec Registry, API and helpers.\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""#"\n\nimport builtins, sys\n\n### Registry and builtin stateless codec functions\n\ntry:\n    from _codecs import *\nexcept ImportError as why:\n    raise SystemError(\'Failed to load the builtin codecs: %s\' % why)\n\n__all__ = ["register", "lookup", "open", "EncodedFile", "BOM", "BOM_BE",\n           "BOM_LE", "BOM32_BE", "BOM32_LE", "BOM64_BE", "BOM64_LE",\n           "BOM_UTF8", "BOM_UTF16", "BOM_UTF16_LE", "BOM_UTF16_BE",\n           "BOM_UTF32", "BOM_UTF32_LE", "BOM_UTF32_BE",\n           "CodecInfo", "Codec", "IncrementalEncoder", "IncrementalDecoder",\n           "StreamReader", "StreamWriter",\n           "StreamReaderWriter", "StreamRecoder",\n           "getencoder", "getdecoder", "getincrementalencoder",\n           "getincrementaldecoder", "getreader", "getwriter",\n           "encode", "decode", "iterencode", "iterdecode",\n           "strict_errors", "ignore_errors", "replace_errors",\n           "xmlcharrefreplace_errors",\n           "backslashreplace_errors", "namereplace_errors",\n           "register_error", "lookup_error"]\n\n### Constants\n\n#\n# Byte Order Mark (BOM = ZERO WIDTH NO-BREAK SPACE = U+FEFF)\n# and its possible byte string values\n# for UTF8/UTF16/UTF32 output and little/big endian machines\n#\n\n# UTF-8\nBOM_UTF8 = b\'\\xef\\xbb\\xbf\'\n\n# UTF-16, little endian\nBOM_LE = BOM_UTF16_LE = b\'\\xff\\xfe\'\n\n# UTF-16, big endian\nBOM_BE = BOM_UTF16_BE = b\'\\xfe\\xff\'\n\n# UTF-32, little endian\nBOM_UTF32_LE = b\'\\xff\\xfe\\x00\\x00\'\n\n# UTF-32, big endian\nBOM_UTF32_BE = b\'\\x00\\x00\\xfe\\xff\'\n\nif sys.byteorder == \'little\':\n\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\n\nelse:\n\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_BE\n\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_BE\n\n# Old broken names (don\'t use in new code)\nBOM32_LE = BOM_UTF16_LE\nBOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n\n\n### Codec base classes (defining the API)\n\nclass CodecInfo(tuple):\n    """Codec details when looking up the codec registry"""\n\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n    # See http://bugs.python.org/issue19619\n    _is_text_encoding = True # Assume codecs are text encodings by default\n\n    def __new__(cls, encode, decode, streamreader=None, streamwriter=None,\n        incrementalencoder=None, incrementaldecoder=None, name=None,\n        *, _is_text_encoding=None):\n        self = tuple.__new__(cls, (encode, decode, streamreader, streamwriter))\n        self.name = name\n        self.encode = encode\n        self.decode = decode\n        self.incrementalencoder = incrementalencoder\n        self.incrementaldecoder = incrementaldecoder\n        self.streamwriter = streamwriter\n        self.streamreader = streamreader\n        if _is_text_encoding is not None:\n            self._is_text_encoding = _is_text_encoding\n        return self\n\n    def __repr__(self):\n        return "<%s.%s object for encoding %s at %#x>" % \\\n                (self.__class__.__module__, self.__class__.__qualname__,\n                 self.name, id(self))\n\nclass Codec:\n\n    """ Defines the interface for stateless encoders/decoders.\n\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n\n         \'strict\' - raise a ValueError error (or a subclass)\n         \'ignore\' - ignore the character and continue with the next\n         \'replace\' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on\n                    decoding and \'?\' on encoding.\n         \'surrogateescape\' - replace with private code points U+DCnn.\n         \'xmlcharrefreplace\' - Replace with the appropriate XML\n                               character reference (only for encoding).\n         \'backslashreplace\'  - Replace with backslashed escape sequences.\n         \'namereplace\'       - Replace with \\\\N{...} escape sequences\n                               (only for encoding).\n\n        The set of allowed values can be extended via register_error.\n\n    """\n    def encode(self, input, errors=\'strict\'):\n\n        """ Encodes the object input and returns a tuple (output\n            object, length consumed).\n\n            errors defines the error handling to apply. It defaults to\n            \'strict\' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamWriter for codecs which have to keep state in order to\n            make encoding efficient.\n\n            The encoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        """\n        raise NotImplementedError\n\n    def decode(self, input, errors=\'strict\'):\n\n        """ Decodes the object input and returns a tuple (output\n            object, length consumed).\n\n            input must be an object which provides the bf_getreadbuf\n            buffer slot. Python strings, buffer objects and memory\n            mapped files are examples of objects providing this slot.\n\n            errors defines the error handling to apply. It defaults to\n            \'strict\' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamReader for codecs which have to keep state in order to\n            make decoding efficient.\n\n            The decoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        """\n        raise NotImplementedError\n\nclass IncrementalEncoder(object):\n    """\n    An IncrementalEncoder encodes an input in multiple steps. The input can\n    be passed piece by piece to the encode() method. The IncrementalEncoder\n    remembers the state of the encoding process between calls to encode().\n    """\n    def __init__(self, errors=\'strict\'):\n        """\n        Creates an IncrementalEncoder instance.\n\n        The IncrementalEncoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        """\n        self.errors = errors\n        self.buffer = ""\n\n    def encode(self, input, final=False):\n        """\n        Encodes input and returns the resulting object.\n        """\n        raise NotImplementedError\n\n    def reset(self):\n        """\n        Resets the encoder to the initial state.\n        """\n\n    def getstate(self):\n        """\n        Return the current state of the encoder.\n        """\n        return 0\n\n    def setstate(self, state):\n        """\n        Set the current state of the encoder. state must have been\n        returned by getstate().\n        """\n\nclass BufferedIncrementalEncoder(IncrementalEncoder):\n    """\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    """\n    def __init__(self, errors=\'strict\'):\n        IncrementalEncoder.__init__(self, errors)\n        # unencoded input that is kept between calls to encode()\n        self.buffer = ""\n\n    def _buffer_encode(self, input, errors, final):\n        # Overwrite this method in subclasses: It must encode input\n        # and return an (output, length consumed) tuple\n        raise NotImplementedError\n\n    def encode(self, input, final=False):\n        # encode input (taking the buffer into account)\n        data = self.buffer + input\n        (result, consumed) = self._buffer_encode(data, self.errors, final)\n        # keep unencoded input until the next call\n        self.buffer = data[consumed:]\n        return result\n\n    def reset(self):\n        IncrementalEncoder.reset(self)\n        self.buffer = ""\n\n    def getstate(self):\n        return self.buffer or 0\n\n    def setstate(self, state):\n        self.buffer = state or ""\n\nclass IncrementalDecoder(object):\n    """\n    An IncrementalDecoder decodes an input in multiple steps. The input can\n    be passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    """\n    def __init__(self, errors=\'strict\'):\n        """\n        Create an IncrementalDecoder instance.\n\n        The IncrementalDecoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        """\n        self.errors = errors\n\n    def decode(self, input, final=False):\n        """\n        Decode input and returns the resulting object.\n        """\n        raise NotImplementedError\n\n    def reset(self):\n        """\n        Reset the decoder to the initial state.\n        """\n\n    def getstate(self):\n        """\n        Return the current state of the decoder.\n\n        This must be a (buffered_input, additional_state_info) tuple.\n        buffered_input must be a bytes object containing bytes that\n        were passed to decode() that have not yet been converted.\n        additional_state_info must be a non-negative integer\n        representing the state of the decoder WITHOUT yet having\n        processed the contents of buffered_input.  In the initial state\n        and after reset(), getstate() must return (b"", 0).\n        """\n        return (b"", 0)\n\n    def setstate(self, state):\n        """\n        Set the current state of the decoder.\n\n        state must have been returned by getstate().  The effect of\n        setstate((b"", 0)) must be equivalent to reset().\n        """\n\nclass BufferedIncrementalDecoder(IncrementalDecoder):\n    """\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete\n    byte sequences.\n    """\n    def __init__(self, errors=\'strict\'):\n        IncrementalDecoder.__init__(self, errors)\n        # undecoded input that is kept between calls to decode()\n        self.buffer = b""\n\n    def _buffer_decode(self, input, errors, final):\n        # Overwrite this method in subclasses: It must decode input\n        # and return an (output, length consumed) tuple\n        raise NotImplementedError\n\n    def decode(self, input, final=False):\n        # decode input (taking the buffer into account)\n        data = self.buffer + input\n        (result, consumed) = self._buffer_decode(data, self.errors, final)\n        # keep undecoded input until the next call\n        self.buffer = data[consumed:]\n        return result\n\n    def reset(self):\n        IncrementalDecoder.reset(self)\n        self.buffer = b""\n\n    def getstate(self):\n        # additional state info is always 0\n        return (self.buffer, 0)\n\n    def setstate(self, state):\n        # ignore additional state info\n        self.buffer = state[0]\n\n#\n# The StreamWriter and StreamReader class provide generic working\n# interfaces which can be used to implement new encoding submodules\n# very easily. See encodings/utf_8.py for an example on how this is\n# done.\n#\n\nclass StreamWriter(Codec):\n\n    def __init__(self, stream, errors=\'strict\'):\n\n        """ Creates a StreamWriter instance.\n\n            stream must be a file-like object open for writing.\n\n            The StreamWriter may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             \'strict\' - raise a ValueError (or a subclass)\n             \'ignore\' - ignore the character and continue with the next\n             \'replace\'- replace with a suitable replacement character\n             \'xmlcharrefreplace\' - Replace with the appropriate XML\n                                   character reference.\n             \'backslashreplace\'  - Replace with backslashed escape\n                                   sequences.\n             \'namereplace\'       - Replace with \\\\N{...} escape sequences.\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        """\n        self.stream = stream\n        self.errors = errors\n\n    def write(self, object):\n\n        """ Writes the object\'s contents encoded to self.stream.\n        """\n        data, consumed = self.encode(object, self.errors)\n        self.stream.write(data)\n\n    def writelines(self, list):\n\n        """ Writes the concatenated list of strings to the stream\n            using .write().\n        """\n        self.write(\'\'.join(list))\n\n    def reset(self):\n\n        """ Flushes and resets the codec buffers used for keeping state.\n\n            Calling this method should ensure that the data on the\n            output is put into a clean state, that allows appending\n            of new fresh data without having to rescan the whole\n            stream to recover state.\n\n        """\n        pass\n\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        if whence == 0 and offset == 0:\n            self.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamReader(Codec):\n\n    charbuffertype = str\n\n    def __init__(self, stream, errors=\'strict\'):\n\n        """ Creates a StreamReader instance.\n\n            stream must be a file-like object open for reading.\n\n            The StreamReader may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             \'strict\' - raise a ValueError (or a subclass)\n             \'ignore\' - ignore the character and continue with the next\n             \'replace\'- replace with a suitable replacement character\n             \'backslashreplace\' - Replace with backslashed escape sequences;\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        """\n        self.stream = stream\n        self.errors = errors\n        self.bytebuffer = b""\n        self._empty_charbuffer = self.charbuffertype()\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n\n    def decode(self, input, errors=\'strict\'):\n        raise NotImplementedError\n\n    def read(self, size=-1, chars=-1, firstline=False):\n\n        """ Decodes data from the stream self.stream and returns the\n            resulting object.\n\n            chars indicates the number of decoded code points or bytes to\n            return. read() will never return more data than requested,\n            but it might return less, if there is not enough available.\n\n            size indicates the approximate maximum number of decoded\n            bytes or code points to read for decoding. The decoder\n            can modify this setting as appropriate. The default value\n            -1 indicates to read and decode as much as possible.  size\n            is intended to prevent having to decode huge files in one\n            step.\n\n            If firstline is true, and a UnicodeDecodeError happens\n            after the first line terminator in the input only the first line\n            will be returned, the rest of the input will be kept until the\n            next call to read().\n\n            The method should use a greedy read strategy, meaning that\n            it should read as much data as is allowed within the\n            definition of the encoding and the given size, e.g.  if\n            optional encoding endings or state markers are available\n            on the stream, these should be read too.\n        """\n        # If we have lines cached, first merge them back into characters\n        if self.linebuffer:\n            self.charbuffer = self._empty_charbuffer.join(self.linebuffer)\n            self.linebuffer = None\n\n        # read until we get the required number of characters (if available)\n        while True:\n            # can the request be satisfied from the character buffer?\n            if chars >= 0:\n                if len(self.charbuffer) >= chars:\n                    break\n            elif size >= 0:\n                if len(self.charbuffer) >= size:\n                    break\n            # we need more data\n            if size < 0:\n                newdata = self.stream.read()\n            else:\n                newdata = self.stream.read(size)\n            # decode bytes (those remaining from the last call included)\n            data = self.bytebuffer + newdata\n            if not data:\n                break\n            try:\n                newchars, decodedbytes = self.decode(data, self.errors)\n            except UnicodeDecodeError as exc:\n                if firstline:\n                    newchars, decodedbytes = \\\n                        self.decode(data[:exc.start], self.errors)\n                    lines = newchars.splitlines(keepends=True)\n                    if len(lines)<=1:\n                        raise\n                else:\n                    raise\n            # keep undecoded bytes until the next call\n            self.bytebuffer = data[decodedbytes:]\n            # put new characters in the character buffer\n            self.charbuffer += newchars\n            # there was no data available\n            if not newdata:\n                break\n        if chars < 0:\n            # Return everything we\'ve got\n            result = self.charbuffer\n            self.charbuffer = self._empty_charbuffer\n        else:\n            # Return the first chars characters\n            result = self.charbuffer[:chars]\n            self.charbuffer = self.charbuffer[chars:]\n        return result\n\n    def readline(self, size=None, keepends=True):\n\n        """ Read one line from the input stream and return the\n            decoded data.\n\n            size, if given, is passed as size argument to the\n            read() method.\n\n        """\n        # If we have lines cached from an earlier read, return\n        # them unconditionally\n        if self.linebuffer:\n            line = self.linebuffer[0]\n            del self.linebuffer[0]\n            if len(self.linebuffer) == 1:\n                # revert to charbuffer mode; we might need more data\n                # next time\n                self.charbuffer = self.linebuffer[0]\n                self.linebuffer = None\n            if not keepends:\n                line = line.splitlines(keepends=False)[0]\n            return line\n\n        readsize = size or 72\n        line = self._empty_charbuffer\n        # If size is given, we call read() only once\n        while True:\n            data = self.read(readsize, firstline=True)\n            if data:\n                # If we\'re at a "\\r" read one extra character (which might\n                # be a "\\n") to get a proper line ending. If the stream is\n                # temporarily exhausted we return the wrong line ending.\n                if (isinstance(data, str) and data.endswith("\\r")) or \\\n                   (isinstance(data, bytes) and data.endswith(b"\\r")):\n                    data += self.read(size=1, chars=1)\n\n            line += data\n            lines = line.splitlines(keepends=True)\n            if lines:\n                if len(lines) > 1:\n                    # More than one line result; the first line is a full line\n                    # to return\n                    line = lines[0]\n                    del lines[0]\n                    if len(lines) > 1:\n                        # cache the remaining lines\n                        lines[-1] += self.charbuffer\n                        self.linebuffer = lines\n                        self.charbuffer = None\n                    else:\n                        # only one remaining line, put it back into charbuffer\n                        self.charbuffer = lines[0] + self.charbuffer\n                    if not keepends:\n                        line = line.splitlines(keepends=False)[0]\n                    break\n                line0withend = lines[0]\n                line0withoutend = lines[0].splitlines(keepends=False)[0]\n                if line0withend != line0withoutend: # We really have a line end\n                    # Put the rest back together and keep it until the next call\n                    self.charbuffer = self._empty_charbuffer.join(lines[1:]) + \\\n                                      self.charbuffer\n                    if keepends:\n                        line = line0withend\n                    else:\n                        line = line0withoutend\n                    break\n            # we didn\'t get anything or this was our only try\n            if not data or size is not None:\n                if line and not keepends:\n                    line = line.splitlines(keepends=False)[0]\n                break\n            if readsize < 8000:\n                readsize *= 2\n        return line\n\n    def readlines(self, sizehint=None, keepends=True):\n\n        """ Read all lines available on the input stream\n            and return them as a list.\n\n            Line breaks are implemented using the codec\'s decoder\n            method and are included in the list entries.\n\n            sizehint, if given, is ignored since there is no efficient\n            way to finding the true end-of-line.\n\n        """\n        data = self.read()\n        return data.splitlines(keepends)\n\n    def reset(self):\n\n        """ Resets the codec buffers used for keeping state.\n\n            Note that no stream repositioning should take place.\n            This method is primarily intended to be able to recover\n            from decoding errors.\n\n        """\n        self.bytebuffer = b""\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n\n    def seek(self, offset, whence=0):\n        """ Set the input stream\'s current position.\n\n            Resets the codec buffers used for keeping state.\n        """\n        self.stream.seek(offset, whence)\n        self.reset()\n\n    def __next__(self):\n\n        """ Return the next decoded line from the input stream."""\n        line = self.readline()\n        if line:\n            return line\n        raise StopIteration\n\n    def __iter__(self):\n        return self\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamReaderWriter:\n\n    """ StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n\n    """\n    # Optional attributes set by the file wrappers below\n    encoding = \'unknown\'\n\n    def __init__(self, stream, Reader, Writer, errors=\'strict\'):\n\n        """ Creates a StreamReaderWriter instance.\n\n            stream must be a Stream-like object.\n\n            Reader, Writer must be factory functions or classes\n            providing the StreamReader, StreamWriter interface resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        """\n        self.stream = stream\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n\n    def read(self, size=-1):\n\n        return self.reader.read(size)\n\n    def readline(self, size=None):\n\n        return self.reader.readline(size)\n\n    def readlines(self, sizehint=None):\n\n        return self.reader.readlines(sizehint)\n\n    def __next__(self):\n\n        """ Return the next decoded line from the input stream."""\n        return next(self.reader)\n\n    def __iter__(self):\n        return self\n\n    def write(self, data):\n\n        return self.writer.write(data)\n\n    def writelines(self, list):\n\n        return self.writer.writelines(list)\n\n    def reset(self):\n\n        self.reader.reset()\n        self.writer.reset()\n\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        self.reader.reset()\n        if whence == 0 and offset == 0:\n            self.writer.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    # these are needed to make "with codecs.open(...)" work properly\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamRecoder:\n\n    """ StreamRecoder instances translate data from one encoding to another.\n\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n\n        Data written to the StreamRecoder is first decoded into an\n        intermediate format (depending on the "decode" codec) and then\n        written to the underlying stream using an instance of the provided\n        Writer class.\n\n        In the other direction, data is read from the underlying stream using\n        a Reader instance and then encoded and returned to the caller.\n\n    """\n    # Optional attributes set by the file wrappers below\n    data_encoding = \'unknown\'\n    file_encoding = \'unknown\'\n\n    def __init__(self, stream, encode, decode, Reader, Writer,\n                 errors=\'strict\'):\n\n        """ Creates a StreamRecoder instance which implements a two-way\n            conversion: encode and decode work on the frontend (the\n            data visible to .read() and .write()) while Reader and Writer\n            work on the backend (the data in stream).\n\n            You can use these objects to do transparent\n            transcodings from e.g. latin-1 to utf-8 and back.\n\n            stream must be a file-like object.\n\n            encode and decode must adhere to the Codec interface; Reader and\n            Writer must be factory functions or classes providing the\n            StreamReader and StreamWriter interfaces resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        """\n        self.stream = stream\n        self.encode = encode\n        self.decode = decode\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n\n    def read(self, size=-1):\n\n        data = self.reader.read(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def readline(self, size=None):\n\n        if size is None:\n            data = self.reader.readline()\n        else:\n            data = self.reader.readline(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def readlines(self, sizehint=None):\n\n        data = self.reader.read()\n        data, bytesencoded = self.encode(data, self.errors)\n        return data.splitlines(keepends=True)\n\n    def __next__(self):\n\n        """ Return the next decoded line from the input stream."""\n        data = next(self.reader)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def __iter__(self):\n        return self\n\n    def write(self, data):\n\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n\n    def writelines(self, list):\n\n        data = \'\'.join(list)\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n\n    def reset(self):\n\n        self.reader.reset()\n        self.writer.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        """ Inherit all other methods from the underlying stream.\n        """\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n### Shortcuts\n\ndef open(filename, mode=\'r\', encoding=None, errors=\'strict\', buffering=1):\n\n    """ Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n\n        Underlying encoded files are always opened in binary mode.\n        The default file mode is \'r\', meaning to open the file in read mode.\n\n        encoding specifies the encoding which is to be used for the\n        file.\n\n        errors may be given to define the error handling. It defaults\n        to \'strict\' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        buffering has the same meaning as for the builtin open() API.\n        It defaults to line buffered.\n\n        The returned wrapped file object provides an extra attribute\n        .encoding which allows querying the used encoding. This\n        attribute is only available if an encoding was specified as\n        parameter.\n\n    """\n    if encoding is not None and \\\n       \'b\' not in mode:\n        # Force opening of the file in binary mode\n        mode = mode + \'b\'\n    file = builtins.open(filename, mode, buffering)\n    if encoding is None:\n        return file\n    info = lookup(encoding)\n    srw = StreamReaderWriter(file, info.streamreader, info.streamwriter, errors)\n    # Add attributes to simplify introspection\n    srw.encoding = encoding\n    return srw\n\ndef EncodedFile(file, data_encoding, file_encoding=None, errors=\'strict\'):\n\n    """ Return a wrapped version of file which provides transparent\n        encoding translation.\n\n        Data written to the wrapped file is decoded according\n        to the given data_encoding and then encoded to the underlying\n        file using file_encoding. The intermediate data type\n        will usually be Unicode but depends on the specified codecs.\n\n        Bytes read from the file are decoded using file_encoding and then\n        passed back to the caller encoded using data_encoding.\n\n        If file_encoding is not given, it defaults to data_encoding.\n\n        errors may be given to define the error handling. It defaults\n        to \'strict\' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        The returned wrapped file object provides two extra attributes\n        .data_encoding and .file_encoding which reflect the given\n        parameters of the same name. The attributes can be used for\n        introspection by Python programs.\n\n    """\n    if file_encoding is None:\n        file_encoding = data_encoding\n    data_info = lookup(data_encoding)\n    file_info = lookup(file_encoding)\n    sr = StreamRecoder(file, data_info.encode, data_info.decode,\n                       file_info.streamreader, file_info.streamwriter, errors)\n    # Add attributes to simplify introspection\n    sr.data_encoding = data_encoding\n    sr.file_encoding = file_encoding\n    return sr\n\n### Helpers for codec lookup\n\ndef getencoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its encoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).encode\n\ndef getdecoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its decoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).decode\n\ndef getincrementalencoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn\'t provide an incremental encoder.\n\n    """\n    encoder = lookup(encoding).incrementalencoder\n    if encoder is None:\n        raise LookupError(encoding)\n    return encoder\n\ndef getincrementaldecoder(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn\'t provide an incremental decoder.\n\n    """\n    decoder = lookup(encoding).incrementaldecoder\n    if decoder is None:\n        raise LookupError(encoding)\n    return decoder\n\ndef getreader(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).streamreader\n\ndef getwriter(encoding):\n\n    """ Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    """\n    return lookup(encoding).streamwriter\n\ndef iterencode(iterator, encoding, errors=\'strict\', **kwargs):\n    """\n    Encoding iterator.\n\n    Encodes the input strings from the iterator using an IncrementalEncoder.\n\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    """\n    encoder = getincrementalencoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = encoder.encode(input)\n        if output:\n            yield output\n    output = encoder.encode("", True)\n    if output:\n        yield output\n\ndef iterdecode(iterator, encoding, errors=\'strict\', **kwargs):\n    """\n    Decoding iterator.\n\n    Decodes the input strings from the iterator using an IncrementalDecoder.\n\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    """\n    decoder = getincrementaldecoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = decoder.decode(input)\n        if output:\n            yield output\n    output = decoder.decode(b"", True)\n    if output:\n        yield output\n\n### Helpers for charmap-based codecs\n\ndef make_identity_dict(rng):\n\n    """ make_identity_dict(rng) -> dict\n\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n\n    """\n    return {i:i for i in rng}\n\ndef make_encoding_map(decoding_map):\n\n    """ Creates an encoding map from a decoding map.\n\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n\n        One example where this happens is cp875.py which decodes\n        multiple character to \\\\u001a.\n\n    """\n    m = {}\n    for k,v in decoding_map.items():\n        if not v in m:\n            m[v] = k\n        else:\n            m[v] = None\n    return m\n\n### error handlers\n\ntry:\n    strict_errors = lookup_error("strict")\n    ignore_errors = lookup_error("ignore")\n    replace_errors = lookup_error("replace")\n    xmlcharrefreplace_errors = lookup_error("xmlcharrefreplace")\n    backslashreplace_errors = lookup_error("backslashreplace")\n    namereplace_errors = lookup_error("namereplace")\nexcept LookupError:\n    # In --disable-unicode builds, these error handler are missing\n    strict_errors = None\n    ignore_errors = None\n    replace_errors = None\n    xmlcharrefreplace_errors = None\n    backslashreplace_errors = None\n    namereplace_errors = None\n\n# Tell modulefinder that using codecs probably needs the encodings\n# package\n_false = 0\nif _false:\n    import encodings\n\n### Tests\n\nif __name__ == \'__main__\':\n\n    # Make stdout translate Latin-1 output into UTF-8 output\n    sys.stdout = EncodedFile(sys.stdout, \'latin-1\', \'utf-8\')\n\n    # Have stdin translate Latin-1 input into UTF-8 input\n    sys.stdin = EncodedFile(sys.stdin, \'utf-8\', \'latin-1\')\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=37, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36231, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=37, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=36231, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 37, 1, 1, 0, 0, 36231, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 37, 1, 1, 0, 0, 36231, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 37, type <class 'int'>
Dump int (long) 37
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 36231, type <class 'int'>
Dump int (long) 36231
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 36231
Write message g=<_io.BufferedWriter name=4>, msg=36231, resulttype=None
dump 36231, type <class 'int'>
Dump int (long) 36231
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 1)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',))
['', 'bin', 'lib-python', '3', 'encodings']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=38, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=38, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 38, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 38, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 38, type <class 'int'>
Dump int (long) 38
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',))
['', 'bin', 'lib-python', '3', 'encodings']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=39, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=39, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 39, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 39, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 39, type <class 'int'>
Dump int (long) 39
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_listdir'
Start b'll_os.ll_os_listdir'((b'/bin/lib-python/3/encodings',))
['', 'bin', 'lib-python', '3', 'encodings']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_listdir'((b'/bin/lib-python/3/encodings',)) complete. Writing back ['aliases.py', 'ascii.py', 'base64_codec.py', 'big5.py', 'big5hkscs.py', 'bz2_codec.py', 'charmap.py', 'cp037.py', 'cp1006.py', 'cp1026.py', 'cp1125.py', 'cp1140.py', 'cp1250.py', 'cp1251.py', 'cp1252.py', 'cp1253.py', 'cp1254.py', 'cp1255.py', 'cp1256.py', 'cp1257.py', 'cp1258.py', 'cp273.py', 'cp424.py', 'cp437.py', 'cp500.py', 'cp65001.py', 'cp720.py', 'cp737.py', 'cp775.py', 'cp850.py', 'cp852.py', 'cp855.py', 'cp856.py', 'cp857.py', 'cp858.py', 'cp860.py', 'cp861.py', 'cp862.py', 'cp863.py', 'cp864.py', 'cp865.py', 'cp866.py', 'cp869.py', 'cp874.py', 'cp875.py', 'cp932.py', 'cp949.py', 'cp950.py', 'euc_jisx0213.py', 'euc_jis_2004.py', 'euc_jp.py', 'euc_kr.py', 'gb18030.py', 'gb2312.py', 'gbk.py', 'hex_codec.py', 'hp_roman8.py', 'hz.py', 'idna.py', 'iso2022_jp.py', 'iso2022_jp_1.py', 'iso2022_jp_2.py', 'iso2022_jp_2004.py', 'iso2022_jp_3.py', 'iso2022_jp_ext.py', 'iso2022_kr.py', 'iso8859_1.py', 'iso8859_10.py', 'iso8859_11.py', 'iso8859_13.py', 'iso8859_14.py', 'iso8859_15.py', 'iso8859_16.py', 'iso8859_2.py', 'iso8859_3.py', 'iso8859_4.py', 'iso8859_5.py', 'iso8859_6.py', 'iso8859_7.py', 'iso8859_8.py', 'iso8859_9.py', 'johab.py', 'koi8_r.py', 'koi8_t.py', 'koi8_u.py', 'kz1048.py', 'latin_1.py', 'mac_arabic.py', 'mac_centeuro.py', 'mac_croatian.py', 'mac_cyrillic.py', 'mac_farsi.py', 'mac_greek.py', 'mac_iceland.py', 'mac_latin2.py', 'mac_roman.py', 'mac_romanian.py', 'mac_turkish.py', 'mbcs.py', 'palmos.py', 'ptcp154.py', 'punycode.py', 'quopri_codec.py', 'raw_unicode_escape.py', 'rot_13.py', 'shift_jis.py', 'shift_jisx0213.py', 'shift_jis_2004.py', 'tis_620.py', 'undefined.py', 'unicode_escape.py', 'unicode_internal.py', 'utf_16.py', 'utf_16_be.py', 'utf_16_le.py', 'utf_32.py', 'utf_32_be.py', 'utf_32_le.py', 'utf_7.py', 'utf_8.py', 'utf_8_sig.py', 'uu_codec.py', 'zlib_codec.py', '__init__.py']
Write message g=<_io.BufferedWriter name=4>, msg=['aliases.py', 'ascii.py', 'base64_codec.py', 'big5.py', 'big5hkscs.py', 'bz2_codec.py', 'charmap.py', 'cp037.py', 'cp1006.py', 'cp1026.py', 'cp1125.py', 'cp1140.py', 'cp1250.py', 'cp1251.py', 'cp1252.py', 'cp1253.py', 'cp1254.py', 'cp1255.py', 'cp1256.py', 'cp1257.py', 'cp1258.py', 'cp273.py', 'cp424.py', 'cp437.py', 'cp500.py', 'cp65001.py', 'cp720.py', 'cp737.py', 'cp775.py', 'cp850.py', 'cp852.py', 'cp855.py', 'cp856.py', 'cp857.py', 'cp858.py', 'cp860.py', 'cp861.py', 'cp862.py', 'cp863.py', 'cp864.py', 'cp865.py', 'cp866.py', 'cp869.py', 'cp874.py', 'cp875.py', 'cp932.py', 'cp949.py', 'cp950.py', 'euc_jisx0213.py', 'euc_jis_2004.py', 'euc_jp.py', 'euc_kr.py', 'gb18030.py', 'gb2312.py', 'gbk.py', 'hex_codec.py', 'hp_roman8.py', 'hz.py', 'idna.py', 'iso2022_jp.py', 'iso2022_jp_1.py', 'iso2022_jp_2.py', 'iso2022_jp_2004.py', 'iso2022_jp_3.py', 'iso2022_jp_ext.py', 'iso2022_kr.py', 'iso8859_1.py', 'iso8859_10.py', 'iso8859_11.py', 'iso8859_13.py', 'iso8859_14.py', 'iso8859_15.py', 'iso8859_16.py', 'iso8859_2.py', 'iso8859_3.py', 'iso8859_4.py', 'iso8859_5.py', 'iso8859_6.py', 'iso8859_7.py', 'iso8859_8.py', 'iso8859_9.py', 'johab.py', 'koi8_r.py', 'koi8_t.py', 'koi8_u.py', 'kz1048.py', 'latin_1.py', 'mac_arabic.py', 'mac_centeuro.py', 'mac_croatian.py', 'mac_cyrillic.py', 'mac_farsi.py', 'mac_greek.py', 'mac_iceland.py', 'mac_latin2.py', 'mac_roman.py', 'mac_romanian.py', 'mac_turkish.py', 'mbcs.py', 'palmos.py', 'ptcp154.py', 'punycode.py', 'quopri_codec.py', 'raw_unicode_escape.py', 'rot_13.py', 'shift_jis.py', 'shift_jisx0213.py', 'shift_jis_2004.py', 'tis_620.py', 'undefined.py', 'unicode_escape.py', 'unicode_internal.py', 'utf_16.py', 'utf_16_be.py', 'utf_16_le.py', 'utf_32.py', 'utf_32_be.py', 'utf_32_le.py', 'utf_7.py', 'utf_8.py', 'utf_8_sig.py', 'uu_codec.py', 'zlib_codec.py', '__init__.py'], resulttype=None
dump ['aliases.py', 'ascii.py', 'base64_codec.py', 'big5.py', 'big5hkscs.py', 'bz2_codec.py', 'charmap.py', 'cp037.py', 'cp1006.py', 'cp1026.py', 'cp1125.py', 'cp1140.py', 'cp1250.py', 'cp1251.py', 'cp1252.py', 'cp1253.py', 'cp1254.py', 'cp1255.py', 'cp1256.py', 'cp1257.py', 'cp1258.py', 'cp273.py', 'cp424.py', 'cp437.py', 'cp500.py', 'cp65001.py', 'cp720.py', 'cp737.py', 'cp775.py', 'cp850.py', 'cp852.py', 'cp855.py', 'cp856.py', 'cp857.py', 'cp858.py', 'cp860.py', 'cp861.py', 'cp862.py', 'cp863.py', 'cp864.py', 'cp865.py', 'cp866.py', 'cp869.py', 'cp874.py', 'cp875.py', 'cp932.py', 'cp949.py', 'cp950.py', 'euc_jisx0213.py', 'euc_jis_2004.py', 'euc_jp.py', 'euc_kr.py', 'gb18030.py', 'gb2312.py', 'gbk.py', 'hex_codec.py', 'hp_roman8.py', 'hz.py', 'idna.py', 'iso2022_jp.py', 'iso2022_jp_1.py', 'iso2022_jp_2.py', 'iso2022_jp_2004.py', 'iso2022_jp_3.py', 'iso2022_jp_ext.py', 'iso2022_kr.py', 'iso8859_1.py', 'iso8859_10.py', 'iso8859_11.py', 'iso8859_13.py', 'iso8859_14.py', 'iso8859_15.py', 'iso8859_16.py', 'iso8859_2.py', 'iso8859_3.py', 'iso8859_4.py', 'iso8859_5.py', 'iso8859_6.py', 'iso8859_7.py', 'iso8859_8.py', 'iso8859_9.py', 'johab.py', 'koi8_r.py', 'koi8_t.py', 'koi8_u.py', 'kz1048.py', 'latin_1.py', 'mac_arabic.py', 'mac_centeuro.py', 'mac_croatian.py', 'mac_cyrillic.py', 'mac_farsi.py', 'mac_greek.py', 'mac_iceland.py', 'mac_latin2.py', 'mac_roman.py', 'mac_romanian.py', 'mac_turkish.py', 'mbcs.py', 'palmos.py', 'ptcp154.py', 'punycode.py', 'quopri_codec.py', 'raw_unicode_escape.py', 'rot_13.py', 'shift_jis.py', 'shift_jisx0213.py', 'shift_jis_2004.py', 'tis_620.py', 'undefined.py', 'unicode_escape.py', 'unicode_internal.py', 'utf_16.py', 'utf_16_be.py', 'utf_16_le.py', 'utf_32.py', 'utf_32_be.py', 'utf_32_le.py', 'utf_7.py', 'utf_8.py', 'utf_8_sig.py', 'uu_codec.py', 'zlib_codec.py', '__init__.py'], type <class 'list'>
dump aliases.py, type <class 'str'>
dump ascii.py, type <class 'str'>
dump base64_codec.py, type <class 'str'>
dump big5.py, type <class 'str'>
dump big5hkscs.py, type <class 'str'>
dump bz2_codec.py, type <class 'str'>
dump charmap.py, type <class 'str'>
dump cp037.py, type <class 'str'>
dump cp1006.py, type <class 'str'>
dump cp1026.py, type <class 'str'>
dump cp1125.py, type <class 'str'>
dump cp1140.py, type <class 'str'>
dump cp1250.py, type <class 'str'>
dump cp1251.py, type <class 'str'>
dump cp1252.py, type <class 'str'>
dump cp1253.py, type <class 'str'>
dump cp1254.py, type <class 'str'>
dump cp1255.py, type <class 'str'>
dump cp1256.py, type <class 'str'>
dump cp1257.py, type <class 'str'>
dump cp1258.py, type <class 'str'>
dump cp273.py, type <class 'str'>
dump cp424.py, type <class 'str'>
dump cp437.py, type <class 'str'>
dump cp500.py, type <class 'str'>
dump cp65001.py, type <class 'str'>
dump cp720.py, type <class 'str'>
dump cp737.py, type <class 'str'>
dump cp775.py, type <class 'str'>
dump cp850.py, type <class 'str'>
dump cp852.py, type <class 'str'>
dump cp855.py, type <class 'str'>
dump cp856.py, type <class 'str'>
dump cp857.py, type <class 'str'>
dump cp858.py, type <class 'str'>
dump cp860.py, type <class 'str'>
dump cp861.py, type <class 'str'>
dump cp862.py, type <class 'str'>
dump cp863.py, type <class 'str'>
dump cp864.py, type <class 'str'>
dump cp865.py, type <class 'str'>
dump cp866.py, type <class 'str'>
dump cp869.py, type <class 'str'>
dump cp874.py, type <class 'str'>
dump cp875.py, type <class 'str'>
dump cp932.py, type <class 'str'>
dump cp949.py, type <class 'str'>
dump cp950.py, type <class 'str'>
dump euc_jisx0213.py, type <class 'str'>
dump euc_jis_2004.py, type <class 'str'>
dump euc_jp.py, type <class 'str'>
dump euc_kr.py, type <class 'str'>
dump gb18030.py, type <class 'str'>
dump gb2312.py, type <class 'str'>
dump gbk.py, type <class 'str'>
dump hex_codec.py, type <class 'str'>
dump hp_roman8.py, type <class 'str'>
dump hz.py, type <class 'str'>
dump idna.py, type <class 'str'>
dump iso2022_jp.py, type <class 'str'>
dump iso2022_jp_1.py, type <class 'str'>
dump iso2022_jp_2.py, type <class 'str'>
dump iso2022_jp_2004.py, type <class 'str'>
dump iso2022_jp_3.py, type <class 'str'>
dump iso2022_jp_ext.py, type <class 'str'>
dump iso2022_kr.py, type <class 'str'>
dump iso8859_1.py, type <class 'str'>
dump iso8859_10.py, type <class 'str'>
dump iso8859_11.py, type <class 'str'>
dump iso8859_13.py, type <class 'str'>
dump iso8859_14.py, type <class 'str'>
dump iso8859_15.py, type <class 'str'>
dump iso8859_16.py, type <class 'str'>
dump iso8859_2.py, type <class 'str'>
dump iso8859_3.py, type <class 'str'>
dump iso8859_4.py, type <class 'str'>
dump iso8859_5.py, type <class 'str'>
dump iso8859_6.py, type <class 'str'>
dump iso8859_7.py, type <class 'str'>
dump iso8859_8.py, type <class 'str'>
dump iso8859_9.py, type <class 'str'>
dump johab.py, type <class 'str'>
dump koi8_r.py, type <class 'str'>
dump koi8_t.py, type <class 'str'>
dump koi8_u.py, type <class 'str'>
dump kz1048.py, type <class 'str'>
dump latin_1.py, type <class 'str'>
dump mac_arabic.py, type <class 'str'>
dump mac_centeuro.py, type <class 'str'>
dump mac_croatian.py, type <class 'str'>
dump mac_cyrillic.py, type <class 'str'>
dump mac_farsi.py, type <class 'str'>
dump mac_greek.py, type <class 'str'>
dump mac_iceland.py, type <class 'str'>
dump mac_latin2.py, type <class 'str'>
dump mac_roman.py, type <class 'str'>
dump mac_romanian.py, type <class 'str'>
dump mac_turkish.py, type <class 'str'>
dump mbcs.py, type <class 'str'>
dump palmos.py, type <class 'str'>
dump ptcp154.py, type <class 'str'>
dump punycode.py, type <class 'str'>
dump quopri_codec.py, type <class 'str'>
dump raw_unicode_escape.py, type <class 'str'>
dump rot_13.py, type <class 'str'>
dump shift_jis.py, type <class 'str'>
dump shift_jisx0213.py, type <class 'str'>
dump shift_jis_2004.py, type <class 'str'>
dump tis_620.py, type <class 'str'>
dump undefined.py, type <class 'str'>
dump unicode_escape.py, type <class 'str'>
dump unicode_internal.py, type <class 'str'>
dump utf_16.py, type <class 'str'>
dump utf_16_be.py, type <class 'str'>
dump utf_16_le.py, type <class 'str'>
dump utf_32.py, type <class 'str'>
dump utf_32_be.py, type <class 'str'>
dump utf_32_le.py, type <class 'str'>
dump utf_7.py, type <class 'str'>
dump utf_8.py, type <class 'str'>
dump utf_8_sig.py, type <class 'str'>
dump uu_codec.py, type <class 'str'>
dump zlib_codec.py, type <class 'str'>
dump __init__.py, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/aliases.py',))
['', 'bin', 'lib-python', '3', 'encodings', 'aliases.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/aliases.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=40, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=15542, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=40, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=15542, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 40, 1, 1, 0, 0, 15542, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 40, 1, 1, 0, 0, 15542, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 40, type <class 'int'>
Dump int (long) 40
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 15542, type <class 'int'>
Dump int (long) 15542
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/aliases.py',))
['', 'bin', 'lib-python', '3', 'encodings', 'aliases.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/aliases.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=41, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=15542, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=41, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=15542, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 41, 1, 1, 0, 0, 15542, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 41, 1, 1, 0, 0, 15542, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 41, type <class 'int'>
Dump int (long) 41
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 15542, type <class 'int'>
Dump int (long) 15542
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/__pycache__/aliases.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', 'encodings', '__pycache__', 'aliases.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings> ['aliases.py', 'ascii.py', 'base64_codec.py', 'big5.py', 'big5hkscs.py', 'bz2_codec.py', 'charmap.py', 'cp037.py', 'cp1006.py', 'cp1026.py', 'cp1125.py', 'cp1140.py', 'cp1250.py', 'cp1251.py', 'cp1252.py', 'cp1253.py', 'cp1254.py', 'cp1255.py', 'cp1256.py', 'cp1257.py', 'cp1258.py', 'cp273.py', 'cp424.py', 'cp437.py', 'cp500.py', 'cp65001.py', 'cp720.py', 'cp737.py', 'cp775.py', 'cp850.py', 'cp852.py', 'cp855.py', 'cp856.py', 'cp857.py', 'cp858.py', 'cp860.py', 'cp861.py', 'cp862.py', 'cp863.py', 'cp864.py', 'cp865.py', 'cp866.py', 'cp869.py', 'cp874.py', 'cp875.py', 'cp932.py', 'cp949.py', 'cp950.py', 'euc_jisx0213.py', 'euc_jis_2004.py', 'euc_jp.py', 'euc_kr.py', 'gb18030.py', 'gb2312.py', 'gbk.py', 'hex_codec.py', 'hp_roman8.py', 'hz.py', 'idna.py', 'iso2022_jp.py', 'iso2022_jp_1.py', 'iso2022_jp_2.py', 'iso2022_jp_2004.py', 'iso2022_jp_3.py', 'iso2022_jp_ext.py', 'iso2022_kr.py', 'iso8859_1.py', 'iso8859_10.py', 'iso8859_11.py', 'iso8859_13.py', 'iso8859_14.py', 'iso8859_15.py', 'iso8859_16.py', 'iso8859_2.py', 'iso8859_3.py', 'iso8859_4.py', 'iso8859_5.py', 'iso8859_6.py', 'iso8859_7.py', 'iso8859_8.py', 'iso8859_9.py', 'johab.py', 'koi8_r.py', 'koi8_t.py', 'koi8_u.py', 'kz1048.py', 'latin_1.py', 'mac_arabic.py', 'mac_centeuro.py', 'mac_croatian.py', 'mac_cyrillic.py', 'mac_farsi.py', 'mac_greek.py', 'mac_iceland.py', 'mac_latin2.py', 'mac_roman.py', 'mac_romanian.py', 'mac_turkish.py', 'mbcs.py', 'palmos.py', 'ptcp154.py', 'punycode.py', 'quopri_codec.py', 'raw_unicode_escape.py', 'rot_13.py', 'shift_jis.py', 'shift_jisx0213.py', 'shift_jis_2004.py', 'tis_620.py', 'undefined.py', 'unicode_escape.py', 'unicode_internal.py', 'utf_16.py', 'utf_16_be.py', 'utf_16_le.py', 'utf_32.py', 'utf_32_be.py', 'utf_32_le.py', 'utf_7.py', 'utf_8.py', 'utf_8_sig.py', 'uu_codec.py', 'zlib_codec.py', '__init__.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/aliases.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'encodings', 'aliases.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/aliases.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=42, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=15542, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=42, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=15542, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 42, 1, 1, 0, 0, 15542, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 42, 1, 1, 0, 0, 15542, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 42, type <class 'int'>
Dump int (long) 42
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 15542, type <class 'int'>
Dump int (long) 15542
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=42, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=15542, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=42, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=15542, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 42, 1, 1, 0, 0, 15542, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 42, 1, 1, 0, 0, 15542, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 42, type <class 'int'>
Dump int (long) 42
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 15542, type <class 'int'>
Dump int (long) 15542
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 15543))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 15543)) complete. Writing back b'""" Encoding Aliases Support\n\n    This module is used by the encodings package search function to\n    map encodings names to module names.\n\n    Note that the search function normalizes the encoding names before\n    doing the lookup, so the mapping will have to map normalized\n    encoding names to module names.\n\n    Contents:\n\n        The following aliases dictionary contains mappings of all IANA\n        character set names for which the Python core library provides\n        codecs. In addition to these, a few Python specific codec\n        aliases have also been added.\n\n"""\naliases = {\n\n    # Please keep this list sorted alphabetically by value !\n\n    # ascii codec\n    \'646\'                : \'ascii\',\n    \'ansi_x3.4_1968\'     : \'ascii\',\n    \'ansi_x3_4_1968\'     : \'ascii\', # some email headers use this non-standard name\n    \'ansi_x3.4_1986\'     : \'ascii\',\n    \'cp367\'              : \'ascii\',\n    \'csascii\'            : \'ascii\',\n    \'ibm367\'             : \'ascii\',\n    \'iso646_us\'          : \'ascii\',\n    \'iso_646.irv_1991\'   : \'ascii\',\n    \'iso_ir_6\'           : \'ascii\',\n    \'us\'                 : \'ascii\',\n    \'us_ascii\'           : \'ascii\',\n\n    # base64_codec codec\n    \'base64\'             : \'base64_codec\',\n    \'base_64\'            : \'base64_codec\',\n\n    # big5 codec\n    \'big5_tw\'            : \'big5\',\n    \'csbig5\'             : \'big5\',\n\n    # big5hkscs codec\n    \'big5_hkscs\'         : \'big5hkscs\',\n    \'hkscs\'              : \'big5hkscs\',\n\n    # bz2_codec codec\n    \'bz2\'                : \'bz2_codec\',\n\n    # cp037 codec\n    \'037\'                : \'cp037\',\n    \'csibm037\'           : \'cp037\',\n    \'ebcdic_cp_ca\'       : \'cp037\',\n    \'ebcdic_cp_nl\'       : \'cp037\',\n    \'ebcdic_cp_us\'       : \'cp037\',\n    \'ebcdic_cp_wt\'       : \'cp037\',\n    \'ibm037\'             : \'cp037\',\n    \'ibm039\'             : \'cp037\',\n\n    # cp1026 codec\n    \'1026\'               : \'cp1026\',\n    \'csibm1026\'          : \'cp1026\',\n    \'ibm1026\'            : \'cp1026\',\n\n    # cp1125 codec\n    \'1125\'                : \'cp1125\',\n    \'ibm1125\'             : \'cp1125\',\n    \'cp866u\'              : \'cp1125\',\n    \'ruscii\'              : \'cp1125\',\n\n    # cp1140 codec\n    \'1140\'               : \'cp1140\',\n    \'ibm1140\'            : \'cp1140\',\n\n    # cp1250 codec\n    \'1250\'               : \'cp1250\',\n    \'windows_1250\'       : \'cp1250\',\n\n    # cp1251 codec\n    \'1251\'               : \'cp1251\',\n    \'windows_1251\'       : \'cp1251\',\n\n    # cp1252 codec\n    \'1252\'               : \'cp1252\',\n    \'windows_1252\'       : \'cp1252\',\n\n    # cp1253 codec\n    \'1253\'               : \'cp1253\',\n    \'windows_1253\'       : \'cp1253\',\n\n    # cp1254 codec\n    \'1254\'               : \'cp1254\',\n    \'windows_1254\'       : \'cp1254\',\n\n    # cp1255 codec\n    \'1255\'               : \'cp1255\',\n    \'windows_1255\'       : \'cp1255\',\n\n    # cp1256 codec\n    \'1256\'               : \'cp1256\',\n    \'windows_1256\'       : \'cp1256\',\n\n    # cp1257 codec\n    \'1257\'               : \'cp1257\',\n    \'windows_1257\'       : \'cp1257\',\n\n    # cp1258 codec\n    \'1258\'               : \'cp1258\',\n    \'windows_1258\'       : \'cp1258\',\n\n    # cp273 codec\n    \'273\'                : \'cp273\',\n    \'ibm273\'             : \'cp273\',\n    \'csibm273\'           : \'cp273\',\n\n    # cp424 codec\n    \'424\'                : \'cp424\',\n    \'csibm424\'           : \'cp424\',\n    \'ebcdic_cp_he\'       : \'cp424\',\n    \'ibm424\'             : \'cp424\',\n\n    # cp437 codec\n    \'437\'                : \'cp437\',\n    \'cspc8codepage437\'   : \'cp437\',\n    \'ibm437\'             : \'cp437\',\n\n    # cp500 codec\n    \'500\'                : \'cp500\',\n    \'csibm500\'           : \'cp500\',\n    \'ebcdic_cp_be\'       : \'cp500\',\n    \'ebcdic_cp_ch\'       : \'cp500\',\n    \'ibm500\'             : \'cp500\',\n\n    # cp775 codec\n    \'775\'                : \'cp775\',\n    \'cspc775baltic\'      : \'cp775\',\n    \'ibm775\'             : \'cp775\',\n\n    # cp850 codec\n    \'850\'                : \'cp850\',\n    \'cspc850multilingual\' : \'cp850\',\n    \'ibm850\'             : \'cp850\',\n\n    # cp852 codec\n    \'852\'                : \'cp852\',\n    \'cspcp852\'           : \'cp852\',\n    \'ibm852\'             : \'cp852\',\n\n    # cp855 codec\n    \'855\'                : \'cp855\',\n    \'csibm855\'           : \'cp855\',\n    \'ibm855\'             : \'cp855\',\n\n    # cp857 codec\n    \'857\'                : \'cp857\',\n    \'csibm857\'           : \'cp857\',\n    \'ibm857\'             : \'cp857\',\n\n    # cp858 codec\n    \'858\'                : \'cp858\',\n    \'csibm858\'           : \'cp858\',\n    \'ibm858\'             : \'cp858\',\n\n    # cp860 codec\n    \'860\'                : \'cp860\',\n    \'csibm860\'           : \'cp860\',\n    \'ibm860\'             : \'cp860\',\n\n    # cp861 codec\n    \'861\'                : \'cp861\',\n    \'cp_is\'              : \'cp861\',\n    \'csibm861\'           : \'cp861\',\n    \'ibm861\'             : \'cp861\',\n\n    # cp862 codec\n    \'862\'                : \'cp862\',\n    \'cspc862latinhebrew\' : \'cp862\',\n    \'ibm862\'             : \'cp862\',\n\n    # cp863 codec\n    \'863\'                : \'cp863\',\n    \'csibm863\'           : \'cp863\',\n    \'ibm863\'             : \'cp863\',\n\n    # cp864 codec\n    \'864\'                : \'cp864\',\n    \'csibm864\'           : \'cp864\',\n    \'ibm864\'             : \'cp864\',\n\n    # cp865 codec\n    \'865\'                : \'cp865\',\n    \'csibm865\'           : \'cp865\',\n    \'ibm865\'             : \'cp865\',\n\n    # cp866 codec\n    \'866\'                : \'cp866\',\n    \'csibm866\'           : \'cp866\',\n    \'ibm866\'             : \'cp866\',\n\n    # cp869 codec\n    \'869\'                : \'cp869\',\n    \'cp_gr\'              : \'cp869\',\n    \'csibm869\'           : \'cp869\',\n    \'ibm869\'             : \'cp869\',\n\n    # cp932 codec\n    \'932\'                : \'cp932\',\n    \'ms932\'              : \'cp932\',\n    \'mskanji\'            : \'cp932\',\n    \'ms_kanji\'           : \'cp932\',\n\n    # cp949 codec\n    \'949\'                : \'cp949\',\n    \'ms949\'              : \'cp949\',\n    \'uhc\'                : \'cp949\',\n\n    # cp950 codec\n    \'950\'                : \'cp950\',\n    \'ms950\'              : \'cp950\',\n\n    # euc_jis_2004 codec\n    \'jisx0213\'           : \'euc_jis_2004\',\n    \'eucjis2004\'         : \'euc_jis_2004\',\n    \'euc_jis2004\'        : \'euc_jis_2004\',\n\n    # euc_jisx0213 codec\n    \'eucjisx0213\'        : \'euc_jisx0213\',\n\n    # euc_jp codec\n    \'eucjp\'              : \'euc_jp\',\n    \'ujis\'               : \'euc_jp\',\n    \'u_jis\'              : \'euc_jp\',\n\n    # euc_kr codec\n    \'euckr\'              : \'euc_kr\',\n    \'korean\'             : \'euc_kr\',\n    \'ksc5601\'            : \'euc_kr\',\n    \'ks_c_5601\'          : \'euc_kr\',\n    \'ks_c_5601_1987\'     : \'euc_kr\',\n    \'ksx1001\'            : \'euc_kr\',\n    \'ks_x_1001\'          : \'euc_kr\',\n\n    # gb18030 codec\n    \'gb18030_2000\'       : \'gb18030\',\n\n    # gb2312 codec\n    \'chinese\'            : \'gb2312\',\n    \'csiso58gb231280\'    : \'gb2312\',\n    \'euc_cn\'             : \'gb2312\',\n    \'euccn\'              : \'gb2312\',\n    \'eucgb2312_cn\'       : \'gb2312\',\n    \'gb2312_1980\'        : \'gb2312\',\n    \'gb2312_80\'          : \'gb2312\',\n    \'iso_ir_58\'          : \'gb2312\',\n\n    # gbk codec\n    \'936\'                : \'gbk\',\n    \'cp936\'              : \'gbk\',\n    \'ms936\'              : \'gbk\',\n\n    # hex_codec codec\n    \'hex\'                : \'hex_codec\',\n\n    # hp_roman8 codec\n    \'roman8\'             : \'hp_roman8\',\n    \'r8\'                 : \'hp_roman8\',\n    \'csHPRoman8\'         : \'hp_roman8\',\n\n    # hz codec\n    \'hzgb\'               : \'hz\',\n    \'hz_gb\'              : \'hz\',\n    \'hz_gb_2312\'         : \'hz\',\n\n    # iso2022_jp codec\n    \'csiso2022jp\'        : \'iso2022_jp\',\n    \'iso2022jp\'          : \'iso2022_jp\',\n    \'iso_2022_jp\'        : \'iso2022_jp\',\n\n    # iso2022_jp_1 codec\n    \'iso2022jp_1\'        : \'iso2022_jp_1\',\n    \'iso_2022_jp_1\'      : \'iso2022_jp_1\',\n\n    # iso2022_jp_2 codec\n    \'iso2022jp_2\'        : \'iso2022_jp_2\',\n    \'iso_2022_jp_2\'      : \'iso2022_jp_2\',\n\n    # iso2022_jp_2004 codec\n    \'iso_2022_jp_2004\'   : \'iso2022_jp_2004\',\n    \'iso2022jp_2004\'     : \'iso2022_jp_2004\',\n\n    # iso2022_jp_3 codec\n    \'iso2022jp_3\'        : \'iso2022_jp_3\',\n    \'iso_2022_jp_3\'      : \'iso2022_jp_3\',\n\n    # iso2022_jp_ext codec\n    \'iso2022jp_ext\'      : \'iso2022_jp_ext\',\n    \'iso_2022_jp_ext\'    : \'iso2022_jp_ext\',\n\n    # iso2022_kr codec\n    \'csiso2022kr\'        : \'iso2022_kr\',\n    \'iso2022kr\'          : \'iso2022_kr\',\n    \'iso_2022_kr\'        : \'iso2022_kr\',\n\n    # iso8859_10 codec\n    \'csisolatin6\'        : \'iso8859_10\',\n    \'iso_8859_10\'        : \'iso8859_10\',\n    \'iso_8859_10_1992\'   : \'iso8859_10\',\n    \'iso_ir_157\'         : \'iso8859_10\',\n    \'l6\'                 : \'iso8859_10\',\n    \'latin6\'             : \'iso8859_10\',\n\n    # iso8859_11 codec\n    \'thai\'               : \'iso8859_11\',\n    \'iso_8859_11\'        : \'iso8859_11\',\n    \'iso_8859_11_2001\'   : \'iso8859_11\',\n\n    # iso8859_13 codec\n    \'iso_8859_13\'        : \'iso8859_13\',\n    \'l7\'                 : \'iso8859_13\',\n    \'latin7\'             : \'iso8859_13\',\n\n    # iso8859_14 codec\n    \'iso_8859_14\'        : \'iso8859_14\',\n    \'iso_8859_14_1998\'   : \'iso8859_14\',\n    \'iso_celtic\'         : \'iso8859_14\',\n    \'iso_ir_199\'         : \'iso8859_14\',\n    \'l8\'                 : \'iso8859_14\',\n    \'latin8\'             : \'iso8859_14\',\n\n    # iso8859_15 codec\n    \'iso_8859_15\'        : \'iso8859_15\',\n    \'l9\'                 : \'iso8859_15\',\n    \'latin9\'             : \'iso8859_15\',\n\n    # iso8859_16 codec\n    \'iso_8859_16\'        : \'iso8859_16\',\n    \'iso_8859_16_2001\'   : \'iso8859_16\',\n    \'iso_ir_226\'         : \'iso8859_16\',\n    \'l10\'                : \'iso8859_16\',\n    \'latin10\'            : \'iso8859_16\',\n\n    # iso8859_2 codec\n    \'csisolatin2\'        : \'iso8859_2\',\n    \'iso_8859_2\'         : \'iso8859_2\',\n    \'iso_8859_2_1987\'    : \'iso8859_2\',\n    \'iso_ir_101\'         : \'iso8859_2\',\n    \'l2\'                 : \'iso8859_2\',\n    \'latin2\'             : \'iso8859_2\',\n\n    # iso8859_3 codec\n    \'csisolatin3\'        : \'iso8859_3\',\n    \'iso_8859_3\'         : \'iso8859_3\',\n    \'iso_8859_3_1988\'    : \'iso8859_3\',\n    \'iso_ir_109\'         : \'iso8859_3\',\n    \'l3\'                 : \'iso8859_3\',\n    \'latin3\'             : \'iso8859_3\',\n\n    # iso8859_4 codec\n    \'csisolatin4\'        : \'iso8859_4\',\n    \'iso_8859_4\'         : \'iso8859_4\',\n    \'iso_8859_4_1988\'    : \'iso8859_4\',\n    \'iso_ir_110\'         : \'iso8859_4\',\n    \'l4\'                 : \'iso8859_4\',\n    \'latin4\'             : \'iso8859_4\',\n\n    # iso8859_5 codec\n    \'csisolatincyrillic\' : \'iso8859_5\',\n    \'cyrillic\'           : \'iso8859_5\',\n    \'iso_8859_5\'         : \'iso8859_5\',\n    \'iso_8859_5_1988\'    : \'iso8859_5\',\n    \'iso_ir_144\'         : \'iso8859_5\',\n\n    # iso8859_6 codec\n    \'arabic\'             : \'iso8859_6\',\n    \'asmo_708\'           : \'iso8859_6\',\n    \'csisolatinarabic\'   : \'iso8859_6\',\n    \'ecma_114\'           : \'iso8859_6\',\n    \'iso_8859_6\'         : \'iso8859_6\',\n    \'iso_8859_6_1987\'    : \'iso8859_6\',\n    \'iso_ir_127\'         : \'iso8859_6\',\n\n    # iso8859_7 codec\n    \'csisolatingreek\'    : \'iso8859_7\',\n    \'ecma_118\'           : \'iso8859_7\',\n    \'elot_928\'           : \'iso8859_7\',\n    \'greek\'              : \'iso8859_7\',\n    \'greek8\'             : \'iso8859_7\',\n    \'iso_8859_7\'         : \'iso8859_7\',\n    \'iso_8859_7_1987\'    : \'iso8859_7\',\n    \'iso_ir_126\'         : \'iso8859_7\',\n\n    # iso8859_8 codec\n    \'csisolatinhebrew\'   : \'iso8859_8\',\n    \'hebrew\'             : \'iso8859_8\',\n    \'iso_8859_8\'         : \'iso8859_8\',\n    \'iso_8859_8_1988\'    : \'iso8859_8\',\n    \'iso_ir_138\'         : \'iso8859_8\',\n\n    # iso8859_9 codec\n    \'csisolatin5\'        : \'iso8859_9\',\n    \'iso_8859_9\'         : \'iso8859_9\',\n    \'iso_8859_9_1989\'    : \'iso8859_9\',\n    \'iso_ir_148\'         : \'iso8859_9\',\n    \'l5\'                 : \'iso8859_9\',\n    \'latin5\'             : \'iso8859_9\',\n\n    # johab codec\n    \'cp1361\'             : \'johab\',\n    \'ms1361\'             : \'johab\',\n\n    # koi8_r codec\n    \'cskoi8r\'            : \'koi8_r\',\n\n    # kz1048 codec\n    \'kz_1048\'           : \'kz1048\',\n    \'rk1048\'            : \'kz1048\',\n    \'strk1048_2002\'     : \'kz1048\',\n\n    # latin_1 codec\n    #\n    # Note that the latin_1 codec is implemented internally in C and a\n    # lot faster than the charmap codec iso8859_1 which uses the same\n    # encoding. This is why we discourage the use of the iso8859_1\n    # codec and alias it to latin_1 instead.\n    #\n    \'8859\'               : \'latin_1\',\n    \'cp819\'              : \'latin_1\',\n    \'csisolatin1\'        : \'latin_1\',\n    \'ibm819\'             : \'latin_1\',\n    \'iso8859\'            : \'latin_1\',\n    \'iso8859_1\'          : \'latin_1\',\n    \'iso_8859_1\'         : \'latin_1\',\n    \'iso_8859_1_1987\'    : \'latin_1\',\n    \'iso_ir_100\'         : \'latin_1\',\n    \'l1\'                 : \'latin_1\',\n    \'latin\'              : \'latin_1\',\n    \'latin1\'             : \'latin_1\',\n\n    # mac_cyrillic codec\n    \'maccyrillic\'        : \'mac_cyrillic\',\n\n    # mac_greek codec\n    \'macgreek\'           : \'mac_greek\',\n\n    # mac_iceland codec\n    \'maciceland\'         : \'mac_iceland\',\n\n    # mac_latin2 codec\n    \'maccentraleurope\'   : \'mac_latin2\',\n    \'maclatin2\'          : \'mac_latin2\',\n\n    # mac_roman codec\n    \'macintosh\'          : \'mac_roman\',\n    \'macroman\'           : \'mac_roman\',\n\n    # mac_turkish codec\n    \'macturkish\'         : \'mac_turkish\',\n\n    # mbcs codec\n    \'dbcs\'               : \'mbcs\',\n\n    # ptcp154 codec\n    \'csptcp154\'          : \'ptcp154\',\n    \'pt154\'              : \'ptcp154\',\n    \'cp154\'              : \'ptcp154\',\n    \'cyrillic_asian\'     : \'ptcp154\',\n\n    # quopri_codec codec\n    \'quopri\'             : \'quopri_codec\',\n    \'quoted_printable\'   : \'quopri_codec\',\n    \'quotedprintable\'    : \'quopri_codec\',\n\n    # rot_13 codec\n    \'rot13\'              : \'rot_13\',\n\n    # shift_jis codec\n    \'csshiftjis\'         : \'shift_jis\',\n    \'shiftjis\'           : \'shift_jis\',\n    \'sjis\'               : \'shift_jis\',\n    \'s_jis\'              : \'shift_jis\',\n\n    # shift_jis_2004 codec\n    \'shiftjis2004\'       : \'shift_jis_2004\',\n    \'sjis_2004\'          : \'shift_jis_2004\',\n    \'s_jis_2004\'         : \'shift_jis_2004\',\n\n    # shift_jisx0213 codec\n    \'shiftjisx0213\'      : \'shift_jisx0213\',\n    \'sjisx0213\'          : \'shift_jisx0213\',\n    \'s_jisx0213\'         : \'shift_jisx0213\',\n\n    # tactis codec\n    \'tis260\'             : \'tactis\',\n\n    # tis_620 codec\n    \'tis620\'             : \'tis_620\',\n    \'tis_620_0\'          : \'tis_620\',\n    \'tis_620_2529_0\'     : \'tis_620\',\n    \'tis_620_2529_1\'     : \'tis_620\',\n    \'iso_ir_166\'         : \'tis_620\',\n\n    # utf_16 codec\n    \'u16\'                : \'utf_16\',\n    \'utf16\'              : \'utf_16\',\n\n    # utf_16_be codec\n    \'unicodebigunmarked\' : \'utf_16_be\',\n    \'utf_16be\'           : \'utf_16_be\',\n\n    # utf_16_le codec\n    \'unicodelittleunmarked\' : \'utf_16_le\',\n    \'utf_16le\'           : \'utf_16_le\',\n\n    # utf_32 codec\n    \'u32\'                : \'utf_32\',\n    \'utf32\'              : \'utf_32\',\n\n    # utf_32_be codec\n    \'utf_32be\'           : \'utf_32_be\',\n\n    # utf_32_le codec\n    \'utf_32le\'           : \'utf_32_le\',\n\n    # utf_7 codec\n    \'u7\'                 : \'utf_7\',\n    \'utf7\'               : \'utf_7\',\n    \'unicode_1_1_utf_7\'  : \'utf_7\',\n\n    # utf_8 codec\n    \'u8\'                 : \'utf_8\',\n    \'utf\'                : \'utf_8\',\n    \'utf8\'               : \'utf_8\',\n    \'utf8_ucs2\'          : \'utf_8\',\n    \'utf8_ucs4\'          : \'utf_8\',\n\n    # uu_codec codec\n    \'uu\'                 : \'uu_codec\',\n\n    # zlib_codec codec\n    \'zip\'                : \'zlib_codec\',\n    \'zlib\'               : \'zlib_codec\',\n\n    # temporary mac CJK aliases, will be replaced by proper codecs in 3.1\n    \'x_mac_japanese\'      : \'shift_jis\',\n    \'x_mac_korean\'        : \'euc_kr\',\n    \'x_mac_simp_chinese\'  : \'gb2312\',\n    \'x_mac_trad_chinese\'  : \'big5\',\n}\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'""" Encoding Aliases Support\n\n    This module is used by the encodings package search function to\n    map encodings names to module names.\n\n    Note that the search function normalizes the encoding names before\n    doing the lookup, so the mapping will have to map normalized\n    encoding names to module names.\n\n    Contents:\n\n        The following aliases dictionary contains mappings of all IANA\n        character set names for which the Python core library provides\n        codecs. In addition to these, a few Python specific codec\n        aliases have also been added.\n\n"""\naliases = {\n\n    # Please keep this list sorted alphabetically by value !\n\n    # ascii codec\n    \'646\'                : \'ascii\',\n    \'ansi_x3.4_1968\'     : \'ascii\',\n    \'ansi_x3_4_1968\'     : \'ascii\', # some email headers use this non-standard name\n    \'ansi_x3.4_1986\'     : \'ascii\',\n    \'cp367\'              : \'ascii\',\n    \'csascii\'            : \'ascii\',\n    \'ibm367\'             : \'ascii\',\n    \'iso646_us\'          : \'ascii\',\n    \'iso_646.irv_1991\'   : \'ascii\',\n    \'iso_ir_6\'           : \'ascii\',\n    \'us\'                 : \'ascii\',\n    \'us_ascii\'           : \'ascii\',\n\n    # base64_codec codec\n    \'base64\'             : \'base64_codec\',\n    \'base_64\'            : \'base64_codec\',\n\n    # big5 codec\n    \'big5_tw\'            : \'big5\',\n    \'csbig5\'             : \'big5\',\n\n    # big5hkscs codec\n    \'big5_hkscs\'         : \'big5hkscs\',\n    \'hkscs\'              : \'big5hkscs\',\n\n    # bz2_codec codec\n    \'bz2\'                : \'bz2_codec\',\n\n    # cp037 codec\n    \'037\'                : \'cp037\',\n    \'csibm037\'           : \'cp037\',\n    \'ebcdic_cp_ca\'       : \'cp037\',\n    \'ebcdic_cp_nl\'       : \'cp037\',\n    \'ebcdic_cp_us\'       : \'cp037\',\n    \'ebcdic_cp_wt\'       : \'cp037\',\n    \'ibm037\'             : \'cp037\',\n    \'ibm039\'             : \'cp037\',\n\n    # cp1026 codec\n    \'1026\'               : \'cp1026\',\n    \'csibm1026\'          : \'cp1026\',\n    \'ibm1026\'            : \'cp1026\',\n\n    # cp1125 codec\n    \'1125\'                : \'cp1125\',\n    \'ibm1125\'             : \'cp1125\',\n    \'cp866u\'              : \'cp1125\',\n    \'ruscii\'              : \'cp1125\',\n\n    # cp1140 codec\n    \'1140\'               : \'cp1140\',\n    \'ibm1140\'            : \'cp1140\',\n\n    # cp1250 codec\n    \'1250\'               : \'cp1250\',\n    \'windows_1250\'       : \'cp1250\',\n\n    # cp1251 codec\n    \'1251\'               : \'cp1251\',\n    \'windows_1251\'       : \'cp1251\',\n\n    # cp1252 codec\n    \'1252\'               : \'cp1252\',\n    \'windows_1252\'       : \'cp1252\',\n\n    # cp1253 codec\n    \'1253\'               : \'cp1253\',\n    \'windows_1253\'       : \'cp1253\',\n\n    # cp1254 codec\n    \'1254\'               : \'cp1254\',\n    \'windows_1254\'       : \'cp1254\',\n\n    # cp1255 codec\n    \'1255\'               : \'cp1255\',\n    \'windows_1255\'       : \'cp1255\',\n\n    # cp1256 codec\n    \'1256\'               : \'cp1256\',\n    \'windows_1256\'       : \'cp1256\',\n\n    # cp1257 codec\n    \'1257\'               : \'cp1257\',\n    \'windows_1257\'       : \'cp1257\',\n\n    # cp1258 codec\n    \'1258\'               : \'cp1258\',\n    \'windows_1258\'       : \'cp1258\',\n\n    # cp273 codec\n    \'273\'                : \'cp273\',\n    \'ibm273\'             : \'cp273\',\n    \'csibm273\'           : \'cp273\',\n\n    # cp424 codec\n    \'424\'                : \'cp424\',\n    \'csibm424\'           : \'cp424\',\n    \'ebcdic_cp_he\'       : \'cp424\',\n    \'ibm424\'             : \'cp424\',\n\n    # cp437 codec\n    \'437\'                : \'cp437\',\n    \'cspc8codepage437\'   : \'cp437\',\n    \'ibm437\'             : \'cp437\',\n\n    # cp500 codec\n    \'500\'                : \'cp500\',\n    \'csibm500\'           : \'cp500\',\n    \'ebcdic_cp_be\'       : \'cp500\',\n    \'ebcdic_cp_ch\'       : \'cp500\',\n    \'ibm500\'             : \'cp500\',\n\n    # cp775 codec\n    \'775\'                : \'cp775\',\n    \'cspc775baltic\'      : \'cp775\',\n    \'ibm775\'             : \'cp775\',\n\n    # cp850 codec\n    \'850\'                : \'cp850\',\n    \'cspc850multilingual\' : \'cp850\',\n    \'ibm850\'             : \'cp850\',\n\n    # cp852 codec\n    \'852\'                : \'cp852\',\n    \'cspcp852\'           : \'cp852\',\n    \'ibm852\'             : \'cp852\',\n\n    # cp855 codec\n    \'855\'                : \'cp855\',\n    \'csibm855\'           : \'cp855\',\n    \'ibm855\'             : \'cp855\',\n\n    # cp857 codec\n    \'857\'                : \'cp857\',\n    \'csibm857\'           : \'cp857\',\n    \'ibm857\'             : \'cp857\',\n\n    # cp858 codec\n    \'858\'                : \'cp858\',\n    \'csibm858\'           : \'cp858\',\n    \'ibm858\'             : \'cp858\',\n\n    # cp860 codec\n    \'860\'                : \'cp860\',\n    \'csibm860\'           : \'cp860\',\n    \'ibm860\'             : \'cp860\',\n\n    # cp861 codec\n    \'861\'                : \'cp861\',\n    \'cp_is\'              : \'cp861\',\n    \'csibm861\'           : \'cp861\',\n    \'ibm861\'             : \'cp861\',\n\n    # cp862 codec\n    \'862\'                : \'cp862\',\n    \'cspc862latinhebrew\' : \'cp862\',\n    \'ibm862\'             : \'cp862\',\n\n    # cp863 codec\n    \'863\'                : \'cp863\',\n    \'csibm863\'           : \'cp863\',\n    \'ibm863\'             : \'cp863\',\n\n    # cp864 codec\n    \'864\'                : \'cp864\',\n    \'csibm864\'           : \'cp864\',\n    \'ibm864\'             : \'cp864\',\n\n    # cp865 codec\n    \'865\'                : \'cp865\',\n    \'csibm865\'           : \'cp865\',\n    \'ibm865\'             : \'cp865\',\n\n    # cp866 codec\n    \'866\'                : \'cp866\',\n    \'csibm866\'           : \'cp866\',\n    \'ibm866\'             : \'cp866\',\n\n    # cp869 codec\n    \'869\'                : \'cp869\',\n    \'cp_gr\'              : \'cp869\',\n    \'csibm869\'           : \'cp869\',\n    \'ibm869\'             : \'cp869\',\n\n    # cp932 codec\n    \'932\'                : \'cp932\',\n    \'ms932\'              : \'cp932\',\n    \'mskanji\'            : \'cp932\',\n    \'ms_kanji\'           : \'cp932\',\n\n    # cp949 codec\n    \'949\'                : \'cp949\',\n    \'ms949\'              : \'cp949\',\n    \'uhc\'                : \'cp949\',\n\n    # cp950 codec\n    \'950\'                : \'cp950\',\n    \'ms950\'              : \'cp950\',\n\n    # euc_jis_2004 codec\n    \'jisx0213\'           : \'euc_jis_2004\',\n    \'eucjis2004\'         : \'euc_jis_2004\',\n    \'euc_jis2004\'        : \'euc_jis_2004\',\n\n    # euc_jisx0213 codec\n    \'eucjisx0213\'        : \'euc_jisx0213\',\n\n    # euc_jp codec\n    \'eucjp\'              : \'euc_jp\',\n    \'ujis\'               : \'euc_jp\',\n    \'u_jis\'              : \'euc_jp\',\n\n    # euc_kr codec\n    \'euckr\'              : \'euc_kr\',\n    \'korean\'             : \'euc_kr\',\n    \'ksc5601\'            : \'euc_kr\',\n    \'ks_c_5601\'          : \'euc_kr\',\n    \'ks_c_5601_1987\'     : \'euc_kr\',\n    \'ksx1001\'            : \'euc_kr\',\n    \'ks_x_1001\'          : \'euc_kr\',\n\n    # gb18030 codec\n    \'gb18030_2000\'       : \'gb18030\',\n\n    # gb2312 codec\n    \'chinese\'            : \'gb2312\',\n    \'csiso58gb231280\'    : \'gb2312\',\n    \'euc_cn\'             : \'gb2312\',\n    \'euccn\'              : \'gb2312\',\n    \'eucgb2312_cn\'       : \'gb2312\',\n    \'gb2312_1980\'        : \'gb2312\',\n    \'gb2312_80\'          : \'gb2312\',\n    \'iso_ir_58\'          : \'gb2312\',\n\n    # gbk codec\n    \'936\'                : \'gbk\',\n    \'cp936\'              : \'gbk\',\n    \'ms936\'              : \'gbk\',\n\n    # hex_codec codec\n    \'hex\'                : \'hex_codec\',\n\n    # hp_roman8 codec\n    \'roman8\'             : \'hp_roman8\',\n    \'r8\'                 : \'hp_roman8\',\n    \'csHPRoman8\'         : \'hp_roman8\',\n\n    # hz codec\n    \'hzgb\'               : \'hz\',\n    \'hz_gb\'              : \'hz\',\n    \'hz_gb_2312\'         : \'hz\',\n\n    # iso2022_jp codec\n    \'csiso2022jp\'        : \'iso2022_jp\',\n    \'iso2022jp\'          : \'iso2022_jp\',\n    \'iso_2022_jp\'        : \'iso2022_jp\',\n\n    # iso2022_jp_1 codec\n    \'iso2022jp_1\'        : \'iso2022_jp_1\',\n    \'iso_2022_jp_1\'      : \'iso2022_jp_1\',\n\n    # iso2022_jp_2 codec\n    \'iso2022jp_2\'        : \'iso2022_jp_2\',\n    \'iso_2022_jp_2\'      : \'iso2022_jp_2\',\n\n    # iso2022_jp_2004 codec\n    \'iso_2022_jp_2004\'   : \'iso2022_jp_2004\',\n    \'iso2022jp_2004\'     : \'iso2022_jp_2004\',\n\n    # iso2022_jp_3 codec\n    \'iso2022jp_3\'        : \'iso2022_jp_3\',\n    \'iso_2022_jp_3\'      : \'iso2022_jp_3\',\n\n    # iso2022_jp_ext codec\n    \'iso2022jp_ext\'      : \'iso2022_jp_ext\',\n    \'iso_2022_jp_ext\'    : \'iso2022_jp_ext\',\n\n    # iso2022_kr codec\n    \'csiso2022kr\'        : \'iso2022_kr\',\n    \'iso2022kr\'          : \'iso2022_kr\',\n    \'iso_2022_kr\'        : \'iso2022_kr\',\n\n    # iso8859_10 codec\n    \'csisolatin6\'        : \'iso8859_10\',\n    \'iso_8859_10\'        : \'iso8859_10\',\n    \'iso_8859_10_1992\'   : \'iso8859_10\',\n    \'iso_ir_157\'         : \'iso8859_10\',\n    \'l6\'                 : \'iso8859_10\',\n    \'latin6\'             : \'iso8859_10\',\n\n    # iso8859_11 codec\n    \'thai\'               : \'iso8859_11\',\n    \'iso_8859_11\'        : \'iso8859_11\',\n    \'iso_8859_11_2001\'   : \'iso8859_11\',\n\n    # iso8859_13 codec\n    \'iso_8859_13\'        : \'iso8859_13\',\n    \'l7\'                 : \'iso8859_13\',\n    \'latin7\'             : \'iso8859_13\',\n\n    # iso8859_14 codec\n    \'iso_8859_14\'        : \'iso8859_14\',\n    \'iso_8859_14_1998\'   : \'iso8859_14\',\n    \'iso_celtic\'         : \'iso8859_14\',\n    \'iso_ir_199\'         : \'iso8859_14\',\n    \'l8\'                 : \'iso8859_14\',\n    \'latin8\'             : \'iso8859_14\',\n\n    # iso8859_15 codec\n    \'iso_8859_15\'        : \'iso8859_15\',\n    \'l9\'                 : \'iso8859_15\',\n    \'latin9\'             : \'iso8859_15\',\n\n    # iso8859_16 codec\n    \'iso_8859_16\'        : \'iso8859_16\',\n    \'iso_8859_16_2001\'   : \'iso8859_16\',\n    \'iso_ir_226\'         : \'iso8859_16\',\n    \'l10\'                : \'iso8859_16\',\n    \'latin10\'            : \'iso8859_16\',\n\n    # iso8859_2 codec\n    \'csisolatin2\'        : \'iso8859_2\',\n    \'iso_8859_2\'         : \'iso8859_2\',\n    \'iso_8859_2_1987\'    : \'iso8859_2\',\n    \'iso_ir_101\'         : \'iso8859_2\',\n    \'l2\'                 : \'iso8859_2\',\n    \'latin2\'             : \'iso8859_2\',\n\n    # iso8859_3 codec\n    \'csisolatin3\'        : \'iso8859_3\',\n    \'iso_8859_3\'         : \'iso8859_3\',\n    \'iso_8859_3_1988\'    : \'iso8859_3\',\n    \'iso_ir_109\'         : \'iso8859_3\',\n    \'l3\'                 : \'iso8859_3\',\n    \'latin3\'             : \'iso8859_3\',\n\n    # iso8859_4 codec\n    \'csisolatin4\'        : \'iso8859_4\',\n    \'iso_8859_4\'         : \'iso8859_4\',\n    \'iso_8859_4_1988\'    : \'iso8859_4\',\n    \'iso_ir_110\'         : \'iso8859_4\',\n    \'l4\'                 : \'iso8859_4\',\n    \'latin4\'             : \'iso8859_4\',\n\n    # iso8859_5 codec\n    \'csisolatincyrillic\' : \'iso8859_5\',\n    \'cyrillic\'           : \'iso8859_5\',\n    \'iso_8859_5\'         : \'iso8859_5\',\n    \'iso_8859_5_1988\'    : \'iso8859_5\',\n    \'iso_ir_144\'         : \'iso8859_5\',\n\n    # iso8859_6 codec\n    \'arabic\'             : \'iso8859_6\',\n    \'asmo_708\'           : \'iso8859_6\',\n    \'csisolatinarabic\'   : \'iso8859_6\',\n    \'ecma_114\'           : \'iso8859_6\',\n    \'iso_8859_6\'         : \'iso8859_6\',\n    \'iso_8859_6_1987\'    : \'iso8859_6\',\n    \'iso_ir_127\'         : \'iso8859_6\',\n\n    # iso8859_7 codec\n    \'csisolatingreek\'    : \'iso8859_7\',\n    \'ecma_118\'           : \'iso8859_7\',\n    \'elot_928\'           : \'iso8859_7\',\n    \'greek\'              : \'iso8859_7\',\n    \'greek8\'             : \'iso8859_7\',\n    \'iso_8859_7\'         : \'iso8859_7\',\n    \'iso_8859_7_1987\'    : \'iso8859_7\',\n    \'iso_ir_126\'         : \'iso8859_7\',\n\n    # iso8859_8 codec\n    \'csisolatinhebrew\'   : \'iso8859_8\',\n    \'hebrew\'             : \'iso8859_8\',\n    \'iso_8859_8\'         : \'iso8859_8\',\n    \'iso_8859_8_1988\'    : \'iso8859_8\',\n    \'iso_ir_138\'         : \'iso8859_8\',\n\n    # iso8859_9 codec\n    \'csisolatin5\'        : \'iso8859_9\',\n    \'iso_8859_9\'         : \'iso8859_9\',\n    \'iso_8859_9_1989\'    : \'iso8859_9\',\n    \'iso_ir_148\'         : \'iso8859_9\',\n    \'l5\'                 : \'iso8859_9\',\n    \'latin5\'             : \'iso8859_9\',\n\n    # johab codec\n    \'cp1361\'             : \'johab\',\n    \'ms1361\'             : \'johab\',\n\n    # koi8_r codec\n    \'cskoi8r\'            : \'koi8_r\',\n\n    # kz1048 codec\n    \'kz_1048\'           : \'kz1048\',\n    \'rk1048\'            : \'kz1048\',\n    \'strk1048_2002\'     : \'kz1048\',\n\n    # latin_1 codec\n    #\n    # Note that the latin_1 codec is implemented internally in C and a\n    # lot faster than the charmap codec iso8859_1 which uses the same\n    # encoding. This is why we discourage the use of the iso8859_1\n    # codec and alias it to latin_1 instead.\n    #\n    \'8859\'               : \'latin_1\',\n    \'cp819\'              : \'latin_1\',\n    \'csisolatin1\'        : \'latin_1\',\n    \'ibm819\'             : \'latin_1\',\n    \'iso8859\'            : \'latin_1\',\n    \'iso8859_1\'          : \'latin_1\',\n    \'iso_8859_1\'         : \'latin_1\',\n    \'iso_8859_1_1987\'    : \'latin_1\',\n    \'iso_ir_100\'         : \'latin_1\',\n    \'l1\'                 : \'latin_1\',\n    \'latin\'              : \'latin_1\',\n    \'latin1\'             : \'latin_1\',\n\n    # mac_cyrillic codec\n    \'maccyrillic\'        : \'mac_cyrillic\',\n\n    # mac_greek codec\n    \'macgreek\'           : \'mac_greek\',\n\n    # mac_iceland codec\n    \'maciceland\'         : \'mac_iceland\',\n\n    # mac_latin2 codec\n    \'maccentraleurope\'   : \'mac_latin2\',\n    \'maclatin2\'          : \'mac_latin2\',\n\n    # mac_roman codec\n    \'macintosh\'          : \'mac_roman\',\n    \'macroman\'           : \'mac_roman\',\n\n    # mac_turkish codec\n    \'macturkish\'         : \'mac_turkish\',\n\n    # mbcs codec\n    \'dbcs\'               : \'mbcs\',\n\n    # ptcp154 codec\n    \'csptcp154\'          : \'ptcp154\',\n    \'pt154\'              : \'ptcp154\',\n    \'cp154\'              : \'ptcp154\',\n    \'cyrillic_asian\'     : \'ptcp154\',\n\n    # quopri_codec codec\n    \'quopri\'             : \'quopri_codec\',\n    \'quoted_printable\'   : \'quopri_codec\',\n    \'quotedprintable\'    : \'quopri_codec\',\n\n    # rot_13 codec\n    \'rot13\'              : \'rot_13\',\n\n    # shift_jis codec\n    \'csshiftjis\'         : \'shift_jis\',\n    \'shiftjis\'           : \'shift_jis\',\n    \'sjis\'               : \'shift_jis\',\n    \'s_jis\'              : \'shift_jis\',\n\n    # shift_jis_2004 codec\n    \'shiftjis2004\'       : \'shift_jis_2004\',\n    \'sjis_2004\'          : \'shift_jis_2004\',\n    \'s_jis_2004\'         : \'shift_jis_2004\',\n\n    # shift_jisx0213 codec\n    \'shiftjisx0213\'      : \'shift_jisx0213\',\n    \'sjisx0213\'          : \'shift_jisx0213\',\n    \'s_jisx0213\'         : \'shift_jisx0213\',\n\n    # tactis codec\n    \'tis260\'             : \'tactis\',\n\n    # tis_620 codec\n    \'tis620\'             : \'tis_620\',\n    \'tis_620_0\'          : \'tis_620\',\n    \'tis_620_2529_0\'     : \'tis_620\',\n    \'tis_620_2529_1\'     : \'tis_620\',\n    \'iso_ir_166\'         : \'tis_620\',\n\n    # utf_16 codec\n    \'u16\'                : \'utf_16\',\n    \'utf16\'              : \'utf_16\',\n\n    # utf_16_be codec\n    \'unicodebigunmarked\' : \'utf_16_be\',\n    \'utf_16be\'           : \'utf_16_be\',\n\n    # utf_16_le codec\n    \'unicodelittleunmarked\' : \'utf_16_le\',\n    \'utf_16le\'           : \'utf_16_le\',\n\n    # utf_32 codec\n    \'u32\'                : \'utf_32\',\n    \'utf32\'              : \'utf_32\',\n\n    # utf_32_be codec\n    \'utf_32be\'           : \'utf_32_be\',\n\n    # utf_32_le codec\n    \'utf_32le\'           : \'utf_32_le\',\n\n    # utf_7 codec\n    \'u7\'                 : \'utf_7\',\n    \'utf7\'               : \'utf_7\',\n    \'unicode_1_1_utf_7\'  : \'utf_7\',\n\n    # utf_8 codec\n    \'u8\'                 : \'utf_8\',\n    \'utf\'                : \'utf_8\',\n    \'utf8\'               : \'utf_8\',\n    \'utf8_ucs2\'          : \'utf_8\',\n    \'utf8_ucs4\'          : \'utf_8\',\n\n    # uu_codec codec\n    \'uu\'                 : \'uu_codec\',\n\n    # zlib_codec codec\n    \'zip\'                : \'zlib_codec\',\n    \'zlib\'               : \'zlib_codec\',\n\n    # temporary mac CJK aliases, will be replaced by proper codecs in 3.1\n    \'x_mac_japanese\'      : \'shift_jis\',\n    \'x_mac_korean\'        : \'euc_kr\',\n    \'x_mac_simp_chinese\'  : \'gb2312\',\n    \'x_mac_trad_chinese\'  : \'big5\',\n}\n', resulttype=None
dump b'""" Encoding Aliases Support\n\n    This module is used by the encodings package search function to\n    map encodings names to module names.\n\n    Note that the search function normalizes the encoding names before\n    doing the lookup, so the mapping will have to map normalized\n    encoding names to module names.\n\n    Contents:\n\n        The following aliases dictionary contains mappings of all IANA\n        character set names for which the Python core library provides\n        codecs. In addition to these, a few Python specific codec\n        aliases have also been added.\n\n"""\naliases = {\n\n    # Please keep this list sorted alphabetically by value !\n\n    # ascii codec\n    \'646\'                : \'ascii\',\n    \'ansi_x3.4_1968\'     : \'ascii\',\n    \'ansi_x3_4_1968\'     : \'ascii\', # some email headers use this non-standard name\n    \'ansi_x3.4_1986\'     : \'ascii\',\n    \'cp367\'              : \'ascii\',\n    \'csascii\'            : \'ascii\',\n    \'ibm367\'             : \'ascii\',\n    \'iso646_us\'          : \'ascii\',\n    \'iso_646.irv_1991\'   : \'ascii\',\n    \'iso_ir_6\'           : \'ascii\',\n    \'us\'                 : \'ascii\',\n    \'us_ascii\'           : \'ascii\',\n\n    # base64_codec codec\n    \'base64\'             : \'base64_codec\',\n    \'base_64\'            : \'base64_codec\',\n\n    # big5 codec\n    \'big5_tw\'            : \'big5\',\n    \'csbig5\'             : \'big5\',\n\n    # big5hkscs codec\n    \'big5_hkscs\'         : \'big5hkscs\',\n    \'hkscs\'              : \'big5hkscs\',\n\n    # bz2_codec codec\n    \'bz2\'                : \'bz2_codec\',\n\n    # cp037 codec\n    \'037\'                : \'cp037\',\n    \'csibm037\'           : \'cp037\',\n    \'ebcdic_cp_ca\'       : \'cp037\',\n    \'ebcdic_cp_nl\'       : \'cp037\',\n    \'ebcdic_cp_us\'       : \'cp037\',\n    \'ebcdic_cp_wt\'       : \'cp037\',\n    \'ibm037\'             : \'cp037\',\n    \'ibm039\'             : \'cp037\',\n\n    # cp1026 codec\n    \'1026\'               : \'cp1026\',\n    \'csibm1026\'          : \'cp1026\',\n    \'ibm1026\'            : \'cp1026\',\n\n    # cp1125 codec\n    \'1125\'                : \'cp1125\',\n    \'ibm1125\'             : \'cp1125\',\n    \'cp866u\'              : \'cp1125\',\n    \'ruscii\'              : \'cp1125\',\n\n    # cp1140 codec\n    \'1140\'               : \'cp1140\',\n    \'ibm1140\'            : \'cp1140\',\n\n    # cp1250 codec\n    \'1250\'               : \'cp1250\',\n    \'windows_1250\'       : \'cp1250\',\n\n    # cp1251 codec\n    \'1251\'               : \'cp1251\',\n    \'windows_1251\'       : \'cp1251\',\n\n    # cp1252 codec\n    \'1252\'               : \'cp1252\',\n    \'windows_1252\'       : \'cp1252\',\n\n    # cp1253 codec\n    \'1253\'               : \'cp1253\',\n    \'windows_1253\'       : \'cp1253\',\n\n    # cp1254 codec\n    \'1254\'               : \'cp1254\',\n    \'windows_1254\'       : \'cp1254\',\n\n    # cp1255 codec\n    \'1255\'               : \'cp1255\',\n    \'windows_1255\'       : \'cp1255\',\n\n    # cp1256 codec\n    \'1256\'               : \'cp1256\',\n    \'windows_1256\'       : \'cp1256\',\n\n    # cp1257 codec\n    \'1257\'               : \'cp1257\',\n    \'windows_1257\'       : \'cp1257\',\n\n    # cp1258 codec\n    \'1258\'               : \'cp1258\',\n    \'windows_1258\'       : \'cp1258\',\n\n    # cp273 codec\n    \'273\'                : \'cp273\',\n    \'ibm273\'             : \'cp273\',\n    \'csibm273\'           : \'cp273\',\n\n    # cp424 codec\n    \'424\'                : \'cp424\',\n    \'csibm424\'           : \'cp424\',\n    \'ebcdic_cp_he\'       : \'cp424\',\n    \'ibm424\'             : \'cp424\',\n\n    # cp437 codec\n    \'437\'                : \'cp437\',\n    \'cspc8codepage437\'   : \'cp437\',\n    \'ibm437\'             : \'cp437\',\n\n    # cp500 codec\n    \'500\'                : \'cp500\',\n    \'csibm500\'           : \'cp500\',\n    \'ebcdic_cp_be\'       : \'cp500\',\n    \'ebcdic_cp_ch\'       : \'cp500\',\n    \'ibm500\'             : \'cp500\',\n\n    # cp775 codec\n    \'775\'                : \'cp775\',\n    \'cspc775baltic\'      : \'cp775\',\n    \'ibm775\'             : \'cp775\',\n\n    # cp850 codec\n    \'850\'                : \'cp850\',\n    \'cspc850multilingual\' : \'cp850\',\n    \'ibm850\'             : \'cp850\',\n\n    # cp852 codec\n    \'852\'                : \'cp852\',\n    \'cspcp852\'           : \'cp852\',\n    \'ibm852\'             : \'cp852\',\n\n    # cp855 codec\n    \'855\'                : \'cp855\',\n    \'csibm855\'           : \'cp855\',\n    \'ibm855\'             : \'cp855\',\n\n    # cp857 codec\n    \'857\'                : \'cp857\',\n    \'csibm857\'           : \'cp857\',\n    \'ibm857\'             : \'cp857\',\n\n    # cp858 codec\n    \'858\'                : \'cp858\',\n    \'csibm858\'           : \'cp858\',\n    \'ibm858\'             : \'cp858\',\n\n    # cp860 codec\n    \'860\'                : \'cp860\',\n    \'csibm860\'           : \'cp860\',\n    \'ibm860\'             : \'cp860\',\n\n    # cp861 codec\n    \'861\'                : \'cp861\',\n    \'cp_is\'              : \'cp861\',\n    \'csibm861\'           : \'cp861\',\n    \'ibm861\'             : \'cp861\',\n\n    # cp862 codec\n    \'862\'                : \'cp862\',\n    \'cspc862latinhebrew\' : \'cp862\',\n    \'ibm862\'             : \'cp862\',\n\n    # cp863 codec\n    \'863\'                : \'cp863\',\n    \'csibm863\'           : \'cp863\',\n    \'ibm863\'             : \'cp863\',\n\n    # cp864 codec\n    \'864\'                : \'cp864\',\n    \'csibm864\'           : \'cp864\',\n    \'ibm864\'             : \'cp864\',\n\n    # cp865 codec\n    \'865\'                : \'cp865\',\n    \'csibm865\'           : \'cp865\',\n    \'ibm865\'             : \'cp865\',\n\n    # cp866 codec\n    \'866\'                : \'cp866\',\n    \'csibm866\'           : \'cp866\',\n    \'ibm866\'             : \'cp866\',\n\n    # cp869 codec\n    \'869\'                : \'cp869\',\n    \'cp_gr\'              : \'cp869\',\n    \'csibm869\'           : \'cp869\',\n    \'ibm869\'             : \'cp869\',\n\n    # cp932 codec\n    \'932\'                : \'cp932\',\n    \'ms932\'              : \'cp932\',\n    \'mskanji\'            : \'cp932\',\n    \'ms_kanji\'           : \'cp932\',\n\n    # cp949 codec\n    \'949\'                : \'cp949\',\n    \'ms949\'              : \'cp949\',\n    \'uhc\'                : \'cp949\',\n\n    # cp950 codec\n    \'950\'                : \'cp950\',\n    \'ms950\'              : \'cp950\',\n\n    # euc_jis_2004 codec\n    \'jisx0213\'           : \'euc_jis_2004\',\n    \'eucjis2004\'         : \'euc_jis_2004\',\n    \'euc_jis2004\'        : \'euc_jis_2004\',\n\n    # euc_jisx0213 codec\n    \'eucjisx0213\'        : \'euc_jisx0213\',\n\n    # euc_jp codec\n    \'eucjp\'              : \'euc_jp\',\n    \'ujis\'               : \'euc_jp\',\n    \'u_jis\'              : \'euc_jp\',\n\n    # euc_kr codec\n    \'euckr\'              : \'euc_kr\',\n    \'korean\'             : \'euc_kr\',\n    \'ksc5601\'            : \'euc_kr\',\n    \'ks_c_5601\'          : \'euc_kr\',\n    \'ks_c_5601_1987\'     : \'euc_kr\',\n    \'ksx1001\'            : \'euc_kr\',\n    \'ks_x_1001\'          : \'euc_kr\',\n\n    # gb18030 codec\n    \'gb18030_2000\'       : \'gb18030\',\n\n    # gb2312 codec\n    \'chinese\'            : \'gb2312\',\n    \'csiso58gb231280\'    : \'gb2312\',\n    \'euc_cn\'             : \'gb2312\',\n    \'euccn\'              : \'gb2312\',\n    \'eucgb2312_cn\'       : \'gb2312\',\n    \'gb2312_1980\'        : \'gb2312\',\n    \'gb2312_80\'          : \'gb2312\',\n    \'iso_ir_58\'          : \'gb2312\',\n\n    # gbk codec\n    \'936\'                : \'gbk\',\n    \'cp936\'              : \'gbk\',\n    \'ms936\'              : \'gbk\',\n\n    # hex_codec codec\n    \'hex\'                : \'hex_codec\',\n\n    # hp_roman8 codec\n    \'roman8\'             : \'hp_roman8\',\n    \'r8\'                 : \'hp_roman8\',\n    \'csHPRoman8\'         : \'hp_roman8\',\n\n    # hz codec\n    \'hzgb\'               : \'hz\',\n    \'hz_gb\'              : \'hz\',\n    \'hz_gb_2312\'         : \'hz\',\n\n    # iso2022_jp codec\n    \'csiso2022jp\'        : \'iso2022_jp\',\n    \'iso2022jp\'          : \'iso2022_jp\',\n    \'iso_2022_jp\'        : \'iso2022_jp\',\n\n    # iso2022_jp_1 codec\n    \'iso2022jp_1\'        : \'iso2022_jp_1\',\n    \'iso_2022_jp_1\'      : \'iso2022_jp_1\',\n\n    # iso2022_jp_2 codec\n    \'iso2022jp_2\'        : \'iso2022_jp_2\',\n    \'iso_2022_jp_2\'      : \'iso2022_jp_2\',\n\n    # iso2022_jp_2004 codec\n    \'iso_2022_jp_2004\'   : \'iso2022_jp_2004\',\n    \'iso2022jp_2004\'     : \'iso2022_jp_2004\',\n\n    # iso2022_jp_3 codec\n    \'iso2022jp_3\'        : \'iso2022_jp_3\',\n    \'iso_2022_jp_3\'      : \'iso2022_jp_3\',\n\n    # iso2022_jp_ext codec\n    \'iso2022jp_ext\'      : \'iso2022_jp_ext\',\n    \'iso_2022_jp_ext\'    : \'iso2022_jp_ext\',\n\n    # iso2022_kr codec\n    \'csiso2022kr\'        : \'iso2022_kr\',\n    \'iso2022kr\'          : \'iso2022_kr\',\n    \'iso_2022_kr\'        : \'iso2022_kr\',\n\n    # iso8859_10 codec\n    \'csisolatin6\'        : \'iso8859_10\',\n    \'iso_8859_10\'        : \'iso8859_10\',\n    \'iso_8859_10_1992\'   : \'iso8859_10\',\n    \'iso_ir_157\'         : \'iso8859_10\',\n    \'l6\'                 : \'iso8859_10\',\n    \'latin6\'             : \'iso8859_10\',\n\n    # iso8859_11 codec\n    \'thai\'               : \'iso8859_11\',\n    \'iso_8859_11\'        : \'iso8859_11\',\n    \'iso_8859_11_2001\'   : \'iso8859_11\',\n\n    # iso8859_13 codec\n    \'iso_8859_13\'        : \'iso8859_13\',\n    \'l7\'                 : \'iso8859_13\',\n    \'latin7\'             : \'iso8859_13\',\n\n    # iso8859_14 codec\n    \'iso_8859_14\'        : \'iso8859_14\',\n    \'iso_8859_14_1998\'   : \'iso8859_14\',\n    \'iso_celtic\'         : \'iso8859_14\',\n    \'iso_ir_199\'         : \'iso8859_14\',\n    \'l8\'                 : \'iso8859_14\',\n    \'latin8\'             : \'iso8859_14\',\n\n    # iso8859_15 codec\n    \'iso_8859_15\'        : \'iso8859_15\',\n    \'l9\'                 : \'iso8859_15\',\n    \'latin9\'             : \'iso8859_15\',\n\n    # iso8859_16 codec\n    \'iso_8859_16\'        : \'iso8859_16\',\n    \'iso_8859_16_2001\'   : \'iso8859_16\',\n    \'iso_ir_226\'         : \'iso8859_16\',\n    \'l10\'                : \'iso8859_16\',\n    \'latin10\'            : \'iso8859_16\',\n\n    # iso8859_2 codec\n    \'csisolatin2\'        : \'iso8859_2\',\n    \'iso_8859_2\'         : \'iso8859_2\',\n    \'iso_8859_2_1987\'    : \'iso8859_2\',\n    \'iso_ir_101\'         : \'iso8859_2\',\n    \'l2\'                 : \'iso8859_2\',\n    \'latin2\'             : \'iso8859_2\',\n\n    # iso8859_3 codec\n    \'csisolatin3\'        : \'iso8859_3\',\n    \'iso_8859_3\'         : \'iso8859_3\',\n    \'iso_8859_3_1988\'    : \'iso8859_3\',\n    \'iso_ir_109\'         : \'iso8859_3\',\n    \'l3\'                 : \'iso8859_3\',\n    \'latin3\'             : \'iso8859_3\',\n\n    # iso8859_4 codec\n    \'csisolatin4\'        : \'iso8859_4\',\n    \'iso_8859_4\'         : \'iso8859_4\',\n    \'iso_8859_4_1988\'    : \'iso8859_4\',\n    \'iso_ir_110\'         : \'iso8859_4\',\n    \'l4\'                 : \'iso8859_4\',\n    \'latin4\'             : \'iso8859_4\',\n\n    # iso8859_5 codec\n    \'csisolatincyrillic\' : \'iso8859_5\',\n    \'cyrillic\'           : \'iso8859_5\',\n    \'iso_8859_5\'         : \'iso8859_5\',\n    \'iso_8859_5_1988\'    : \'iso8859_5\',\n    \'iso_ir_144\'         : \'iso8859_5\',\n\n    # iso8859_6 codec\n    \'arabic\'             : \'iso8859_6\',\n    \'asmo_708\'           : \'iso8859_6\',\n    \'csisolatinarabic\'   : \'iso8859_6\',\n    \'ecma_114\'           : \'iso8859_6\',\n    \'iso_8859_6\'         : \'iso8859_6\',\n    \'iso_8859_6_1987\'    : \'iso8859_6\',\n    \'iso_ir_127\'         : \'iso8859_6\',\n\n    # iso8859_7 codec\n    \'csisolatingreek\'    : \'iso8859_7\',\n    \'ecma_118\'           : \'iso8859_7\',\n    \'elot_928\'           : \'iso8859_7\',\n    \'greek\'              : \'iso8859_7\',\n    \'greek8\'             : \'iso8859_7\',\n    \'iso_8859_7\'         : \'iso8859_7\',\n    \'iso_8859_7_1987\'    : \'iso8859_7\',\n    \'iso_ir_126\'         : \'iso8859_7\',\n\n    # iso8859_8 codec\n    \'csisolatinhebrew\'   : \'iso8859_8\',\n    \'hebrew\'             : \'iso8859_8\',\n    \'iso_8859_8\'         : \'iso8859_8\',\n    \'iso_8859_8_1988\'    : \'iso8859_8\',\n    \'iso_ir_138\'         : \'iso8859_8\',\n\n    # iso8859_9 codec\n    \'csisolatin5\'        : \'iso8859_9\',\n    \'iso_8859_9\'         : \'iso8859_9\',\n    \'iso_8859_9_1989\'    : \'iso8859_9\',\n    \'iso_ir_148\'         : \'iso8859_9\',\n    \'l5\'                 : \'iso8859_9\',\n    \'latin5\'             : \'iso8859_9\',\n\n    # johab codec\n    \'cp1361\'             : \'johab\',\n    \'ms1361\'             : \'johab\',\n\n    # koi8_r codec\n    \'cskoi8r\'            : \'koi8_r\',\n\n    # kz1048 codec\n    \'kz_1048\'           : \'kz1048\',\n    \'rk1048\'            : \'kz1048\',\n    \'strk1048_2002\'     : \'kz1048\',\n\n    # latin_1 codec\n    #\n    # Note that the latin_1 codec is implemented internally in C and a\n    # lot faster than the charmap codec iso8859_1 which uses the same\n    # encoding. This is why we discourage the use of the iso8859_1\n    # codec and alias it to latin_1 instead.\n    #\n    \'8859\'               : \'latin_1\',\n    \'cp819\'              : \'latin_1\',\n    \'csisolatin1\'        : \'latin_1\',\n    \'ibm819\'             : \'latin_1\',\n    \'iso8859\'            : \'latin_1\',\n    \'iso8859_1\'          : \'latin_1\',\n    \'iso_8859_1\'         : \'latin_1\',\n    \'iso_8859_1_1987\'    : \'latin_1\',\n    \'iso_ir_100\'         : \'latin_1\',\n    \'l1\'                 : \'latin_1\',\n    \'latin\'              : \'latin_1\',\n    \'latin1\'             : \'latin_1\',\n\n    # mac_cyrillic codec\n    \'maccyrillic\'        : \'mac_cyrillic\',\n\n    # mac_greek codec\n    \'macgreek\'           : \'mac_greek\',\n\n    # mac_iceland codec\n    \'maciceland\'         : \'mac_iceland\',\n\n    # mac_latin2 codec\n    \'maccentraleurope\'   : \'mac_latin2\',\n    \'maclatin2\'          : \'mac_latin2\',\n\n    # mac_roman codec\n    \'macintosh\'          : \'mac_roman\',\n    \'macroman\'           : \'mac_roman\',\n\n    # mac_turkish codec\n    \'macturkish\'         : \'mac_turkish\',\n\n    # mbcs codec\n    \'dbcs\'               : \'mbcs\',\n\n    # ptcp154 codec\n    \'csptcp154\'          : \'ptcp154\',\n    \'pt154\'              : \'ptcp154\',\n    \'cp154\'              : \'ptcp154\',\n    \'cyrillic_asian\'     : \'ptcp154\',\n\n    # quopri_codec codec\n    \'quopri\'             : \'quopri_codec\',\n    \'quoted_printable\'   : \'quopri_codec\',\n    \'quotedprintable\'    : \'quopri_codec\',\n\n    # rot_13 codec\n    \'rot13\'              : \'rot_13\',\n\n    # shift_jis codec\n    \'csshiftjis\'         : \'shift_jis\',\n    \'shiftjis\'           : \'shift_jis\',\n    \'sjis\'               : \'shift_jis\',\n    \'s_jis\'              : \'shift_jis\',\n\n    # shift_jis_2004 codec\n    \'shiftjis2004\'       : \'shift_jis_2004\',\n    \'sjis_2004\'          : \'shift_jis_2004\',\n    \'s_jis_2004\'         : \'shift_jis_2004\',\n\n    # shift_jisx0213 codec\n    \'shiftjisx0213\'      : \'shift_jisx0213\',\n    \'sjisx0213\'          : \'shift_jisx0213\',\n    \'s_jisx0213\'         : \'shift_jisx0213\',\n\n    # tactis codec\n    \'tis260\'             : \'tactis\',\n\n    # tis_620 codec\n    \'tis620\'             : \'tis_620\',\n    \'tis_620_0\'          : \'tis_620\',\n    \'tis_620_2529_0\'     : \'tis_620\',\n    \'tis_620_2529_1\'     : \'tis_620\',\n    \'iso_ir_166\'         : \'tis_620\',\n\n    # utf_16 codec\n    \'u16\'                : \'utf_16\',\n    \'utf16\'              : \'utf_16\',\n\n    # utf_16_be codec\n    \'unicodebigunmarked\' : \'utf_16_be\',\n    \'utf_16be\'           : \'utf_16_be\',\n\n    # utf_16_le codec\n    \'unicodelittleunmarked\' : \'utf_16_le\',\n    \'utf_16le\'           : \'utf_16_le\',\n\n    # utf_32 codec\n    \'u32\'                : \'utf_32\',\n    \'utf32\'              : \'utf_32\',\n\n    # utf_32_be codec\n    \'utf_32be\'           : \'utf_32_be\',\n\n    # utf_32_le codec\n    \'utf_32le\'           : \'utf_32_le\',\n\n    # utf_7 codec\n    \'u7\'                 : \'utf_7\',\n    \'utf7\'               : \'utf_7\',\n    \'unicode_1_1_utf_7\'  : \'utf_7\',\n\n    # utf_8 codec\n    \'u8\'                 : \'utf_8\',\n    \'utf\'                : \'utf_8\',\n    \'utf8\'               : \'utf_8\',\n    \'utf8_ucs2\'          : \'utf_8\',\n    \'utf8_ucs4\'          : \'utf_8\',\n\n    # uu_codec codec\n    \'uu\'                 : \'uu_codec\',\n\n    # zlib_codec codec\n    \'zip\'                : \'zlib_codec\',\n    \'zlib\'               : \'zlib_codec\',\n\n    # temporary mac CJK aliases, will be replaced by proper codecs in 3.1\n    \'x_mac_japanese\'      : \'shift_jis\',\n    \'x_mac_korean\'        : \'euc_kr\',\n    \'x_mac_simp_chinese\'  : \'gb2312\',\n    \'x_mac_trad_chinese\'  : \'big5\',\n}\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=42, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=15542, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=42, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=15542, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 42, 1, 1, 0, 0, 15542, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 42, 1, 1, 0, 0, 15542, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 42, type <class 'int'>
Dump int (long) 42
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 15542, type <class 'int'>
Dump int (long) 15542
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 15542
Write message g=<_io.BufferedWriter name=4>, msg=15542, resulttype=None
dump 15542, type <class 'int'>
Dump int (long) 15542
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 1)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',))
['', 'bin', 'lib-python', '3', 'encodings']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=43, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=43, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 43, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 43, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 43, type <class 'int'>
Dump int (long) 43
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/ascii.py',))
['', 'bin', 'lib-python', '3', 'encodings', 'ascii.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/ascii.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=44, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1248, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=44, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1248, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 44, 1, 1, 0, 0, 1248, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 44, 1, 1, 0, 0, 1248, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 44, type <class 'int'>
Dump int (long) 44
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1248, type <class 'int'>
Dump int (long) 1248
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/ascii.py',))
['', 'bin', 'lib-python', '3', 'encodings', 'ascii.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/ascii.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=45, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1248, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=45, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1248, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 45, 1, 1, 0, 0, 1248, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 45, 1, 1, 0, 0, 1248, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 45, type <class 'int'>
Dump int (long) 45
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1248, type <class 'int'>
Dump int (long) 1248
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/__pycache__/ascii.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', 'encodings', '__pycache__', 'ascii.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings> ['aliases.py', 'ascii.py', 'base64_codec.py', 'big5.py', 'big5hkscs.py', 'bz2_codec.py', 'charmap.py', 'cp037.py', 'cp1006.py', 'cp1026.py', 'cp1125.py', 'cp1140.py', 'cp1250.py', 'cp1251.py', 'cp1252.py', 'cp1253.py', 'cp1254.py', 'cp1255.py', 'cp1256.py', 'cp1257.py', 'cp1258.py', 'cp273.py', 'cp424.py', 'cp437.py', 'cp500.py', 'cp65001.py', 'cp720.py', 'cp737.py', 'cp775.py', 'cp850.py', 'cp852.py', 'cp855.py', 'cp856.py', 'cp857.py', 'cp858.py', 'cp860.py', 'cp861.py', 'cp862.py', 'cp863.py', 'cp864.py', 'cp865.py', 'cp866.py', 'cp869.py', 'cp874.py', 'cp875.py', 'cp932.py', 'cp949.py', 'cp950.py', 'euc_jisx0213.py', 'euc_jis_2004.py', 'euc_jp.py', 'euc_kr.py', 'gb18030.py', 'gb2312.py', 'gbk.py', 'hex_codec.py', 'hp_roman8.py', 'hz.py', 'idna.py', 'iso2022_jp.py', 'iso2022_jp_1.py', 'iso2022_jp_2.py', 'iso2022_jp_2004.py', 'iso2022_jp_3.py', 'iso2022_jp_ext.py', 'iso2022_kr.py', 'iso8859_1.py', 'iso8859_10.py', 'iso8859_11.py', 'iso8859_13.py', 'iso8859_14.py', 'iso8859_15.py', 'iso8859_16.py', 'iso8859_2.py', 'iso8859_3.py', 'iso8859_4.py', 'iso8859_5.py', 'iso8859_6.py', 'iso8859_7.py', 'iso8859_8.py', 'iso8859_9.py', 'johab.py', 'koi8_r.py', 'koi8_t.py', 'koi8_u.py', 'kz1048.py', 'latin_1.py', 'mac_arabic.py', 'mac_centeuro.py', 'mac_croatian.py', 'mac_cyrillic.py', 'mac_farsi.py', 'mac_greek.py', 'mac_iceland.py', 'mac_latin2.py', 'mac_roman.py', 'mac_romanian.py', 'mac_turkish.py', 'mbcs.py', 'palmos.py', 'ptcp154.py', 'punycode.py', 'quopri_codec.py', 'raw_unicode_escape.py', 'rot_13.py', 'shift_jis.py', 'shift_jisx0213.py', 'shift_jis_2004.py', 'tis_620.py', 'undefined.py', 'unicode_escape.py', 'unicode_internal.py', 'utf_16.py', 'utf_16_be.py', 'utf_16_le.py', 'utf_32.py', 'utf_32_be.py', 'utf_32_le.py', 'utf_7.py', 'utf_8.py', 'utf_8_sig.py', 'uu_codec.py', 'zlib_codec.py', '__init__.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/ascii.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'encodings', 'ascii.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/ascii.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=46, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1248, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=46, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1248, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 46, 1, 1, 0, 0, 1248, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 46, 1, 1, 0, 0, 1248, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 46, type <class 'int'>
Dump int (long) 46
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1248, type <class 'int'>
Dump int (long) 1248
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=46, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1248, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=46, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1248, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 46, 1, 1, 0, 0, 1248, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 46, 1, 1, 0, 0, 1248, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 46, type <class 'int'>
Dump int (long) 46
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1248, type <class 'int'>
Dump int (long) 1248
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b'""" Python \'ascii\' Codec\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""\nimport codecs\n\n### Codec APIs\n\nclass Codec(codecs.Codec):\n\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.ascii_encode\n    decode = codecs.ascii_decode\n\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.ascii_encode(input, self.errors)[0]\n\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.ascii_decode(input, self.errors)[0]\n\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\n\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n\nclass StreamConverter(StreamWriter,StreamReader):\n\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\'ascii\',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'""" Python \'ascii\' Codec\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""\nimport codecs\n\n### Codec APIs\n\nclass Codec(codecs.Codec):\n\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.ascii_encode\n    decode = codecs.ascii_decode\n\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.ascii_encode(input, self.errors)[0]\n\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.ascii_decode(input, self.errors)[0]\n\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\n\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n\nclass StreamConverter(StreamWriter,StreamReader):\n\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\'ascii\',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n', resulttype=None
dump b'""" Python \'ascii\' Codec\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""\nimport codecs\n\n### Codec APIs\n\nclass Codec(codecs.Codec):\n\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.ascii_encode\n    decode = codecs.ascii_decode\n\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.ascii_encode(input, self.errors)[0]\n\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.ascii_decode(input, self.errors)[0]\n\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\n\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n\nclass StreamConverter(StreamWriter,StreamReader):\n\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\'ascii\',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=46, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1248, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=46, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1248, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 46, 1, 1, 0, 0, 1248, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 46, 1, 1, 0, 0, 1248, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 46, type <class 'int'>
Dump int (long) 46
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1248, type <class 'int'>
Dump int (long) 1248
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 1248
Write message g=<_io.BufferedWriter name=4>, msg=1248, resulttype=None
dump 1248, type <class 'int'>
Dump int (long) 1248
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',))
['', 'bin', 'lib-python', '3', 'encodings']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=47, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=47, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 47, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 47, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 47, type <class 'int'>
Dump int (long) 47
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/utf_8.py',))
['', 'bin', 'lib-python', '3', 'encodings', 'utf_8.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/utf_8.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=48, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=48, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 48, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 48, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 48, type <class 'int'>
Dump int (long) 48
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1005, type <class 'int'>
Dump int (long) 1005
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/utf_8.py',))
['', 'bin', 'lib-python', '3', 'encodings', 'utf_8.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/utf_8.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=49, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=49, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 49, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 49, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 49, type <class 'int'>
Dump int (long) 49
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1005, type <class 'int'>
Dump int (long) 1005
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/__pycache__/utf_8.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', 'encodings', '__pycache__', 'utf_8.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings> ['aliases.py', 'ascii.py', 'base64_codec.py', 'big5.py', 'big5hkscs.py', 'bz2_codec.py', 'charmap.py', 'cp037.py', 'cp1006.py', 'cp1026.py', 'cp1125.py', 'cp1140.py', 'cp1250.py', 'cp1251.py', 'cp1252.py', 'cp1253.py', 'cp1254.py', 'cp1255.py', 'cp1256.py', 'cp1257.py', 'cp1258.py', 'cp273.py', 'cp424.py', 'cp437.py', 'cp500.py', 'cp65001.py', 'cp720.py', 'cp737.py', 'cp775.py', 'cp850.py', 'cp852.py', 'cp855.py', 'cp856.py', 'cp857.py', 'cp858.py', 'cp860.py', 'cp861.py', 'cp862.py', 'cp863.py', 'cp864.py', 'cp865.py', 'cp866.py', 'cp869.py', 'cp874.py', 'cp875.py', 'cp932.py', 'cp949.py', 'cp950.py', 'euc_jisx0213.py', 'euc_jis_2004.py', 'euc_jp.py', 'euc_kr.py', 'gb18030.py', 'gb2312.py', 'gbk.py', 'hex_codec.py', 'hp_roman8.py', 'hz.py', 'idna.py', 'iso2022_jp.py', 'iso2022_jp_1.py', 'iso2022_jp_2.py', 'iso2022_jp_2004.py', 'iso2022_jp_3.py', 'iso2022_jp_ext.py', 'iso2022_kr.py', 'iso8859_1.py', 'iso8859_10.py', 'iso8859_11.py', 'iso8859_13.py', 'iso8859_14.py', 'iso8859_15.py', 'iso8859_16.py', 'iso8859_2.py', 'iso8859_3.py', 'iso8859_4.py', 'iso8859_5.py', 'iso8859_6.py', 'iso8859_7.py', 'iso8859_8.py', 'iso8859_9.py', 'johab.py', 'koi8_r.py', 'koi8_t.py', 'koi8_u.py', 'kz1048.py', 'latin_1.py', 'mac_arabic.py', 'mac_centeuro.py', 'mac_croatian.py', 'mac_cyrillic.py', 'mac_farsi.py', 'mac_greek.py', 'mac_iceland.py', 'mac_latin2.py', 'mac_roman.py', 'mac_romanian.py', 'mac_turkish.py', 'mbcs.py', 'palmos.py', 'ptcp154.py', 'punycode.py', 'quopri_codec.py', 'raw_unicode_escape.py', 'rot_13.py', 'shift_jis.py', 'shift_jisx0213.py', 'shift_jis_2004.py', 'tis_620.py', 'undefined.py', 'unicode_escape.py', 'unicode_internal.py', 'utf_16.py', 'utf_16_be.py', 'utf_16_le.py', 'utf_32.py', 'utf_32_be.py', 'utf_32_le.py', 'utf_7.py', 'utf_8.py', 'utf_8_sig.py', 'uu_codec.py', 'zlib_codec.py', '__init__.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/utf_8.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'encodings', 'utf_8.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/utf_8.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=50, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=50, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 50, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 50, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 50, type <class 'int'>
Dump int (long) 50
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1005, type <class 'int'>
Dump int (long) 1005
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=50, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=50, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 50, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 50, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 50, type <class 'int'>
Dump int (long) 50
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1005, type <class 'int'>
Dump int (long) 1005
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b'""" Python \'utf-8\' Codec\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""\nimport codecs\n\n### Codec APIs\n\nencode = codecs.utf_8_encode\n\ndef decode(input, errors=\'strict\'):\n    return codecs.utf_8_decode(input, errors, True)\n\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\n\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\n\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\n\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\'utf-8\',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'""" Python \'utf-8\' Codec\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""\nimport codecs\n\n### Codec APIs\n\nencode = codecs.utf_8_encode\n\ndef decode(input, errors=\'strict\'):\n    return codecs.utf_8_decode(input, errors, True)\n\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\n\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\n\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\n\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\'utf-8\',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n', resulttype=None
dump b'""" Python \'utf-8\' Codec\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""\nimport codecs\n\n### Codec APIs\n\nencode = codecs.utf_8_encode\n\ndef decode(input, errors=\'strict\'):\n    return codecs.utf_8_decode(input, errors, True)\n\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\n\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\n\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\n\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\'utf-8\',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=50, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=50, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 50, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 50, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 50, type <class 'int'>
Dump int (long) 50
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1005, type <class 'int'>
Dump int (long) 1005
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 1005
Write message g=<_io.BufferedWriter name=4>, msg=1005, resulttype=None
dump 1005, type <class 'int'>
Dump int (long) 1005
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/utf_8.py',))
['', 'bin', 'lib-python', '3', 'encodings', 'utf_8.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/utf_8.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=51, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=51, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1005, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 51, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 51, 1, 1, 0, 0, 1005, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 51, type <class 'int'>
Dump int (long) 51
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1005, type <class 'int'>
Dump int (long) 1005
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/__pycache__',))
['', 'bin', 'lib-python', '3', 'encodings', '__pycache__']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',))
['', 'bin', 'lib-python', '3', 'encodings']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=52, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=52, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 52, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 52, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 52, type <class 'int'>
Dump int (long) 52
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_mkdir'
Start b'll_os.ll_os_mkdir'((b'/bin/lib-python/3/encodings/__pycache__', 511))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((1,)) complete. Writing back Operation not permitted
Write message g=<_io.BufferedWriter name=4>, msg=Operation not permitted, resulttype=None
dump Operation not permitted, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',))
['', 'bin', 'lib-python', '3', 'encodings']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=53, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=53, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 53, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 53, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 53, type <class 'int'>
Dump int (long) 53
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/latin_1.py',))
['', 'bin', 'lib-python', '3', 'encodings', 'latin_1.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/latin_1.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=54, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=54, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 54, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 54, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 54, type <class 'int'>
Dump int (long) 54
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1264, type <class 'int'>
Dump int (long) 1264
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/latin_1.py',))
['', 'bin', 'lib-python', '3', 'encodings', 'latin_1.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/latin_1.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=55, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=55, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 55, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 55, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 55, type <class 'int'>
Dump int (long) 55
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1264, type <class 'int'>
Dump int (long) 1264
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/__pycache__/latin_1.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', 'encodings', '__pycache__', 'latin_1.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings> ['aliases.py', 'ascii.py', 'base64_codec.py', 'big5.py', 'big5hkscs.py', 'bz2_codec.py', 'charmap.py', 'cp037.py', 'cp1006.py', 'cp1026.py', 'cp1125.py', 'cp1140.py', 'cp1250.py', 'cp1251.py', 'cp1252.py', 'cp1253.py', 'cp1254.py', 'cp1255.py', 'cp1256.py', 'cp1257.py', 'cp1258.py', 'cp273.py', 'cp424.py', 'cp437.py', 'cp500.py', 'cp65001.py', 'cp720.py', 'cp737.py', 'cp775.py', 'cp850.py', 'cp852.py', 'cp855.py', 'cp856.py', 'cp857.py', 'cp858.py', 'cp860.py', 'cp861.py', 'cp862.py', 'cp863.py', 'cp864.py', 'cp865.py', 'cp866.py', 'cp869.py', 'cp874.py', 'cp875.py', 'cp932.py', 'cp949.py', 'cp950.py', 'euc_jisx0213.py', 'euc_jis_2004.py', 'euc_jp.py', 'euc_kr.py', 'gb18030.py', 'gb2312.py', 'gbk.py', 'hex_codec.py', 'hp_roman8.py', 'hz.py', 'idna.py', 'iso2022_jp.py', 'iso2022_jp_1.py', 'iso2022_jp_2.py', 'iso2022_jp_2004.py', 'iso2022_jp_3.py', 'iso2022_jp_ext.py', 'iso2022_kr.py', 'iso8859_1.py', 'iso8859_10.py', 'iso8859_11.py', 'iso8859_13.py', 'iso8859_14.py', 'iso8859_15.py', 'iso8859_16.py', 'iso8859_2.py', 'iso8859_3.py', 'iso8859_4.py', 'iso8859_5.py', 'iso8859_6.py', 'iso8859_7.py', 'iso8859_8.py', 'iso8859_9.py', 'johab.py', 'koi8_r.py', 'koi8_t.py', 'koi8_u.py', 'kz1048.py', 'latin_1.py', 'mac_arabic.py', 'mac_centeuro.py', 'mac_croatian.py', 'mac_cyrillic.py', 'mac_farsi.py', 'mac_greek.py', 'mac_iceland.py', 'mac_latin2.py', 'mac_roman.py', 'mac_romanian.py', 'mac_turkish.py', 'mbcs.py', 'palmos.py', 'ptcp154.py', 'punycode.py', 'quopri_codec.py', 'raw_unicode_escape.py', 'rot_13.py', 'shift_jis.py', 'shift_jisx0213.py', 'shift_jis_2004.py', 'tis_620.py', 'undefined.py', 'unicode_escape.py', 'unicode_internal.py', 'utf_16.py', 'utf_16_be.py', 'utf_16_le.py', 'utf_32.py', 'utf_32_be.py', 'utf_32_le.py', 'utf_7.py', 'utf_8.py', 'utf_8_sig.py', 'uu_codec.py', 'zlib_codec.py', '__init__.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/latin_1.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'encodings', 'latin_1.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/encodings/latin_1.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=56, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=56, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 56, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 56, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 56, type <class 'int'>
Dump int (long) 56
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1264, type <class 'int'>
Dump int (long) 1264
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=56, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=56, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 56, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 56, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 56, type <class 'int'>
Dump int (long) 56
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1264, type <class 'int'>
Dump int (long) 1264
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b'""" Python \'latin-1\' Codec\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""\nimport codecs\n\n### Codec APIs\n\nclass Codec(codecs.Codec):\n\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.latin_1_encode\n    decode = codecs.latin_1_decode\n\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.latin_1_encode(input,self.errors)[0]\n\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.latin_1_decode(input,self.errors)[0]\n\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\n\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n\nclass StreamConverter(StreamWriter,StreamReader):\n\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\'iso8859-1\',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'""" Python \'latin-1\' Codec\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""\nimport codecs\n\n### Codec APIs\n\nclass Codec(codecs.Codec):\n\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.latin_1_encode\n    decode = codecs.latin_1_decode\n\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.latin_1_encode(input,self.errors)[0]\n\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.latin_1_decode(input,self.errors)[0]\n\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\n\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n\nclass StreamConverter(StreamWriter,StreamReader):\n\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\'iso8859-1\',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n', resulttype=None
dump b'""" Python \'latin-1\' Codec\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"""\nimport codecs\n\n### Codec APIs\n\nclass Codec(codecs.Codec):\n\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.latin_1_encode\n    decode = codecs.latin_1_decode\n\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.latin_1_encode(input,self.errors)[0]\n\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.latin_1_decode(input,self.errors)[0]\n\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\n\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n\nclass StreamConverter(StreamWriter,StreamReader):\n\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\'iso8859-1\',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=56, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=56, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 56, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 56, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 56, type <class 'int'>
Dump int (long) 56
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1264, type <class 'int'>
Dump int (long) 1264
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 1264
Write message g=<_io.BufferedWriter name=4>, msg=1264, resulttype=None
dump 1264, type <class 'int'>
Dump int (long) 1264
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/latin_1.py',))
['', 'bin', 'lib-python', '3', 'encodings', 'latin_1.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/latin_1.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=57, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=57, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=1264, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 57, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 57, 1, 1, 0, 0, 1264, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 57, type <class 'int'>
Dump int (long) 57
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 1264, type <class 'int'>
Dump int (long) 1264
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings/__pycache__',))
['', 'bin', 'lib-python', '3', 'encodings', '__pycache__']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking encodings
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3/encodings>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',))
['', 'bin', 'lib-python', '3', 'encodings']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/encodings',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=58, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=58, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 58, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 58, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 58, type <class 'int'>
Dump int (long) 58
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_mkdir'
Start b'll_os.ll_os_mkdir'((b'/bin/lib-python/3/encodings/__pycache__', 511))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((1,)) complete. Writing back Operation not permitted
Write message g=<_io.BufferedWriter name=4>, msg=Operation not permitted, resulttype=None
dump Operation not permitted, type <class 'str'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((2,)) complete. Writing back os.stat_result(st_mode=8624, st_ino=2814749768164608, st_dev=10, st_nlink=1, st_uid=1000, st_gid=5, st_size=0, st_atime=1511800930, st_mtime=1511800930, st_ctime=1511800930)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=8624, st_ino=2814749768164608, st_dev=10, st_nlink=1, st_uid=1000, st_gid=5, st_size=0, st_atime=1511800930, st_mtime=1511800930, st_ctime=1511800930), resulttype=<object object at 0x7f28609900e0>
dump (8624, 2814749768164608, 10, 1, 1000, 5, 0, 1511800930.0, 1511800930.0, 1511800930.0), type <class 'tuple'>
Dumping tuple (8624, 2814749768164608, 10, 1, 1000, 5, 0, 1511800930.0, 1511800930.0, 1511800930.0) b'('
10 items.
dump 8624, type <class 'int'>
Dump int (long) 8624
dump 2814749768164608, type <class 'int'>
Dump int (long) 2814749768164608
dump 10, type <class 'int'>
Dump int (long) 10
dump 1, type <class 'int'>
Dump int (long) 1
dump 1000, type <class 'int'>
Dump int (long) 1000
dump 5, type <class 'int'>
Dump int (long) 5
dump 0, type <class 'int'>
Dump int (long) 0
dump 1511800930.0, type <class 'float'>
dump 1511800930.0, type <class 'float'>
dump 1511800930.0, type <class 'float'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((2,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((2, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=9, resulttype=None
dump 9, type <class 'int'>
Dump int (long) 9
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((9,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((9,)) complete. Writing back Bad file descriptor
Write message g=<_io.BufferedWriter name=4>, msg=Bad file descriptor, resulttype=None
dump Bad file descriptor, type <class 'str'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((2,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((2,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((2,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((2, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=9, resulttype=None
dump 9, type <class 'int'>
Dump int (long) 9
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((1,)) complete. Writing back os.stat_result(st_mode=33279, st_ino=26458647810824455, st_dev=17, st_nlink=1, st_uid=0, st_gid=0, st_size=812821, st_atime=1512362607, st_mtime=1512362607, st_ctime=1512362607)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33279, st_ino=26458647810824455, st_dev=17, st_nlink=1, st_uid=0, st_gid=0, st_size=812821, st_atime=1512362607, st_mtime=1512362607, st_ctime=1512362607), resulttype=<object object at 0x7f28609900e0>
dump (33279, 26458647810824455, 17, 1, 0, 0, 812821, 1512362607.0, 1512362607.0, 1512362607.0), type <class 'tuple'>
Dumping tuple (33279, 26458647810824455, 17, 1, 0, 0, 812821, 1512362607.0, 1512362607.0, 1512362607.0) b'('
10 items.
dump 33279, type <class 'int'>
Dump int (long) 33279
dump 26458647810824455, type <class 'int'>
Dump int (long) 26458647810824455
dump 17, type <class 'int'>
Dump int (long) 17
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 812821, type <class 'int'>
Dump int (long) 812821
dump 1512362607.0, type <class 'float'>
dump 1512362607.0, type <class 'float'>
dump 1512362607.0, type <class 'float'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((1,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((1, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=9, resulttype=None
dump 9, type <class 'int'>
Dump int (long) 9
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((9,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((9,)) complete. Writing back Bad file descriptor
Write message g=<_io.BufferedWriter name=4>, msg=Bad file descriptor, resulttype=None
dump Bad file descriptor, type <class 'str'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((1,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((1,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((1,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((1, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=9, resulttype=None
dump 9, type <class 'int'>
Dump int (long) 9
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((0,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((0,)) complete. Writing back os.stat_result(st_mode=8624, st_ino=2814749768164608, st_dev=10, st_nlink=1, st_uid=1000, st_gid=5, st_size=0, st_atime=1511800930, st_mtime=1511800930, st_ctime=1511800930)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=8624, st_ino=2814749768164608, st_dev=10, st_nlink=1, st_uid=1000, st_gid=5, st_size=0, st_atime=1511800930, st_mtime=1511800930, st_ctime=1511800930), resulttype=<object object at 0x7f28609900e0>
dump (8624, 2814749768164608, 10, 1, 1000, 5, 0, 1511800930.0, 1511800930.0, 1511800930.0), type <class 'tuple'>
Dumping tuple (8624, 2814749768164608, 10, 1, 1000, 5, 0, 1511800930.0, 1511800930.0, 1511800930.0) b'('
10 items.
dump 8624, type <class 'int'>
Dump int (long) 8624
dump 2814749768164608, type <class 'int'>
Dump int (long) 2814749768164608
dump 10, type <class 'int'>
Dump int (long) 10
dump 1, type <class 'int'>
Dump int (long) 1
dump 1000, type <class 'int'>
Dump int (long) 1000
dump 5, type <class 'int'>
Dump int (long) 5
dump 0, type <class 'int'>
Dump int (long) 0
dump 1511800930.0, type <class 'float'>
dump 1511800930.0, type <class 'float'>
dump 1511800930.0, type <class 'float'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((0,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((0,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((0, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=9, resulttype=None
dump 9, type <class 'int'>
Dump int (long) 9
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((9,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((9,)) complete. Writing back Bad file descriptor
Write message g=<_io.BufferedWriter name=4>, msg=Bad file descriptor, resulttype=None
dump Bad file descriptor, type <class 'str'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((0,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((0,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((0,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((0,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((0,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((0,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((0, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=9, resulttype=None
dump 9, type <class 'int'>
Dump int (long) 9
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=59, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=59, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 59, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 59, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 59, type <class 'int'>
Dump int (long) 59
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/site.py',))
['', 'bin', 'lib-python', '3', 'site.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/site.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=60, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=60, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 60, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 60, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 60, type <class 'int'>
Dump int (long) 60
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 21739, type <class 'int'>
Dump int (long) 21739
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/site.py',))
['', 'bin', 'lib-python', '3', 'site.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/site.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=61, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=61, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 61, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 61, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 61, type <class 'int'>
Dump int (long) 61
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 21739, type <class 'int'>
Dump int (long) 21739
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/__pycache__/site.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', '__pycache__', 'site.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/site.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'site.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/site.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=62, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=62, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 62, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 62, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 62, type <class 'int'>
Dump int (long) 62
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 21739, type <class 'int'>
Dump int (long) 21739
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=62, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=62, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 62, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 62, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 62, type <class 'int'>
Dump int (long) 62
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 21739, type <class 'int'>
Dump int (long) 21739
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 21740))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 21740)) complete. Writing back b'"""Append module search paths for third-party packages to sys.path.\n\n****************************************************************\n* This module is automatically imported during initialization. *\n****************************************************************\n\nThis will append site-specific paths to the module search path.  On\nUnix (including Mac OSX), it starts with sys.prefix and\nsys.exec_prefix (if different) and appends\nlib/python<version>/site-packages.\nOn other platforms (such as Windows), it tries each of the\nprefixes directly, as well as with lib/site-packages appended.  The\nresulting directories, if they exist, are appended to sys.path, and\nalso inspected for path configuration files.\n\nIf a file named "pyvenv.cfg" exists one directory above sys.executable,\nsys.prefix and sys.exec_prefix are set to that directory and\nit is also checked for site-packages (sys.base_prefix and\nsys.base_exec_prefix will always be the "real" prefixes of the Python\ninstallation). If "pyvenv.cfg" (a bootstrap configuration file) contains\nthe key "include-system-site-packages" set to anything other than "false"\n(case-insensitive), the system-level prefixes will still also be\nsearched for site-packages; otherwise they won\'t.\n\nAll of the resulting site-specific directories, if they exist, are\nappended to sys.path, and also inspected for path configuration\nfiles.\n\nA path configuration file is a file whose name has the form\n<package>.pth; its contents are additional directories (one per line)\nto be added to sys.path.  Non-existing directories (or\nnon-directories) are never added to sys.path; no directory is added to\nsys.path more than once.  Blank lines and lines beginning with\n\'#\' are skipped. Lines starting with \'import\' are executed.\n\nFor example, suppose sys.prefix and sys.exec_prefix are set to\n/usr/local and there is a directory /usr/local/lib/python2.5/site-packages\nwith three subdirectories, foo, bar and spam, and two path\nconfiguration files, foo.pth and bar.pth.  Assume foo.pth contains the\nfollowing:\n\n  # foo package configuration\n  foo\n  bar\n  bletch\n\nand bar.pth contains:\n\n  # bar package configuration\n  bar\n\nThen the following directories are added to sys.path, in this order:\n\n  /usr/local/lib/python2.5/site-packages/bar\n  /usr/local/lib/python2.5/site-packages/foo\n\nNote that bletch is omitted because it doesn\'t exist; bar precedes foo\nbecause bar.pth comes alphabetically before foo.pth; and spam is\nomitted because it is not mentioned in either path configuration file.\n\nThe readline module is also automatically configured to enable\ncompletion for systems that support it.  This can be overridden in\nsitecustomize, usercustomize or PYTHONSTARTUP.\n\nAfter these operations, an attempt is made to import a module\nnamed sitecustomize, which can perform arbitrary additional\nsite-specific customizations.  If this import fails with an\nImportError exception, it is silently ignored.\n"""\n\nimport sys\nimport os\nimport builtins\nimport _sitebuiltins\n\nis_pypy = \'__pypy__\' in sys.builtin_module_names\n\n# Prefixes for site-packages; add additional prefixes like /usr/local here\nPREFIXES = [sys.prefix, sys.exec_prefix]\n# Enable per user site-packages directory\n# set it to False to disable the feature or True to force the feature\nENABLE_USER_SITE = None\n\n# for distutils.commands.install\n# These values are initialized by the getuserbase() and getusersitepackages()\n# functions, through the main() function when Python starts.\nUSER_SITE = None\nUSER_BASE = None\n\n\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    try:\n        dir = os.path.abspath(dir)\n    except OSError:\n        pass\n    return dir, os.path.normcase(dir)\n\n\ndef abs_paths():\n    """Set all module __file__ and __cached__ attributes to an absolute path"""\n    for m in set(sys.modules.values()):\n        if (getattr(getattr(m, \'__loader__\', None), \'__module__\', None) not in\n                (\'_frozen_importlib\', \'_frozen_importlib_external\')):\n            continue   # don\'t mess with a PEP 302-supplied __file__\n        try:\n            m.__file__ = os.path.abspath(m.__file__)\n        except (AttributeError, OSError):\n            pass\n        try:\n            m.__cached__ = os.path.abspath(m.__cached__)\n        except (AttributeError, OSError):\n            pass\n\n\ndef removeduppaths():\n    """ Remove duplicate entries from sys.path along with making them\n    absolute"""\n    # This ensures that the initial path provided by the interpreter contains\n    # only absolute pathnames, even if we\'re running from the build directory.\n    L = []\n    known_paths = set()\n    for dir in sys.path:\n        # Filter out duplicate paths (on case-insensitive file systems also\n        # if they only differ in case); turn relative paths into absolute\n        # paths.\n        dir, dircase = makepath(dir)\n        if not dircase in known_paths:\n            L.append(dir)\n            known_paths.add(dircase)\n    sys.path[:] = L\n    return known_paths\n\n\ndef _init_pathinfo():\n    """Return a set containing all existing directory entries from sys.path"""\n    d = set()\n    for dir in sys.path:\n        try:\n            if os.path.isdir(dir):\n                dir, dircase = makepath(dir)\n                d.add(dircase)\n        except TypeError:\n            continue\n    return d\n\n\ndef addpackage(sitedir, name, known_paths):\n    """Process a .pth file within the site-packages directory:\n       For each line in the file, either combine it with sitedir to a path\n       and add that to known_paths, or execute it if it starts with \'import \'.\n    """\n    if known_paths is None:\n        known_paths = _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    fullname = os.path.join(sitedir, name)\n    try:\n        f = open(fullname, "r")\n    except OSError:\n        return\n    with f:\n        for n, line in enumerate(f):\n            if line.startswith("#"):\n                continue\n            try:\n                if line.startswith(("import ", "import\\t")):\n                    exec(line)\n                    continue\n                line = line.rstrip()\n                dir, dircase = makepath(sitedir, line)\n                if not dircase in known_paths and os.path.exists(dir):\n                    sys.path.append(dir)\n                    known_paths.add(dircase)\n            except Exception:\n                print("Error processing line {:d} of {}:\\n".format(n+1, fullname),\n                      file=sys.stderr)\n                import traceback\n                for record in traceback.format_exception(*sys.exc_info()):\n                    for line in record.splitlines():\n                        print(\'  \'+line, file=sys.stderr)\n                print("\\nRemainder of file ignored", file=sys.stderr)\n                break\n    if reset:\n        known_paths = None\n    return known_paths\n\n\ndef addsitedir(sitedir, known_paths=None):\n    """Add \'sitedir\' argument to sys.path if missing and handle .pth files in\n    \'sitedir\'"""\n    if known_paths is None:\n        known_paths = _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    sitedir, sitedircase = makepath(sitedir)\n    if not sitedircase in known_paths:\n        sys.path.append(sitedir)        # Add path component\n        known_paths.add(sitedircase)\n    try:\n        names = os.listdir(sitedir)\n    except OSError:\n        return\n    names = [name for name in names if name.endswith(".pth")]\n    for name in sorted(names):\n        addpackage(sitedir, name, known_paths)\n    if reset:\n        known_paths = None\n    return known_paths\n\n\ndef check_enableusersite():\n    """Check if user site directory is safe for inclusion\n\n    The function tests for the command line flag (including environment var),\n    process uid/gid equal to effective uid/gid.\n\n    None: Disabled for security reasons\n    False: Disabled by user (command line option)\n    True: Safe and enabled\n    """\n    if sys.flags.no_user_site:\n        return False\n\n    if hasattr(os, "getuid") and hasattr(os, "geteuid"):\n        # check process uid == effective uid\n        if os.geteuid() != os.getuid():\n            return None\n    if hasattr(os, "getgid") and hasattr(os, "getegid"):\n        # check process gid == effective gid\n        if os.getegid() != os.getgid():\n            return None\n\n    return True\n\ndef getuserbase():\n    """Returns the `user base` directory path.\n\n    The `user base` directory can be used to store data. If the global\n    variable ``USER_BASE`` is not initialized yet, this function will also set\n    it.\n    """\n    global USER_BASE\n    if USER_BASE is not None:\n        return USER_BASE\n    from sysconfig import get_config_var\n    USER_BASE = get_config_var(\'userbase\')\n    return USER_BASE\n\ndef getusersitepackages():\n    """Returns the user-specific site-packages directory path.\n\n    If the global variable ``USER_SITE`` is not initialized yet, this\n    function will also set it.\n    """\n    global USER_SITE\n    user_base = getuserbase() # this will also set USER_BASE\n\n    if USER_SITE is not None:\n        return USER_SITE\n\n    from sysconfig import get_path\n\n    if sys.platform == \'darwin\':\n        from sysconfig import get_config_var\n        if get_config_var(\'PYTHONFRAMEWORK\'):\n            USER_SITE = get_path(\'purelib\', \'osx_framework_user\')\n            return USER_SITE\n\n    USER_SITE = get_path(\'purelib\', \'%s_user\' % os.name)\n    return USER_SITE\n\ndef addusersitepackages(known_paths):\n    """Add a per user site-package to sys.path\n\n    Each user has its own python directory with site-packages in the\n    home directory.\n    """\n    # get the per user site-package path\n    # this call will also make sure USER_BASE and USER_SITE are set\n    user_site = getusersitepackages()\n\n    if ENABLE_USER_SITE and os.path.isdir(user_site):\n        addsitedir(user_site, known_paths)\n    return known_paths\n\ndef getsitepackages(prefixes=None):\n    """Returns a list containing all global site-packages directories.\n\n    For each directory present in ``prefixes`` (or the global ``PREFIXES``),\n    this function will find its `site-packages` subdirectory depending on the\n    system environment, and will return a list of full paths.\n    """\n    sitepackages = []\n    seen = set()\n\n    if prefixes is None:\n        prefixes = PREFIXES\n\n    for prefix in prefixes:\n        if not prefix or prefix in seen:\n            continue\n        seen.add(prefix)\n\n        if is_pypy:\n            sitepackages.append(os.path.join(prefix, "site-packages"))\n        elif os.sep == \'/\':\n            sitepackages.append(os.path.join(prefix, "lib",\n                                        "python" + sys.version[:3],\n                                        "site-packages"))\n        else:\n            sitepackages.append(prefix)\n            sitepackages.append(os.path.join(prefix, "lib", "site-packages"))\n        if sys.platform == "darwin":\n            # for framework builds *only* we add the standard Apple\n            # locations.\n            from sysconfig import get_config_var\n            framework = get_config_var("PYTHONFRAMEWORK")\n            if framework:\n                sitepackages.append(\n                        os.path.join("/Library", framework,\n                            sys.version[:3], "site-packages"))\n    return sitepackages\n\ndef addsitepackages(known_paths, prefixes=None):\n    """Add site-packages to sys.path"""\n    for sitedir in getsitepackages(prefixes):\n        if os.path.isdir(sitedir):\n            addsitedir(sitedir, known_paths)\n\n    return known_paths\n\ndef setquit():\n    """Define new builtins \'quit\' and \'exit\'.\n\n    These are objects which make the interpreter exit when called.\n    The repr of each object contains a hint at how it works.\n\n    """\n    if os.sep == \':\':\n        eof = \'Cmd-Q\'\n    elif os.sep == \'\\\\\':\n        eof = \'Ctrl-Z plus Return\'\n    else:\n        eof = \'Ctrl-D (i.e. EOF)\'\n\n    builtins.quit = _sitebuiltins.Quitter(\'quit\', eof)\n    builtins.exit = _sitebuiltins.Quitter(\'exit\', eof)\n\n\ndef setcopyright():\n    """Set \'copyright\' and \'credits\' in builtins"""\n    builtins.copyright = _sitebuiltins._Printer("copyright", sys.copyright)\n    licenseargs = None\n    if is_pypy:\n        credits = "PyPy is maintained by the PyPy developers: http://pypy.org/"\n        license = "See https://bitbucket.org/pypy/pypy/src/default/LICENSE"\n        licenseargs = (license,)\n    elif sys.platform[:4] == \'java\':\n        credits = ("Jython is maintained by the Jython developers "\n                   "(www.jython.org).")\n    else:\n        credits = """\\\n    Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information."""\n    if licenseargs is None:\n        files, dirs = [], []\n        # Not all modules are required to have a __file__ attribute.  See\n        # PEP 420 for more details.\n        if hasattr(os, \'__file__\'):\n            here = os.path.dirname(os.__file__)\n            files.extend(["LICENSE.txt", "LICENSE"])\n            dirs.extend([os.path.join(here, os.pardir), here, os.curdir])\n        license = "See https://www.python.org/psf/license/"\n        licenseargs = (license, files, dirs)\n\n    builtins.credits = _sitebuiltins._Printer("credits", credits)\n    builtins.license = _sitebuiltins._Printer("license", *licenseargs)\n\ndef sethelper():\n    builtins.help = _sitebuiltins._Helper()\n\ndef enablerlcompleter():\n    """Enable default readline configuration on interactive prompts, by\n    registering a sys.__interactivehook__.\n\n    If the readline module can be imported, the hook will set the Tab key\n    as completion key and register ~/.python_history as history file.\n    This can be overridden in the sitecustomize or usercustomize module,\n    or in a PYTHONSTARTUP file.\n    """\n    def register_readline():\n        import atexit\n        try:\n            import readline\n            import rlcompleter\n        except ImportError:\n            return\n\n        # Reading the initialization (config) file may not be enough to set a\n        # completion key, so we set one first and then read the file.\n        readline_doc = getattr(readline, \'__doc__\', \'\')\n        if readline_doc is not None and \'libedit\' in readline_doc:\n            readline.parse_and_bind(\'bind ^I rl_complete\')\n        else:\n            readline.parse_and_bind(\'tab: complete\')\n\n        try:\n            # Unimplemented on PyPy\n            #readline.read_init_file()\n            pass\n        except OSError:\n            # An OSError here could have many causes, but the most likely one\n            # is that there\'s no .inputrc file (or .editrc file in the case of\n            # Mac OS X + libedit) in the expected location.  In that case, we\n            # want to ignore the exception.\n            pass\n\n        if readline.get_current_history_length() == 0:\n            # If no history was loaded, default to .python_history.\n            # The guard is necessary to avoid doubling history size at\n            # each interpreter exit when readline was already configured\n            # through a PYTHONSTARTUP hook, see:\n            # http://bugs.python.org/issue5845#msg198636\n            history = os.path.join(os.path.expanduser(\'~\'),\n                                   \'.python_history\')\n            try:\n                readline.read_history_file(history)\n            except IOError:\n                pass\n            atexit.register(readline.write_history_file, history)\n\n    sys.__interactivehook__ = register_readline\n\ndef aliasmbcs():\n    """On Windows, some default encodings are not provided by Python,\n    while they are always available as "mbcs" in each locale. Make\n    them usable by aliasing to "mbcs" in such a case."""\n    if sys.platform == \'win32\':\n        import _bootlocale, codecs\n        enc = _bootlocale.getpreferredencoding(False)\n        if enc.startswith(\'cp\'):            # "cp***" ?\n            try:\n                codecs.lookup(enc)\n            except LookupError:\n                import encodings\n                encodings._cache[enc] = encodings._unknown\n                encodings.aliases.aliases[enc] = \'mbcs\'\n\nCONFIG_LINE = r\'^(?P<key>(\\w|[-_])+)\\s*=\\s*(?P<value>.*)\\s*$\'\n\ndef venv(known_paths):\n    global PREFIXES, ENABLE_USER_SITE\n\n    env = os.environ\n    if sys.platform == \'darwin\' and \'__PYVENV_LAUNCHER__\' in env:\n        executable = os.environ[\'__PYVENV_LAUNCHER__\']\n    else:\n        executable = sys.executable\n    exe_dir, _ = os.path.split(os.path.abspath(executable))\n    site_prefix = os.path.dirname(exe_dir)\n    sys._home = None\n    conf_basename = \'pyvenv.cfg\'\n    candidate_confs = [\n        conffile for conffile in (\n            os.path.join(exe_dir, conf_basename),\n            os.path.join(site_prefix, conf_basename)\n            )\n        if os.path.isfile(conffile)\n        ]\n\n    if candidate_confs:\n        import re\n        config_line = re.compile(CONFIG_LINE)\n        virtual_conf = candidate_confs[0]\n        system_site = "true"\n        # Issue 25185: Use UTF-8, as that\'s what the venv module uses when\n        # writing the file.\n        with open(virtual_conf, encoding=\'utf-8\') as f:\n            for line in f:\n                line = line.strip()\n                m = config_line.match(line)\n                if m:\n                    d = m.groupdict()\n                    key, value = d[\'key\'].lower(), d[\'value\']\n                    if key == \'include-system-site-packages\':\n                        system_site = value.lower()\n                    elif key == \'home\':\n                        sys._home = value\n                    elif key == \'applocal\' and value.lower() == \'true\':\n                        # App-local installs use the exe_dir as prefix,\n                        # not one level higher, and do not use system\n                        # site packages.\n                        site_prefix = exe_dir\n                        system_site = \'false\'\n\n        sys.prefix = sys.exec_prefix = site_prefix\n\n        # Doing this here ensures venv takes precedence over user-site\n        addsitepackages(known_paths, [sys.prefix])\n\n        # addsitepackages will process site_prefix again if its in PREFIXES,\n        # but that\'s ok; known_paths will prevent anything being added twice\n        if system_site == "true":\n            PREFIXES.insert(0, sys.prefix)\n        else:\n            PREFIXES = [sys.prefix]\n            ENABLE_USER_SITE = False\n\n    return known_paths\n\n\ndef execsitecustomize():\n    """Run custom site specific code, if available."""\n    try:\n        import sitecustomize\n    except ImportError:\n        pass\n    except Exception as err:\n        if os.environ.get("PYTHONVERBOSE"):\n            sys.excepthook(*sys.exc_info())\n        else:\n            sys.stderr.write(\n                "Error in sitecustomize; set PYTHONVERBOSE for traceback:\\n"\n                "%s: %s\\n" %\n                (err.__class__.__name__, err))\n\n\ndef execusercustomize():\n    """Run custom user specific code, if available."""\n    try:\n        import usercustomize\n    except ImportError:\n        pass\n    except Exception as err:\n        if os.environ.get("PYTHONVERBOSE"):\n            sys.excepthook(*sys.exc_info())\n        else:\n            sys.stderr.write(\n                "Error in usercustomize; set PYTHONVERBOSE for traceback:\\n"\n                "%s: %s\\n" %\n                (err.__class__.__name__, err))\n\n\ndef main():\n    """Add standard site-specific directories to the module search path.\n\n    This function is called automatically when this module is imported,\n    unless the python interpreter was started with the -S flag.\n    """\n    global ENABLE_USER_SITE\n\n    abs_paths()\n    known_paths = removeduppaths()\n    known_paths = venv(known_paths)\n    if ENABLE_USER_SITE is None:\n        ENABLE_USER_SITE = check_enableusersite()\n    known_paths = addusersitepackages(known_paths)\n    known_paths = addsitepackages(known_paths)\n    setquit()\n    setcopyright()\n    sethelper()\n    enablerlcompleter()\n    aliasmbcs()\n    execsitecustomize()\n    if ENABLE_USER_SITE:\n        execusercustomize()\n\n# Prevent edition of sys.path when python was started with -S and\n# site is imported later.\nif not sys.flags.no_site:\n    main()\n\ndef _script():\n    help = """\\\n    %s [--user-base] [--user-site]\n\n    Without arguments print some useful information\n    With arguments print the value of USER_BASE and/or USER_SITE separated\n    by \'%s\'.\n\n    Exit codes with --user-base or --user-site:\n      0 - user site directory is enabled\n      1 - user site directory is disabled by user\n      2 - uses site directory is disabled by super user\n          or for security reasons\n     >2 - unknown error\n    """\n    args = sys.argv[1:]\n    if not args:\n        user_base = getuserbase()\n        user_site = getusersitepackages()\n        print("sys.path = [")\n        for dir in sys.path:\n            print("    %r," % (dir,))\n        print("]")\n        print("USER_BASE: %r (%s)" % (user_base,\n            "exists" if os.path.isdir(user_base) else "doesn\'t exist"))\n        print("USER_SITE: %r (%s)" % (user_site,\n            "exists" if os.path.isdir(user_site) else "doesn\'t exist"))\n        print("ENABLE_USER_SITE: %r" %  ENABLE_USER_SITE)\n        sys.exit(0)\n\n    buffer = []\n    if \'--user-base\' in args:\n        buffer.append(USER_BASE)\n    if \'--user-site\' in args:\n        buffer.append(USER_SITE)\n\n    if buffer:\n        print(os.pathsep.join(buffer))\n        if ENABLE_USER_SITE:\n            sys.exit(0)\n        elif ENABLE_USER_SITE is False:\n            sys.exit(1)\n        elif ENABLE_USER_SITE is None:\n            sys.exit(2)\n        else:\n            sys.exit(3)\n    else:\n        import textwrap\n        print(textwrap.dedent(help % (sys.argv[0], os.pathsep)))\n        sys.exit(10)\n\nif __name__ == \'__main__\':\n    _script()\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'"""Append module search paths for third-party packages to sys.path.\n\n****************************************************************\n* This module is automatically imported during initialization. *\n****************************************************************\n\nThis will append site-specific paths to the module search path.  On\nUnix (including Mac OSX), it starts with sys.prefix and\nsys.exec_prefix (if different) and appends\nlib/python<version>/site-packages.\nOn other platforms (such as Windows), it tries each of the\nprefixes directly, as well as with lib/site-packages appended.  The\nresulting directories, if they exist, are appended to sys.path, and\nalso inspected for path configuration files.\n\nIf a file named "pyvenv.cfg" exists one directory above sys.executable,\nsys.prefix and sys.exec_prefix are set to that directory and\nit is also checked for site-packages (sys.base_prefix and\nsys.base_exec_prefix will always be the "real" prefixes of the Python\ninstallation). If "pyvenv.cfg" (a bootstrap configuration file) contains\nthe key "include-system-site-packages" set to anything other than "false"\n(case-insensitive), the system-level prefixes will still also be\nsearched for site-packages; otherwise they won\'t.\n\nAll of the resulting site-specific directories, if they exist, are\nappended to sys.path, and also inspected for path configuration\nfiles.\n\nA path configuration file is a file whose name has the form\n<package>.pth; its contents are additional directories (one per line)\nto be added to sys.path.  Non-existing directories (or\nnon-directories) are never added to sys.path; no directory is added to\nsys.path more than once.  Blank lines and lines beginning with\n\'#\' are skipped. Lines starting with \'import\' are executed.\n\nFor example, suppose sys.prefix and sys.exec_prefix are set to\n/usr/local and there is a directory /usr/local/lib/python2.5/site-packages\nwith three subdirectories, foo, bar and spam, and two path\nconfiguration files, foo.pth and bar.pth.  Assume foo.pth contains the\nfollowing:\n\n  # foo package configuration\n  foo\n  bar\n  bletch\n\nand bar.pth contains:\n\n  # bar package configuration\n  bar\n\nThen the following directories are added to sys.path, in this order:\n\n  /usr/local/lib/python2.5/site-packages/bar\n  /usr/local/lib/python2.5/site-packages/foo\n\nNote that bletch is omitted because it doesn\'t exist; bar precedes foo\nbecause bar.pth comes alphabetically before foo.pth; and spam is\nomitted because it is not mentioned in either path configuration file.\n\nThe readline module is also automatically configured to enable\ncompletion for systems that support it.  This can be overridden in\nsitecustomize, usercustomize or PYTHONSTARTUP.\n\nAfter these operations, an attempt is made to import a module\nnamed sitecustomize, which can perform arbitrary additional\nsite-specific customizations.  If this import fails with an\nImportError exception, it is silently ignored.\n"""\n\nimport sys\nimport os\nimport builtins\nimport _sitebuiltins\n\nis_pypy = \'__pypy__\' in sys.builtin_module_names\n\n# Prefixes for site-packages; add additional prefixes like /usr/local here\nPREFIXES = [sys.prefix, sys.exec_prefix]\n# Enable per user site-packages directory\n# set it to False to disable the feature or True to force the feature\nENABLE_USER_SITE = None\n\n# for distutils.commands.install\n# These values are initialized by the getuserbase() and getusersitepackages()\n# functions, through the main() function when Python starts.\nUSER_SITE = None\nUSER_BASE = None\n\n\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    try:\n        dir = os.path.abspath(dir)\n    except OSError:\n        pass\n    return dir, os.path.normcase(dir)\n\n\ndef abs_paths():\n    """Set all module __file__ and __cached__ attributes to an absolute path"""\n    for m in set(sys.modules.values()):\n        if (getattr(getattr(m, \'__loader__\', None), \'__module__\', None) not in\n                (\'_frozen_importlib\', \'_frozen_importlib_external\')):\n            continue   # don\'t mess with a PEP 302-supplied __file__\n        try:\n            m.__file__ = os.path.abspath(m.__file__)\n        except (AttributeError, OSError):\n            pass\n        try:\n            m.__cached__ = os.path.abspath(m.__cached__)\n        except (AttributeError, OSError):\n            pass\n\n\ndef removeduppaths():\n    """ Remove duplicate entries from sys.path along with making them\n    absolute"""\n    # This ensures that the initial path provided by the interpreter contains\n    # only absolute pathnames, even if we\'re running from the build directory.\n    L = []\n    known_paths = set()\n    for dir in sys.path:\n        # Filter out duplicate paths (on case-insensitive file systems also\n        # if they only differ in case); turn relative paths into absolute\n        # paths.\n        dir, dircase = makepath(dir)\n        if not dircase in known_paths:\n            L.append(dir)\n            known_paths.add(dircase)\n    sys.path[:] = L\n    return known_paths\n\n\ndef _init_pathinfo():\n    """Return a set containing all existing directory entries from sys.path"""\n    d = set()\n    for dir in sys.path:\n        try:\n            if os.path.isdir(dir):\n                dir, dircase = makepath(dir)\n                d.add(dircase)\n        except TypeError:\n            continue\n    return d\n\n\ndef addpackage(sitedir, name, known_paths):\n    """Process a .pth file within the site-packages directory:\n       For each line in the file, either combine it with sitedir to a path\n       and add that to known_paths, or execute it if it starts with \'import \'.\n    """\n    if known_paths is None:\n        known_paths = _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    fullname = os.path.join(sitedir, name)\n    try:\n        f = open(fullname, "r")\n    except OSError:\n        return\n    with f:\n        for n, line in enumerate(f):\n            if line.startswith("#"):\n                continue\n            try:\n                if line.startswith(("import ", "import\\t")):\n                    exec(line)\n                    continue\n                line = line.rstrip()\n                dir, dircase = makepath(sitedir, line)\n                if not dircase in known_paths and os.path.exists(dir):\n                    sys.path.append(dir)\n                    known_paths.add(dircase)\n            except Exception:\n                print("Error processing line {:d} of {}:\\n".format(n+1, fullname),\n                      file=sys.stderr)\n                import traceback\n                for record in traceback.format_exception(*sys.exc_info()):\n                    for line in record.splitlines():\n                        print(\'  \'+line, file=sys.stderr)\n                print("\\nRemainder of file ignored", file=sys.stderr)\n                break\n    if reset:\n        known_paths = None\n    return known_paths\n\n\ndef addsitedir(sitedir, known_paths=None):\n    """Add \'sitedir\' argument to sys.path if missing and handle .pth files in\n    \'sitedir\'"""\n    if known_paths is None:\n        known_paths = _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    sitedir, sitedircase = makepath(sitedir)\n    if not sitedircase in known_paths:\n        sys.path.append(sitedir)        # Add path component\n        known_paths.add(sitedircase)\n    try:\n        names = os.listdir(sitedir)\n    except OSError:\n        return\n    names = [name for name in names if name.endswith(".pth")]\n    for name in sorted(names):\n        addpackage(sitedir, name, known_paths)\n    if reset:\n        known_paths = None\n    return known_paths\n\n\ndef check_enableusersite():\n    """Check if user site directory is safe for inclusion\n\n    The function tests for the command line flag (including environment var),\n    process uid/gid equal to effective uid/gid.\n\n    None: Disabled for security reasons\n    False: Disabled by user (command line option)\n    True: Safe and enabled\n    """\n    if sys.flags.no_user_site:\n        return False\n\n    if hasattr(os, "getuid") and hasattr(os, "geteuid"):\n        # check process uid == effective uid\n        if os.geteuid() != os.getuid():\n            return None\n    if hasattr(os, "getgid") and hasattr(os, "getegid"):\n        # check process gid == effective gid\n        if os.getegid() != os.getgid():\n            return None\n\n    return True\n\ndef getuserbase():\n    """Returns the `user base` directory path.\n\n    The `user base` directory can be used to store data. If the global\n    variable ``USER_BASE`` is not initialized yet, this function will also set\n    it.\n    """\n    global USER_BASE\n    if USER_BASE is not None:\n        return USER_BASE\n    from sysconfig import get_config_var\n    USER_BASE = get_config_var(\'userbase\')\n    return USER_BASE\n\ndef getusersitepackages():\n    """Returns the user-specific site-packages directory path.\n\n    If the global variable ``USER_SITE`` is not initialized yet, this\n    function will also set it.\n    """\n    global USER_SITE\n    user_base = getuserbase() # this will also set USER_BASE\n\n    if USER_SITE is not None:\n        return USER_SITE\n\n    from sysconfig import get_path\n\n    if sys.platform == \'darwin\':\n        from sysconfig import get_config_var\n        if get_config_var(\'PYTHONFRAMEWORK\'):\n            USER_SITE = get_path(\'purelib\', \'osx_framework_user\')\n            return USER_SITE\n\n    USER_SITE = get_path(\'purelib\', \'%s_user\' % os.name)\n    return USER_SITE\n\ndef addusersitepackages(known_paths):\n    """Add a per user site-package to sys.path\n\n    Each user has its own python directory with site-packages in the\n    home directory.\n    """\n    # get the per user site-package path\n    # this call will also make sure USER_BASE and USER_SITE are set\n    user_site = getusersitepackages()\n\n    if ENABLE_USER_SITE and os.path.isdir(user_site):\n        addsitedir(user_site, known_paths)\n    return known_paths\n\ndef getsitepackages(prefixes=None):\n    """Returns a list containing all global site-packages directories.\n\n    For each directory present in ``prefixes`` (or the global ``PREFIXES``),\n    this function will find its `site-packages` subdirectory depending on the\n    system environment, and will return a list of full paths.\n    """\n    sitepackages = []\n    seen = set()\n\n    if prefixes is None:\n        prefixes = PREFIXES\n\n    for prefix in prefixes:\n        if not prefix or prefix in seen:\n            continue\n        seen.add(prefix)\n\n        if is_pypy:\n            sitepackages.append(os.path.join(prefix, "site-packages"))\n        elif os.sep == \'/\':\n            sitepackages.append(os.path.join(prefix, "lib",\n                                        "python" + sys.version[:3],\n                                        "site-packages"))\n        else:\n            sitepackages.append(prefix)\n            sitepackages.append(os.path.join(prefix, "lib", "site-packages"))\n        if sys.platform == "darwin":\n            # for framework builds *only* we add the standard Apple\n            # locations.\n            from sysconfig import get_config_var\n            framework = get_config_var("PYTHONFRAMEWORK")\n            if framework:\n                sitepackages.append(\n                        os.path.join("/Library", framework,\n                            sys.version[:3], "site-packages"))\n    return sitepackages\n\ndef addsitepackages(known_paths, prefixes=None):\n    """Add site-packages to sys.path"""\n    for sitedir in getsitepackages(prefixes):\n        if os.path.isdir(sitedir):\n            addsitedir(sitedir, known_paths)\n\n    return known_paths\n\ndef setquit():\n    """Define new builtins \'quit\' and \'exit\'.\n\n    These are objects which make the interpreter exit when called.\n    The repr of each object contains a hint at how it works.\n\n    """\n    if os.sep == \':\':\n        eof = \'Cmd-Q\'\n    elif os.sep == \'\\\\\':\n        eof = \'Ctrl-Z plus Return\'\n    else:\n        eof = \'Ctrl-D (i.e. EOF)\'\n\n    builtins.quit = _sitebuiltins.Quitter(\'quit\', eof)\n    builtins.exit = _sitebuiltins.Quitter(\'exit\', eof)\n\n\ndef setcopyright():\n    """Set \'copyright\' and \'credits\' in builtins"""\n    builtins.copyright = _sitebuiltins._Printer("copyright", sys.copyright)\n    licenseargs = None\n    if is_pypy:\n        credits = "PyPy is maintained by the PyPy developers: http://pypy.org/"\n        license = "See https://bitbucket.org/pypy/pypy/src/default/LICENSE"\n        licenseargs = (license,)\n    elif sys.platform[:4] == \'java\':\n        credits = ("Jython is maintained by the Jython developers "\n                   "(www.jython.org).")\n    else:\n        credits = """\\\n    Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information."""\n    if licenseargs is None:\n        files, dirs = [], []\n        # Not all modules are required to have a __file__ attribute.  See\n        # PEP 420 for more details.\n        if hasattr(os, \'__file__\'):\n            here = os.path.dirname(os.__file__)\n            files.extend(["LICENSE.txt", "LICENSE"])\n            dirs.extend([os.path.join(here, os.pardir), here, os.curdir])\n        license = "See https://www.python.org/psf/license/"\n        licenseargs = (license, files, dirs)\n\n    builtins.credits = _sitebuiltins._Printer("credits", credits)\n    builtins.license = _sitebuiltins._Printer("license", *licenseargs)\n\ndef sethelper():\n    builtins.help = _sitebuiltins._Helper()\n\ndef enablerlcompleter():\n    """Enable default readline configuration on interactive prompts, by\n    registering a sys.__interactivehook__.\n\n    If the readline module can be imported, the hook will set the Tab key\n    as completion key and register ~/.python_history as history file.\n    This can be overridden in the sitecustomize or usercustomize module,\n    or in a PYTHONSTARTUP file.\n    """\n    def register_readline():\n        import atexit\n        try:\n            import readline\n            import rlcompleter\n        except ImportError:\n            return\n\n        # Reading the initialization (config) file may not be enough to set a\n        # completion key, so we set one first and then read the file.\n        readline_doc = getattr(readline, \'__doc__\', \'\')\n        if readline_doc is not None and \'libedit\' in readline_doc:\n            readline.parse_and_bind(\'bind ^I rl_complete\')\n        else:\n            readline.parse_and_bind(\'tab: complete\')\n\n        try:\n            # Unimplemented on PyPy\n            #readline.read_init_file()\n            pass\n        except OSError:\n            # An OSError here could have many causes, but the most likely one\n            # is that there\'s no .inputrc file (or .editrc file in the case of\n            # Mac OS X + libedit) in the expected location.  In that case, we\n            # want to ignore the exception.\n            pass\n\n        if readline.get_current_history_length() == 0:\n            # If no history was loaded, default to .python_history.\n            # The guard is necessary to avoid doubling history size at\n            # each interpreter exit when readline was already configured\n            # through a PYTHONSTARTUP hook, see:\n            # http://bugs.python.org/issue5845#msg198636\n            history = os.path.join(os.path.expanduser(\'~\'),\n                                   \'.python_history\')\n            try:\n                readline.read_history_file(history)\n            except IOError:\n                pass\n            atexit.register(readline.write_history_file, history)\n\n    sys.__interactivehook__ = register_readline\n\ndef aliasmbcs():\n    """On Windows, some default encodings are not provided by Python,\n    while they are always available as "mbcs" in each locale. Make\n    them usable by aliasing to "mbcs" in such a case."""\n    if sys.platform == \'win32\':\n        import _bootlocale, codecs\n        enc = _bootlocale.getpreferredencoding(False)\n        if enc.startswith(\'cp\'):            # "cp***" ?\n            try:\n                codecs.lookup(enc)\n            except LookupError:\n                import encodings\n                encodings._cache[enc] = encodings._unknown\n                encodings.aliases.aliases[enc] = \'mbcs\'\n\nCONFIG_LINE = r\'^(?P<key>(\\w|[-_])+)\\s*=\\s*(?P<value>.*)\\s*$\'\n\ndef venv(known_paths):\n    global PREFIXES, ENABLE_USER_SITE\n\n    env = os.environ\n    if sys.platform == \'darwin\' and \'__PYVENV_LAUNCHER__\' in env:\n        executable = os.environ[\'__PYVENV_LAUNCHER__\']\n    else:\n        executable = sys.executable\n    exe_dir, _ = os.path.split(os.path.abspath(executable))\n    site_prefix = os.path.dirname(exe_dir)\n    sys._home = None\n    conf_basename = \'pyvenv.cfg\'\n    candidate_confs = [\n        conffile for conffile in (\n            os.path.join(exe_dir, conf_basename),\n            os.path.join(site_prefix, conf_basename)\n            )\n        if os.path.isfile(conffile)\n        ]\n\n    if candidate_confs:\n        import re\n        config_line = re.compile(CONFIG_LINE)\n        virtual_conf = candidate_confs[0]\n        system_site = "true"\n        # Issue 25185: Use UTF-8, as that\'s what the venv module uses when\n        # writing the file.\n        with open(virtual_conf, encoding=\'utf-8\') as f:\n            for line in f:\n                line = line.strip()\n                m = config_line.match(line)\n                if m:\n                    d = m.groupdict()\n                    key, value = d[\'key\'].lower(), d[\'value\']\n                    if key == \'include-system-site-packages\':\n                        system_site = value.lower()\n                    elif key == \'home\':\n                        sys._home = value\n                    elif key == \'applocal\' and value.lower() == \'true\':\n                        # App-local installs use the exe_dir as prefix,\n                        # not one level higher, and do not use system\n                        # site packages.\n                        site_prefix = exe_dir\n                        system_site = \'false\'\n\n        sys.prefix = sys.exec_prefix = site_prefix\n\n        # Doing this here ensures venv takes precedence over user-site\n        addsitepackages(known_paths, [sys.prefix])\n\n        # addsitepackages will process site_prefix again if its in PREFIXES,\n        # but that\'s ok; known_paths will prevent anything being added twice\n        if system_site == "true":\n            PREFIXES.insert(0, sys.prefix)\n        else:\n            PREFIXES = [sys.prefix]\n            ENABLE_USER_SITE = False\n\n    return known_paths\n\n\ndef execsitecustomize():\n    """Run custom site specific code, if available."""\n    try:\n        import sitecustomize\n    except ImportError:\n        pass\n    except Exception as err:\n        if os.environ.get("PYTHONVERBOSE"):\n            sys.excepthook(*sys.exc_info())\n        else:\n            sys.stderr.write(\n                "Error in sitecustomize; set PYTHONVERBOSE for traceback:\\n"\n                "%s: %s\\n" %\n                (err.__class__.__name__, err))\n\n\ndef execusercustomize():\n    """Run custom user specific code, if available."""\n    try:\n        import usercustomize\n    except ImportError:\n        pass\n    except Exception as err:\n        if os.environ.get("PYTHONVERBOSE"):\n            sys.excepthook(*sys.exc_info())\n        else:\n            sys.stderr.write(\n                "Error in usercustomize; set PYTHONVERBOSE for traceback:\\n"\n                "%s: %s\\n" %\n                (err.__class__.__name__, err))\n\n\ndef main():\n    """Add standard site-specific directories to the module search path.\n\n    This function is called automatically when this module is imported,\n    unless the python interpreter was started with the -S flag.\n    """\n    global ENABLE_USER_SITE\n\n    abs_paths()\n    known_paths = removeduppaths()\n    known_paths = venv(known_paths)\n    if ENABLE_USER_SITE is None:\n        ENABLE_USER_SITE = check_enableusersite()\n    known_paths = addusersitepackages(known_paths)\n    known_paths = addsitepackages(known_paths)\n    setquit()\n    setcopyright()\n    sethelper()\n    enablerlcompleter()\n    aliasmbcs()\n    execsitecustomize()\n    if ENABLE_USER_SITE:\n        execusercustomize()\n\n# Prevent edition of sys.path when python was started with -S and\n# site is imported later.\nif not sys.flags.no_site:\n    main()\n\ndef _script():\n    help = """\\\n    %s [--user-base] [--user-site]\n\n    Without arguments print some useful information\n    With arguments print the value of USER_BASE and/or USER_SITE separated\n    by \'%s\'.\n\n    Exit codes with --user-base or --user-site:\n      0 - user site directory is enabled\n      1 - user site directory is disabled by user\n      2 - uses site directory is disabled by super user\n          or for security reasons\n     >2 - unknown error\n    """\n    args = sys.argv[1:]\n    if not args:\n        user_base = getuserbase()\n        user_site = getusersitepackages()\n        print("sys.path = [")\n        for dir in sys.path:\n            print("    %r," % (dir,))\n        print("]")\n        print("USER_BASE: %r (%s)" % (user_base,\n            "exists" if os.path.isdir(user_base) else "doesn\'t exist"))\n        print("USER_SITE: %r (%s)" % (user_site,\n            "exists" if os.path.isdir(user_site) else "doesn\'t exist"))\n        print("ENABLE_USER_SITE: %r" %  ENABLE_USER_SITE)\n        sys.exit(0)\n\n    buffer = []\n    if \'--user-base\' in args:\n        buffer.append(USER_BASE)\n    if \'--user-site\' in args:\n        buffer.append(USER_SITE)\n\n    if buffer:\n        print(os.pathsep.join(buffer))\n        if ENABLE_USER_SITE:\n            sys.exit(0)\n        elif ENABLE_USER_SITE is False:\n            sys.exit(1)\n        elif ENABLE_USER_SITE is None:\n            sys.exit(2)\n        else:\n            sys.exit(3)\n    else:\n        import textwrap\n        print(textwrap.dedent(help % (sys.argv[0], os.pathsep)))\n        sys.exit(10)\n\nif __name__ == \'__main__\':\n    _script()\n', resulttype=None
dump b'"""Append module search paths for third-party packages to sys.path.\n\n****************************************************************\n* This module is automatically imported during initialization. *\n****************************************************************\n\nThis will append site-specific paths to the module search path.  On\nUnix (including Mac OSX), it starts with sys.prefix and\nsys.exec_prefix (if different) and appends\nlib/python<version>/site-packages.\nOn other platforms (such as Windows), it tries each of the\nprefixes directly, as well as with lib/site-packages appended.  The\nresulting directories, if they exist, are appended to sys.path, and\nalso inspected for path configuration files.\n\nIf a file named "pyvenv.cfg" exists one directory above sys.executable,\nsys.prefix and sys.exec_prefix are set to that directory and\nit is also checked for site-packages (sys.base_prefix and\nsys.base_exec_prefix will always be the "real" prefixes of the Python\ninstallation). If "pyvenv.cfg" (a bootstrap configuration file) contains\nthe key "include-system-site-packages" set to anything other than "false"\n(case-insensitive), the system-level prefixes will still also be\nsearched for site-packages; otherwise they won\'t.\n\nAll of the resulting site-specific directories, if they exist, are\nappended to sys.path, and also inspected for path configuration\nfiles.\n\nA path configuration file is a file whose name has the form\n<package>.pth; its contents are additional directories (one per line)\nto be added to sys.path.  Non-existing directories (or\nnon-directories) are never added to sys.path; no directory is added to\nsys.path more than once.  Blank lines and lines beginning with\n\'#\' are skipped. Lines starting with \'import\' are executed.\n\nFor example, suppose sys.prefix and sys.exec_prefix are set to\n/usr/local and there is a directory /usr/local/lib/python2.5/site-packages\nwith three subdirectories, foo, bar and spam, and two path\nconfiguration files, foo.pth and bar.pth.  Assume foo.pth contains the\nfollowing:\n\n  # foo package configuration\n  foo\n  bar\n  bletch\n\nand bar.pth contains:\n\n  # bar package configuration\n  bar\n\nThen the following directories are added to sys.path, in this order:\n\n  /usr/local/lib/python2.5/site-packages/bar\n  /usr/local/lib/python2.5/site-packages/foo\n\nNote that bletch is omitted because it doesn\'t exist; bar precedes foo\nbecause bar.pth comes alphabetically before foo.pth; and spam is\nomitted because it is not mentioned in either path configuration file.\n\nThe readline module is also automatically configured to enable\ncompletion for systems that support it.  This can be overridden in\nsitecustomize, usercustomize or PYTHONSTARTUP.\n\nAfter these operations, an attempt is made to import a module\nnamed sitecustomize, which can perform arbitrary additional\nsite-specific customizations.  If this import fails with an\nImportError exception, it is silently ignored.\n"""\n\nimport sys\nimport os\nimport builtins\nimport _sitebuiltins\n\nis_pypy = \'__pypy__\' in sys.builtin_module_names\n\n# Prefixes for site-packages; add additional prefixes like /usr/local here\nPREFIXES = [sys.prefix, sys.exec_prefix]\n# Enable per user site-packages directory\n# set it to False to disable the feature or True to force the feature\nENABLE_USER_SITE = None\n\n# for distutils.commands.install\n# These values are initialized by the getuserbase() and getusersitepackages()\n# functions, through the main() function when Python starts.\nUSER_SITE = None\nUSER_BASE = None\n\n\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    try:\n        dir = os.path.abspath(dir)\n    except OSError:\n        pass\n    return dir, os.path.normcase(dir)\n\n\ndef abs_paths():\n    """Set all module __file__ and __cached__ attributes to an absolute path"""\n    for m in set(sys.modules.values()):\n        if (getattr(getattr(m, \'__loader__\', None), \'__module__\', None) not in\n                (\'_frozen_importlib\', \'_frozen_importlib_external\')):\n            continue   # don\'t mess with a PEP 302-supplied __file__\n        try:\n            m.__file__ = os.path.abspath(m.__file__)\n        except (AttributeError, OSError):\n            pass\n        try:\n            m.__cached__ = os.path.abspath(m.__cached__)\n        except (AttributeError, OSError):\n            pass\n\n\ndef removeduppaths():\n    """ Remove duplicate entries from sys.path along with making them\n    absolute"""\n    # This ensures that the initial path provided by the interpreter contains\n    # only absolute pathnames, even if we\'re running from the build directory.\n    L = []\n    known_paths = set()\n    for dir in sys.path:\n        # Filter out duplicate paths (on case-insensitive file systems also\n        # if they only differ in case); turn relative paths into absolute\n        # paths.\n        dir, dircase = makepath(dir)\n        if not dircase in known_paths:\n            L.append(dir)\n            known_paths.add(dircase)\n    sys.path[:] = L\n    return known_paths\n\n\ndef _init_pathinfo():\n    """Return a set containing all existing directory entries from sys.path"""\n    d = set()\n    for dir in sys.path:\n        try:\n            if os.path.isdir(dir):\n                dir, dircase = makepath(dir)\n                d.add(dircase)\n        except TypeError:\n            continue\n    return d\n\n\ndef addpackage(sitedir, name, known_paths):\n    """Process a .pth file within the site-packages directory:\n       For each line in the file, either combine it with sitedir to a path\n       and add that to known_paths, or execute it if it starts with \'import \'.\n    """\n    if known_paths is None:\n        known_paths = _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    fullname = os.path.join(sitedir, name)\n    try:\n        f = open(fullname, "r")\n    except OSError:\n        return\n    with f:\n        for n, line in enumerate(f):\n            if line.startswith("#"):\n                continue\n            try:\n                if line.startswith(("import ", "import\\t")):\n                    exec(line)\n                    continue\n                line = line.rstrip()\n                dir, dircase = makepath(sitedir, line)\n                if not dircase in known_paths and os.path.exists(dir):\n                    sys.path.append(dir)\n                    known_paths.add(dircase)\n            except Exception:\n                print("Error processing line {:d} of {}:\\n".format(n+1, fullname),\n                      file=sys.stderr)\n                import traceback\n                for record in traceback.format_exception(*sys.exc_info()):\n                    for line in record.splitlines():\n                        print(\'  \'+line, file=sys.stderr)\n                print("\\nRemainder of file ignored", file=sys.stderr)\n                break\n    if reset:\n        known_paths = None\n    return known_paths\n\n\ndef addsitedir(sitedir, known_paths=None):\n    """Add \'sitedir\' argument to sys.path if missing and handle .pth files in\n    \'sitedir\'"""\n    if known_paths is None:\n        known_paths = _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    sitedir, sitedircase = makepath(sitedir)\n    if not sitedircase in known_paths:\n        sys.path.append(sitedir)        # Add path component\n        known_paths.add(sitedircase)\n    try:\n        names = os.listdir(sitedir)\n    except OSError:\n        return\n    names = [name for name in names if name.endswith(".pth")]\n    for name in sorted(names):\n        addpackage(sitedir, name, known_paths)\n    if reset:\n        known_paths = None\n    return known_paths\n\n\ndef check_enableusersite():\n    """Check if user site directory is safe for inclusion\n\n    The function tests for the command line flag (including environment var),\n    process uid/gid equal to effective uid/gid.\n\n    None: Disabled for security reasons\n    False: Disabled by user (command line option)\n    True: Safe and enabled\n    """\n    if sys.flags.no_user_site:\n        return False\n\n    if hasattr(os, "getuid") and hasattr(os, "geteuid"):\n        # check process uid == effective uid\n        if os.geteuid() != os.getuid():\n            return None\n    if hasattr(os, "getgid") and hasattr(os, "getegid"):\n        # check process gid == effective gid\n        if os.getegid() != os.getgid():\n            return None\n\n    return True\n\ndef getuserbase():\n    """Returns the `user base` directory path.\n\n    The `user base` directory can be used to store data. If the global\n    variable ``USER_BASE`` is not initialized yet, this function will also set\n    it.\n    """\n    global USER_BASE\n    if USER_BASE is not None:\n        return USER_BASE\n    from sysconfig import get_config_var\n    USER_BASE = get_config_var(\'userbase\')\n    return USER_BASE\n\ndef getusersitepackages():\n    """Returns the user-specific site-packages directory path.\n\n    If the global variable ``USER_SITE`` is not initialized yet, this\n    function will also set it.\n    """\n    global USER_SITE\n    user_base = getuserbase() # this will also set USER_BASE\n\n    if USER_SITE is not None:\n        return USER_SITE\n\n    from sysconfig import get_path\n\n    if sys.platform == \'darwin\':\n        from sysconfig import get_config_var\n        if get_config_var(\'PYTHONFRAMEWORK\'):\n            USER_SITE = get_path(\'purelib\', \'osx_framework_user\')\n            return USER_SITE\n\n    USER_SITE = get_path(\'purelib\', \'%s_user\' % os.name)\n    return USER_SITE\n\ndef addusersitepackages(known_paths):\n    """Add a per user site-package to sys.path\n\n    Each user has its own python directory with site-packages in the\n    home directory.\n    """\n    # get the per user site-package path\n    # this call will also make sure USER_BASE and USER_SITE are set\n    user_site = getusersitepackages()\n\n    if ENABLE_USER_SITE and os.path.isdir(user_site):\n        addsitedir(user_site, known_paths)\n    return known_paths\n\ndef getsitepackages(prefixes=None):\n    """Returns a list containing all global site-packages directories.\n\n    For each directory present in ``prefixes`` (or the global ``PREFIXES``),\n    this function will find its `site-packages` subdirectory depending on the\n    system environment, and will return a list of full paths.\n    """\n    sitepackages = []\n    seen = set()\n\n    if prefixes is None:\n        prefixes = PREFIXES\n\n    for prefix in prefixes:\n        if not prefix or prefix in seen:\n            continue\n        seen.add(prefix)\n\n        if is_pypy:\n            sitepackages.append(os.path.join(prefix, "site-packages"))\n        elif os.sep == \'/\':\n            sitepackages.append(os.path.join(prefix, "lib",\n                                        "python" + sys.version[:3],\n                                        "site-packages"))\n        else:\n            sitepackages.append(prefix)\n            sitepackages.append(os.path.join(prefix, "lib", "site-packages"))\n        if sys.platform == "darwin":\n            # for framework builds *only* we add the standard Apple\n            # locations.\n            from sysconfig import get_config_var\n            framework = get_config_var("PYTHONFRAMEWORK")\n            if framework:\n                sitepackages.append(\n                        os.path.join("/Library", framework,\n                            sys.version[:3], "site-packages"))\n    return sitepackages\n\ndef addsitepackages(known_paths, prefixes=None):\n    """Add site-packages to sys.path"""\n    for sitedir in getsitepackages(prefixes):\n        if os.path.isdir(sitedir):\n            addsitedir(sitedir, known_paths)\n\n    return known_paths\n\ndef setquit():\n    """Define new builtins \'quit\' and \'exit\'.\n\n    These are objects which make the interpreter exit when called.\n    The repr of each object contains a hint at how it works.\n\n    """\n    if os.sep == \':\':\n        eof = \'Cmd-Q\'\n    elif os.sep == \'\\\\\':\n        eof = \'Ctrl-Z plus Return\'\n    else:\n        eof = \'Ctrl-D (i.e. EOF)\'\n\n    builtins.quit = _sitebuiltins.Quitter(\'quit\', eof)\n    builtins.exit = _sitebuiltins.Quitter(\'exit\', eof)\n\n\ndef setcopyright():\n    """Set \'copyright\' and \'credits\' in builtins"""\n    builtins.copyright = _sitebuiltins._Printer("copyright", sys.copyright)\n    licenseargs = None\n    if is_pypy:\n        credits = "PyPy is maintained by the PyPy developers: http://pypy.org/"\n        license = "See https://bitbucket.org/pypy/pypy/src/default/LICENSE"\n        licenseargs = (license,)\n    elif sys.platform[:4] == \'java\':\n        credits = ("Jython is maintained by the Jython developers "\n                   "(www.jython.org).")\n    else:\n        credits = """\\\n    Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information."""\n    if licenseargs is None:\n        files, dirs = [], []\n        # Not all modules are required to have a __file__ attribute.  See\n        # PEP 420 for more details.\n        if hasattr(os, \'__file__\'):\n            here = os.path.dirname(os.__file__)\n            files.extend(["LICENSE.txt", "LICENSE"])\n            dirs.extend([os.path.join(here, os.pardir), here, os.curdir])\n        license = "See https://www.python.org/psf/license/"\n        licenseargs = (license, files, dirs)\n\n    builtins.credits = _sitebuiltins._Printer("credits", credits)\n    builtins.license = _sitebuiltins._Printer("license", *licenseargs)\n\ndef sethelper():\n    builtins.help = _sitebuiltins._Helper()\n\ndef enablerlcompleter():\n    """Enable default readline configuration on interactive prompts, by\n    registering a sys.__interactivehook__.\n\n    If the readline module can be imported, the hook will set the Tab key\n    as completion key and register ~/.python_history as history file.\n    This can be overridden in the sitecustomize or usercustomize module,\n    or in a PYTHONSTARTUP file.\n    """\n    def register_readline():\n        import atexit\n        try:\n            import readline\n            import rlcompleter\n        except ImportError:\n            return\n\n        # Reading the initialization (config) file may not be enough to set a\n        # completion key, so we set one first and then read the file.\n        readline_doc = getattr(readline, \'__doc__\', \'\')\n        if readline_doc is not None and \'libedit\' in readline_doc:\n            readline.parse_and_bind(\'bind ^I rl_complete\')\n        else:\n            readline.parse_and_bind(\'tab: complete\')\n\n        try:\n            # Unimplemented on PyPy\n            #readline.read_init_file()\n            pass\n        except OSError:\n            # An OSError here could have many causes, but the most likely one\n            # is that there\'s no .inputrc file (or .editrc file in the case of\n            # Mac OS X + libedit) in the expected location.  In that case, we\n            # want to ignore the exception.\n            pass\n\n        if readline.get_current_history_length() == 0:\n            # If no history was loaded, default to .python_history.\n            # The guard is necessary to avoid doubling history size at\n            # each interpreter exit when readline was already configured\n            # through a PYTHONSTARTUP hook, see:\n            # http://bugs.python.org/issue5845#msg198636\n            history = os.path.join(os.path.expanduser(\'~\'),\n                                   \'.python_history\')\n            try:\n                readline.read_history_file(history)\n            except IOError:\n                pass\n            atexit.register(readline.write_history_file, history)\n\n    sys.__interactivehook__ = register_readline\n\ndef aliasmbcs():\n    """On Windows, some default encodings are not provided by Python,\n    while they are always available as "mbcs" in each locale. Make\n    them usable by aliasing to "mbcs" in such a case."""\n    if sys.platform == \'win32\':\n        import _bootlocale, codecs\n        enc = _bootlocale.getpreferredencoding(False)\n        if enc.startswith(\'cp\'):            # "cp***" ?\n            try:\n                codecs.lookup(enc)\n            except LookupError:\n                import encodings\n                encodings._cache[enc] = encodings._unknown\n                encodings.aliases.aliases[enc] = \'mbcs\'\n\nCONFIG_LINE = r\'^(?P<key>(\\w|[-_])+)\\s*=\\s*(?P<value>.*)\\s*$\'\n\ndef venv(known_paths):\n    global PREFIXES, ENABLE_USER_SITE\n\n    env = os.environ\n    if sys.platform == \'darwin\' and \'__PYVENV_LAUNCHER__\' in env:\n        executable = os.environ[\'__PYVENV_LAUNCHER__\']\n    else:\n        executable = sys.executable\n    exe_dir, _ = os.path.split(os.path.abspath(executable))\n    site_prefix = os.path.dirname(exe_dir)\n    sys._home = None\n    conf_basename = \'pyvenv.cfg\'\n    candidate_confs = [\n        conffile for conffile in (\n            os.path.join(exe_dir, conf_basename),\n            os.path.join(site_prefix, conf_basename)\n            )\n        if os.path.isfile(conffile)\n        ]\n\n    if candidate_confs:\n        import re\n        config_line = re.compile(CONFIG_LINE)\n        virtual_conf = candidate_confs[0]\n        system_site = "true"\n        # Issue 25185: Use UTF-8, as that\'s what the venv module uses when\n        # writing the file.\n        with open(virtual_conf, encoding=\'utf-8\') as f:\n            for line in f:\n                line = line.strip()\n                m = config_line.match(line)\n                if m:\n                    d = m.groupdict()\n                    key, value = d[\'key\'].lower(), d[\'value\']\n                    if key == \'include-system-site-packages\':\n                        system_site = value.lower()\n                    elif key == \'home\':\n                        sys._home = value\n                    elif key == \'applocal\' and value.lower() == \'true\':\n                        # App-local installs use the exe_dir as prefix,\n                        # not one level higher, and do not use system\n                        # site packages.\n                        site_prefix = exe_dir\n                        system_site = \'false\'\n\n        sys.prefix = sys.exec_prefix = site_prefix\n\n        # Doing this here ensures venv takes precedence over user-site\n        addsitepackages(known_paths, [sys.prefix])\n\n        # addsitepackages will process site_prefix again if its in PREFIXES,\n        # but that\'s ok; known_paths will prevent anything being added twice\n        if system_site == "true":\n            PREFIXES.insert(0, sys.prefix)\n        else:\n            PREFIXES = [sys.prefix]\n            ENABLE_USER_SITE = False\n\n    return known_paths\n\n\ndef execsitecustomize():\n    """Run custom site specific code, if available."""\n    try:\n        import sitecustomize\n    except ImportError:\n        pass\n    except Exception as err:\n        if os.environ.get("PYTHONVERBOSE"):\n            sys.excepthook(*sys.exc_info())\n        else:\n            sys.stderr.write(\n                "Error in sitecustomize; set PYTHONVERBOSE for traceback:\\n"\n                "%s: %s\\n" %\n                (err.__class__.__name__, err))\n\n\ndef execusercustomize():\n    """Run custom user specific code, if available."""\n    try:\n        import usercustomize\n    except ImportError:\n        pass\n    except Exception as err:\n        if os.environ.get("PYTHONVERBOSE"):\n            sys.excepthook(*sys.exc_info())\n        else:\n            sys.stderr.write(\n                "Error in usercustomize; set PYTHONVERBOSE for traceback:\\n"\n                "%s: %s\\n" %\n                (err.__class__.__name__, err))\n\n\ndef main():\n    """Add standard site-specific directories to the module search path.\n\n    This function is called automatically when this module is imported,\n    unless the python interpreter was started with the -S flag.\n    """\n    global ENABLE_USER_SITE\n\n    abs_paths()\n    known_paths = removeduppaths()\n    known_paths = venv(known_paths)\n    if ENABLE_USER_SITE is None:\n        ENABLE_USER_SITE = check_enableusersite()\n    known_paths = addusersitepackages(known_paths)\n    known_paths = addsitepackages(known_paths)\n    setquit()\n    setcopyright()\n    sethelper()\n    enablerlcompleter()\n    aliasmbcs()\n    execsitecustomize()\n    if ENABLE_USER_SITE:\n        execusercustomize()\n\n# Prevent edition of sys.path when python was started with -S and\n# site is imported later.\nif not sys.flags.no_site:\n    main()\n\ndef _script():\n    help = """\\\n    %s [--user-base] [--user-site]\n\n    Without arguments print some useful information\n    With arguments print the value of USER_BASE and/or USER_SITE separated\n    by \'%s\'.\n\n    Exit codes with --user-base or --user-site:\n      0 - user site directory is enabled\n      1 - user site directory is disabled by user\n      2 - uses site directory is disabled by super user\n          or for security reasons\n     >2 - unknown error\n    """\n    args = sys.argv[1:]\n    if not args:\n        user_base = getuserbase()\n        user_site = getusersitepackages()\n        print("sys.path = [")\n        for dir in sys.path:\n            print("    %r," % (dir,))\n        print("]")\n        print("USER_BASE: %r (%s)" % (user_base,\n            "exists" if os.path.isdir(user_base) else "doesn\'t exist"))\n        print("USER_SITE: %r (%s)" % (user_site,\n            "exists" if os.path.isdir(user_site) else "doesn\'t exist"))\n        print("ENABLE_USER_SITE: %r" %  ENABLE_USER_SITE)\n        sys.exit(0)\n\n    buffer = []\n    if \'--user-base\' in args:\n        buffer.append(USER_BASE)\n    if \'--user-site\' in args:\n        buffer.append(USER_SITE)\n\n    if buffer:\n        print(os.pathsep.join(buffer))\n        if ENABLE_USER_SITE:\n            sys.exit(0)\n        elif ENABLE_USER_SITE is False:\n            sys.exit(1)\n        elif ENABLE_USER_SITE is None:\n            sys.exit(2)\n        else:\n            sys.exit(3)\n    else:\n        import textwrap\n        print(textwrap.dedent(help % (sys.argv[0], os.pathsep)))\n        sys.exit(10)\n\nif __name__ == \'__main__\':\n    _script()\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=62, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=62, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 62, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 62, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 62, type <class 'int'>
Dump int (long) 62
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 21739, type <class 'int'>
Dump int (long) 21739
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 21739
Write message g=<_io.BufferedWriter name=4>, msg=21739, resulttype=None
dump 21739, type <class 'int'>
Dump int (long) 21739
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 1)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/site.py',))
['', 'bin', 'lib-python', '3', 'site.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/site.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=63, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=63, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=21739, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 63, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 63, 1, 1, 0, 0, 21739, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 63, type <class 'int'>
Dump int (long) 63
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 21739, type <class 'int'>
Dump int (long) 21739
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/__pycache__',))
['', 'bin', 'lib-python', '3', '__pycache__']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=64, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=64, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 64, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 64, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 64, type <class 'int'>
Dump int (long) 64
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_mkdir'
Start b'll_os.ll_os_mkdir'((b'/bin/lib-python/3/__pycache__', 511))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((1,)) complete. Writing back Operation not permitted
Write message g=<_io.BufferedWriter name=4>, msg=Operation not permitted, resulttype=None
dump Operation not permitted, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=65, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=65, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 65, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 65, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 65, type <class 'int'>
Dump int (long) 65
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/_sitebuiltins.py',))
['', 'bin', 'lib-python', '3', '_sitebuiltins.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/_sitebuiltins.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=66, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=66, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 66, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 66, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 66, type <class 'int'>
Dump int (long) 66
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3115, type <class 'int'>
Dump int (long) 3115
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/_sitebuiltins.py',))
['', 'bin', 'lib-python', '3', '_sitebuiltins.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/_sitebuiltins.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=67, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=67, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 67, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 67, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 67, type <class 'int'>
Dump int (long) 67
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3115, type <class 'int'>
Dump int (long) 3115
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/__pycache__/_sitebuiltins.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', '__pycache__', '_sitebuiltins.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/_sitebuiltins.py', 524288, 438))
['', 'bin', 'lib-python', '3', '_sitebuiltins.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/_sitebuiltins.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=68, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=68, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 68, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 68, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 68, type <class 'int'>
Dump int (long) 68
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3115, type <class 'int'>
Dump int (long) 3115
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=68, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=68, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 68, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 68, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 68, type <class 'int'>
Dump int (long) 68
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3115, type <class 'int'>
Dump int (long) 3115
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b'"""\nThe objects used by the site module to add custom builtins.\n"""\n\n# Those objects are almost immortal and they keep a reference to their module\n# globals.  Defining them in the site module would keep too many references\n# alive.\n# Note this means this module should also avoid keep things alive in its\n# globals.\n\nimport sys\n\nclass Quitter(object):\n    def __init__(self, name, eof):\n        self.name = name\n        self.eof = eof\n    def __repr__(self):\n        return \'Use %s() or %s to exit\' % (self.name, self.eof)\n    def __call__(self, code=None):\n        # Shells like IDLE catch the SystemExit, but listen when their\n        # stdin wrapper is closed.\n        try:\n            sys.stdin.close()\n        except:\n            pass\n        raise SystemExit(code)\n\n\nclass _Printer(object):\n    """interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice."""\n\n    MAXLINES = 23\n\n    def __init__(self, name, data, files=(), dirs=()):\n        import os\n        self.__name = name\n        self.__data = data\n        self.__lines = None\n        self.__filenames = [os.path.join(dir, filename)\n                            for dir in dirs\n                            for filename in files]\n\n    def __setup(self):\n        if self.__lines:\n            return\n        data = None\n        for filename in self.__filenames:\n            try:\n                with open(filename, "r") as fp:\n                    data = fp.read()\n                break\n            except OSError:\n                pass\n        if not data:\n            data = self.__data\n        self.__lines = data.split(\'\\n\')\n        self.__linecnt = len(self.__lines)\n\n    def __repr__(self):\n        self.__setup()\n        if len(self.__lines) <= self.MAXLINES:\n            return "\\n".join(self.__lines)\n        else:\n            return "Type %s() to see the full %s text" % ((self.__name,)*2)\n\n    def __call__(self):\n        self.__setup()\n        prompt = \'Hit Return for more, or q (and Return) to quit: \'\n        lineno = 0\n        while 1:\n            try:\n                for i in range(lineno, lineno + self.MAXLINES):\n                    print(self.__lines[i])\n            except IndexError:\n                break\n            else:\n                lineno += self.MAXLINES\n                key = None\n                while key is None:\n                    key = input(prompt)\n                    if key not in (\'\', \'q\'):\n                        key = None\n                if key == \'q\':\n                    break\n\n\nclass _Helper(object):\n    """Define the builtin \'help\'.\n\n    This is a wrapper around pydoc.help that provides a helpful message\n    when \'help\' is typed at the Python interactive prompt.\n\n    Calling help() at the Python prompt starts an interactive help session.\n    Calling help(thing) prints help for the python object \'thing\'.\n    """\n\n    def __repr__(self):\n        return "Type help() for interactive help, " \\\n               "or help(object) for help about object."\n    def __call__(self, *args, **kwds):\n        import pydoc\n        return pydoc.help(*args, **kwds)\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'"""\nThe objects used by the site module to add custom builtins.\n"""\n\n# Those objects are almost immortal and they keep a reference to their module\n# globals.  Defining them in the site module would keep too many references\n# alive.\n# Note this means this module should also avoid keep things alive in its\n# globals.\n\nimport sys\n\nclass Quitter(object):\n    def __init__(self, name, eof):\n        self.name = name\n        self.eof = eof\n    def __repr__(self):\n        return \'Use %s() or %s to exit\' % (self.name, self.eof)\n    def __call__(self, code=None):\n        # Shells like IDLE catch the SystemExit, but listen when their\n        # stdin wrapper is closed.\n        try:\n            sys.stdin.close()\n        except:\n            pass\n        raise SystemExit(code)\n\n\nclass _Printer(object):\n    """interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice."""\n\n    MAXLINES = 23\n\n    def __init__(self, name, data, files=(), dirs=()):\n        import os\n        self.__name = name\n        self.__data = data\n        self.__lines = None\n        self.__filenames = [os.path.join(dir, filename)\n                            for dir in dirs\n                            for filename in files]\n\n    def __setup(self):\n        if self.__lines:\n            return\n        data = None\n        for filename in self.__filenames:\n            try:\n                with open(filename, "r") as fp:\n                    data = fp.read()\n                break\n            except OSError:\n                pass\n        if not data:\n            data = self.__data\n        self.__lines = data.split(\'\\n\')\n        self.__linecnt = len(self.__lines)\n\n    def __repr__(self):\n        self.__setup()\n        if len(self.__lines) <= self.MAXLINES:\n            return "\\n".join(self.__lines)\n        else:\n            return "Type %s() to see the full %s text" % ((self.__name,)*2)\n\n    def __call__(self):\n        self.__setup()\n        prompt = \'Hit Return for more, or q (and Return) to quit: \'\n        lineno = 0\n        while 1:\n            try:\n                for i in range(lineno, lineno + self.MAXLINES):\n                    print(self.__lines[i])\n            except IndexError:\n                break\n            else:\n                lineno += self.MAXLINES\n                key = None\n                while key is None:\n                    key = input(prompt)\n                    if key not in (\'\', \'q\'):\n                        key = None\n                if key == \'q\':\n                    break\n\n\nclass _Helper(object):\n    """Define the builtin \'help\'.\n\n    This is a wrapper around pydoc.help that provides a helpful message\n    when \'help\' is typed at the Python interactive prompt.\n\n    Calling help() at the Python prompt starts an interactive help session.\n    Calling help(thing) prints help for the python object \'thing\'.\n    """\n\n    def __repr__(self):\n        return "Type help() for interactive help, " \\\n               "or help(object) for help about object."\n    def __call__(self, *args, **kwds):\n        import pydoc\n        return pydoc.help(*args, **kwds)\n', resulttype=None
dump b'"""\nThe objects used by the site module to add custom builtins.\n"""\n\n# Those objects are almost immortal and they keep a reference to their module\n# globals.  Defining them in the site module would keep too many references\n# alive.\n# Note this means this module should also avoid keep things alive in its\n# globals.\n\nimport sys\n\nclass Quitter(object):\n    def __init__(self, name, eof):\n        self.name = name\n        self.eof = eof\n    def __repr__(self):\n        return \'Use %s() or %s to exit\' % (self.name, self.eof)\n    def __call__(self, code=None):\n        # Shells like IDLE catch the SystemExit, but listen when their\n        # stdin wrapper is closed.\n        try:\n            sys.stdin.close()\n        except:\n            pass\n        raise SystemExit(code)\n\n\nclass _Printer(object):\n    """interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice."""\n\n    MAXLINES = 23\n\n    def __init__(self, name, data, files=(), dirs=()):\n        import os\n        self.__name = name\n        self.__data = data\n        self.__lines = None\n        self.__filenames = [os.path.join(dir, filename)\n                            for dir in dirs\n                            for filename in files]\n\n    def __setup(self):\n        if self.__lines:\n            return\n        data = None\n        for filename in self.__filenames:\n            try:\n                with open(filename, "r") as fp:\n                    data = fp.read()\n                break\n            except OSError:\n                pass\n        if not data:\n            data = self.__data\n        self.__lines = data.split(\'\\n\')\n        self.__linecnt = len(self.__lines)\n\n    def __repr__(self):\n        self.__setup()\n        if len(self.__lines) <= self.MAXLINES:\n            return "\\n".join(self.__lines)\n        else:\n            return "Type %s() to see the full %s text" % ((self.__name,)*2)\n\n    def __call__(self):\n        self.__setup()\n        prompt = \'Hit Return for more, or q (and Return) to quit: \'\n        lineno = 0\n        while 1:\n            try:\n                for i in range(lineno, lineno + self.MAXLINES):\n                    print(self.__lines[i])\n            except IndexError:\n                break\n            else:\n                lineno += self.MAXLINES\n                key = None\n                while key is None:\n                    key = input(prompt)\n                    if key not in (\'\', \'q\'):\n                        key = None\n                if key == \'q\':\n                    break\n\n\nclass _Helper(object):\n    """Define the builtin \'help\'.\n\n    This is a wrapper around pydoc.help that provides a helpful message\n    when \'help\' is typed at the Python interactive prompt.\n\n    Calling help() at the Python prompt starts an interactive help session.\n    Calling help(thing) prints help for the python object \'thing\'.\n    """\n\n    def __repr__(self):\n        return "Type help() for interactive help, " \\\n               "or help(object) for help about object."\n    def __call__(self, *args, **kwds):\n        import pydoc\n        return pydoc.help(*args, **kwds)\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=68, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=68, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 68, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 68, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 68, type <class 'int'>
Dump int (long) 68
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3115, type <class 'int'>
Dump int (long) 3115
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 3115
Write message g=<_io.BufferedWriter name=4>, msg=3115, resulttype=None
dump 3115, type <class 'int'>
Dump int (long) 3115
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/_sitebuiltins.py',))
['', 'bin', 'lib-python', '3', '_sitebuiltins.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/_sitebuiltins.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=69, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=69, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3115, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 69, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 69, 1, 1, 0, 0, 3115, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 69, type <class 'int'>
Dump int (long) 69
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3115, type <class 'int'>
Dump int (long) 3115
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/__pycache__',))
['', 'bin', 'lib-python', '3', '__pycache__']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=70, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=70, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 70, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 70, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 70, type <class 'int'>
Dump int (long) 70
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_mkdir'
Start b'll_os.ll_os_mkdir'((b'/bin/lib-python/3/__pycache__', 511))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((1,)) complete. Writing back Operation not permitted
Write message g=<_io.BufferedWriter name=4>, msg=Operation not permitted, resulttype=None
dump Operation not permitted, type <class 'str'>
Fnname b'll_os.ll_os_getcwd'
Start b'll_os.ll_os_getcwd'(())
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_getcwd'(()) complete. Writing back /tmp
Write message g=<_io.BufferedWriter name=4>, msg=/tmp, resulttype=None
dump /tmp, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/pyvenv.cfg',))
['', 'pyvenv.cfg']
checking 
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/pyvenv.cfg',))
['', 'pyvenv.cfg']
checking 
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_geteuid'
Start b'll_os.ll_os_geteuid'(())
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_geteuid'(()) complete. Writing back 1000
Write message g=<_io.BufferedWriter name=4>, msg=1000, resulttype=None
dump 1000, type <class 'int'>
Dump int (long) 1000
Fnname b'll_os.ll_os_getuid'
Start b'll_os.ll_os_getuid'(())
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_getuid'(()) complete. Writing back 1000
Write message g=<_io.BufferedWriter name=4>, msg=1000, resulttype=None
dump 1000, type <class 'int'>
Dump int (long) 1000
Fnname b'll_os.ll_os_getegid'
Start b'll_os.ll_os_getegid'(())
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_getegid'(()) complete. Writing back 1000
Write message g=<_io.BufferedWriter name=4>, msg=1000, resulttype=None
dump 1000, type <class 'int'>
Dump int (long) 1000
Fnname b'll_os.ll_os_getgid'
Start b'll_os.ll_os_getgid'(())
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_getgid'(()) complete. Writing back 1000
Write message g=<_io.BufferedWriter name=4>, msg=1000, resulttype=None
dump 1000, type <class 'int'>
Dump int (long) 1000
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=71, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=71, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 71, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 71, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 71, type <class 'int'>
Dump int (long) 71
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/sysconfig.py',))
['', 'bin', 'lib-python', '3', 'sysconfig.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/sysconfig.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=72, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=72, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 72, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 72, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 72, type <class 'int'>
Dump int (long) 72
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 24831, type <class 'int'>
Dump int (long) 24831
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/sysconfig.py',))
['', 'bin', 'lib-python', '3', 'sysconfig.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/sysconfig.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=73, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=73, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 73, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 73, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 73, type <class 'int'>
Dump int (long) 73
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 24831, type <class 'int'>
Dump int (long) 24831
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/__pycache__/sysconfig.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib-python', '3', '__pycache__', 'sysconfig.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3> ['abc.py', 'aifc.py', 'antigravity.py', 'argparse.py', 'ast.py', 'asynchat.py', 'asyncio', 'asyncore.py', 'base64.py', 'bdb.py', 'binhex.py', 'bisect.py', 'bz2.py', 'calendar.py', 'cgi.py', 'cgitb.py', 'chunk.py', 'cmd.py', 'code.py', 'codecs.py', 'codeop.py', 'collections', 'colorsys.py', 'compileall.py', 'concurrent', 'configparser.py', 'contextlib.py', 'copy.py', 'copyreg.py', 'cProfile.py', 'crypt.py', 'csv.py', 'ctypes', 'curses', 'datetime.py', 'dbm', 'decimal.py', 'difflib.py', 'dis.py', 'distutils', 'doctest.py', 'dummy_threading.py', 'email', 'encodings', 'ensurepip', 'enum.py', 'filecmp.py', 'fileinput.py', 'fnmatch.py', 'formatter.py', 'fractions.py', 'ftplib.py', 'functools.py', 'genericpath.py', 'getopt.py', 'getpass.py', 'gettext.py', 'glob.py', 'gzip.py', 'hashlib.py', 'heapq.py', 'hmac.py', 'html', 'http', 'idlelib', 'imaplib.py', 'imghdr.py', 'imp.py', 'importlib', 'inspect.py', 'io.py', 'ipaddress.py', 'json', 'keyword.py', 'lib2to3', 'linecache.py', 'locale.py', 'logging', 'lzma.py', 'macpath.py', 'macurl2path.py', 'mailbox.py', 'mailcap.py', 'mimetypes.py', 'modulefinder.py', 'msilib', 'multiprocessing', 'netrc.py', 'nntplib.py', 'ntpath.py', 'nturl2path.py', 'numbers.py', 'opcode.py', 'operator.py', 'optparse.py', 'os.py', 'pathlib.py', 'pdb.py', 'pickle.py', 'pickletools.py', 'pipes.py', 'pkgutil.py', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform.py', 'plistlib.py', 'poplib.py', 'posixpath.py', 'pprint.py', 'profile.py', 'pstats.py', 'pty.py', 'pyclbr.py', 'pydoc.py', 'pydoc_data', 'py_compile.py', 'queue.py', 'quopri.py', 'random.py', 're.py', 'reprlib.py', 'rlcompleter.py', 'runpy.py', 'sched.py', 'selectors.py', 'shelve.py', 'shlex.py', 'shutil.py', 'signal.py', 'site-packages', 'site.py', 'smtpd.py', 'smtplib.py', 'sndhdr.py', 'socket.py', 'socketserver.py', 'sqlite3', 'sre_compile.py', 'sre_constants.py', 'sre_parse.py', 'ssl.py', 'stat.py', 'statistics.py', 'string.py', 'stringprep.py', 'struct.py', 'subprocess.py', 'sunau.py', 'symbol.py', 'symtable.py', 'sysconfig.py', 'tabnanny.py', 'tarfile.py', 'telnetlib.py', 'tempfile.py', 'test', 'textwrap.py', 'this.py', 'threading.py', 'timeit.py', 'tkinter', 'token.py', 'tokenize.py', 'trace.py', 'traceback.py', 'tracemalloc.py', 'tty.py', 'turtle.py', 'turtledemo', 'types.py', 'typing.py', 'unittest', 'urllib', 'uu.py', 'uuid.py', 'venv', 'warnings.py', 'wave.py', 'weakref.py', 'webbrowser.py', 'wsgiref', 'xdrlib.py', 'xml', 'xmlrpc', 'zipapp.py', 'zipfile.py', '_bootlocale.py', '_collections_abc.py', '_compat_pickle.py', '_compression.py', '_dummy_thread.py', '_markupbase.py', '_osx_support.py', '_pydecimal.py', '_pyio.py', '_sitebuiltins.py', '_strptime.py', '_threading_local.py', '_weakrefset.py', '__future__.py', '__phello__.foo.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib-python/3/sysconfig.py', 524288, 438))
['', 'bin', 'lib-python', '3', 'sysconfig.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib-python/3/sysconfig.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=74, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=74, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 74, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 74, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 74, type <class 'int'>
Dump int (long) 74
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 24831, type <class 'int'>
Dump int (long) 24831
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=74, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=74, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 74, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 74, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 74, type <class 'int'>
Dump int (long) 74
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 24831, type <class 'int'>
Dump int (long) 24831
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 24832))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 24832)) complete. Writing back b'"""Access to Python\'s configuration information."""\n\nimport os\nimport sys\nfrom os.path import pardir, realpath\n\n__all__ = [\n    \'get_config_h_filename\',\n    \'get_config_var\',\n    \'get_config_vars\',\n    \'get_makefile_filename\',\n    \'get_path\',\n    \'get_path_names\',\n    \'get_paths\',\n    \'get_platform\',\n    \'get_python_version\',\n    \'get_scheme_names\',\n    \'parse_config_h\',\n]\n\n_INSTALL_SCHEMES = {\n    \'posix_prefix\': {\n        \'stdlib\': \'{installed_base}/lib/python{py_version_short}\',\n        \'platstdlib\': \'{platbase}/lib/python{py_version_short}\',\n        \'purelib\': \'{base}/lib/python{py_version_short}/site-packages\',\n        \'platlib\': \'{platbase}/lib/python{py_version_short}/site-packages\',\n        \'include\':\n            \'{installed_base}/include/python{py_version_short}{abiflags}\',\n        \'platinclude\':\n            \'{installed_platbase}/include/python{py_version_short}{abiflags}\',\n        \'scripts\': \'{base}/bin\',\n        \'data\': \'{base}\',\n        },\n    \'posix_home\': {\n        \'stdlib\': \'{installed_base}/lib/python\',\n        \'platstdlib\': \'{base}/lib/python\',\n        \'purelib\': \'{base}/lib/python\',\n        \'platlib\': \'{base}/lib/python\',\n        \'include\': \'{installed_base}/include/python\',\n        \'platinclude\': \'{installed_base}/include/python\',\n        \'scripts\': \'{base}/bin\',\n        \'data\': \'{base}\',\n        },\n    \'pypy\': {\n        \'stdlib\': \'{installed_base}/lib-python\',\n        \'platstdlib\': \'{base}/lib-python\',\n        \'purelib\': \'{base}/site-packages\',\n        \'platlib\': \'{base}/site-packages\',\n        \'include\': \'{installed_base}/include\',\n        \'platinclude\': \'{installed_base}/include\',\n        \'scripts\': \'{base}/bin\',\n        \'data\'   : \'{base}\',\n        },\n    \'nt\': {\n        \'stdlib\': \'{installed_base}/Lib\',\n        \'platstdlib\': \'{base}/Lib\',\n        \'purelib\': \'{base}/Lib/site-packages\',\n        \'platlib\': \'{base}/Lib/site-packages\',\n        \'include\': \'{installed_base}/Include\',\n        \'platinclude\': \'{installed_base}/Include\',\n        \'scripts\': \'{base}/Scripts\',\n        \'data\': \'{base}\',\n        },\n    \'nt_user\': {\n        \'stdlib\': \'{userbase}/Python{py_version_nodot}\',\n        \'platstdlib\': \'{userbase}/Python{py_version_nodot}\',\n        \'purelib\': \'{userbase}/Python{py_version_nodot}/site-packages\',\n        \'platlib\': \'{userbase}/Python{py_version_nodot}/site-packages\',\n        \'include\': \'{userbase}/Python{py_version_nodot}/Include\',\n        \'scripts\': \'{userbase}/Python{py_version_nodot}/Scripts\',\n        \'data\': \'{userbase}\',\n        },\n    \'posix_user\': {\n        \'stdlib\': \'{userbase}/lib/python{py_version_short}\',\n        \'platstdlib\': \'{userbase}/lib/python{py_version_short}\',\n        \'purelib\': \'{userbase}/lib/python{py_version_short}/site-packages\',\n        \'platlib\': \'{userbase}/lib/python{py_version_short}/site-packages\',\n        \'include\': \'{userbase}/include/python{py_version_short}\',\n        \'scripts\': \'{userbase}/bin\',\n        \'data\': \'{userbase}\',\n        },\n    \'osx_framework_user\': {\n        \'stdlib\': \'{userbase}/lib/python\',\n        \'platstdlib\': \'{userbase}/lib/python\',\n        \'purelib\': \'{userbase}/lib/python/site-packages\',\n        \'platlib\': \'{userbase}/lib/python/site-packages\',\n        \'include\': \'{userbase}/include\',\n        \'scripts\': \'{userbase}/bin\',\n        \'data\': \'{userbase}\',\n        },\n    }\n\n_SCHEME_KEYS = (\'stdlib\', \'platstdlib\', \'purelib\', \'platlib\', \'include\',\n                \'scripts\', \'data\')\n\n # FIXME don\'t rely on sys.version here, its format is an implementation detail\n # of CPython, use sys.version_info or sys.hexversion\n_PY_VERSION = sys.version.split()[0]\n_PY_VERSION_SHORT = sys.version[:3]\n_PY_VERSION_SHORT_NO_DOT = _PY_VERSION[0] + _PY_VERSION[2]\n_PREFIX = os.path.normpath(sys.prefix)\n_BASE_PREFIX = os.path.normpath(sys.base_prefix)\n_EXEC_PREFIX = os.path.normpath(sys.exec_prefix)\n_BASE_EXEC_PREFIX = os.path.normpath(sys.base_exec_prefix)\n_CONFIG_VARS = None\n_USER_BASE = None\n\n\ndef _safe_realpath(path):\n    try:\n        return realpath(path)\n    except OSError:\n        return path\n\nif sys.executable:\n    _PROJECT_BASE = os.path.dirname(_safe_realpath(sys.executable))\nelse:\n    # sys.executable can be empty if argv[0] has been changed and Python is\n    # unable to retrieve the real program name\n    _PROJECT_BASE = _safe_realpath(os.getcwd())\n\nif (os.name == \'nt\' and\n    _PROJECT_BASE.lower().endswith((\'\\\\pcbuild\\\\win32\', \'\\\\pcbuild\\\\amd64\'))):\n    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir, pardir))\n\n# set for cross builds\nif "_PYTHON_PROJECT_BASE" in os.environ:\n    _PROJECT_BASE = _safe_realpath(os.environ["_PYTHON_PROJECT_BASE"])\n\ndef _is_python_source_dir(d):\n    for fn in ("Setup.dist", "Setup.local"):\n        if os.path.isfile(os.path.join(d, "Modules", fn)):\n            return True\n    return False\n\n_sys_home = getattr(sys, \'_home\', None)\nif (_sys_home and os.name == \'nt\' and\n    _sys_home.lower().endswith((\'\\\\pcbuild\\\\win32\', \'\\\\pcbuild\\\\amd64\'))):\n    _sys_home = os.path.dirname(os.path.dirname(_sys_home))\ndef is_python_build(check_home=False):\n    if check_home and _sys_home:\n        return _is_python_source_dir(_sys_home)\n    return _is_python_source_dir(_PROJECT_BASE)\n\n_PYTHON_BUILD = is_python_build(True)\n\nif _PYTHON_BUILD:\n    for scheme in (\'posix_prefix\', \'posix_home\'):\n        _INSTALL_SCHEMES[scheme][\'include\'] = \'{srcdir}/Include\'\n        _INSTALL_SCHEMES[scheme][\'platinclude\'] = \'{projectbase}/.\'\n\n\ndef _subst_vars(s, local_vars):\n    try:\n        return s.format(**local_vars)\n    except KeyError:\n        try:\n            return s.format(**os.environ)\n        except KeyError as var:\n            raise AttributeError(\'{%s}\' % var)\n\ndef _extend_dict(target_dict, other_dict):\n    target_keys = target_dict.keys()\n    for key, value in other_dict.items():\n        if key in target_keys:\n            continue\n        target_dict[key] = value\n\n\ndef _expand_vars(scheme, vars):\n    res = {}\n    if vars is None:\n        vars = {}\n    _extend_dict(vars, get_config_vars())\n\n    for key, value in _INSTALL_SCHEMES[scheme].items():\n        if os.name in (\'posix\', \'nt\'):\n            value = os.path.expanduser(value)\n        res[key] = os.path.normpath(_subst_vars(value, vars))\n    return res\n\n\ndef _get_default_scheme():\n    if \'__pypy__\' in sys.builtin_module_names:\n        return \'pypy\'\n    elif os.name == \'posix\':\n        # the default scheme for posix is posix_prefix\n        return \'posix_prefix\'\n    return os.name\n\n\ndef _getuserbase():\n    env_base = os.environ.get("PYTHONUSERBASE", None)\n\n    def joinuser(*args):\n        return os.path.expanduser(os.path.join(*args))\n\n    if os.name == "nt":\n        base = os.environ.get("APPDATA") or "~"\n        if env_base:\n            return env_base\n        else:\n            return joinuser(base, "Python")\n\n    if sys.platform == "darwin":\n        framework = get_config_var("PYTHONFRAMEWORK")\n        if framework:\n            if env_base:\n                return env_base\n            else:\n                return joinuser("~", "Library", framework, "%d.%d" %\n                                sys.version_info[:2])\n\n    if env_base:\n        return env_base\n    else:\n        return joinuser("~", ".local")\n\n\ndef _parse_makefile(filename, vars=None):\n    """Parse a Makefile-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    """\n    # Regexes needed for parsing Makefile (and similar syntaxes,\n    # like old-style Setup files).\n    import re\n    _variable_rx = re.compile("([a-zA-Z][a-zA-Z0-9_]+)\\s*=\\s*(.*)")\n    _findvar1_rx = re.compile(r"\\$\\(([A-Za-z][A-Za-z0-9_]*)\\)")\n    _findvar2_rx = re.compile(r"\\${([A-Za-z][A-Za-z0-9_]*)}")\n\n    if vars is None:\n        vars = {}\n    done = {}\n    notdone = {}\n\n    with open(filename, errors="surrogateescape") as f:\n        lines = f.readlines()\n\n    for line in lines:\n        if line.startswith(\'#\') or line.strip() == \'\':\n            continue\n        m = _variable_rx.match(line)\n        if m:\n            n, v = m.group(1, 2)\n            v = v.strip()\n            # `$$\' is a literal `$\' in make\n            tmpv = v.replace(\'$$\', \'\')\n\n            if "$" in tmpv:\n                notdone[n] = v\n            else:\n                try:\n                    v = int(v)\n                except ValueError:\n                    # insert literal `$\'\n                    done[n] = v.replace(\'$$\', \'$\')\n                else:\n                    done[n] = v\n\n    # do variable interpolation here\n    variables = list(notdone.keys())\n\n    # Variables with a \'PY_\' prefix in the makefile. These need to\n    # be made available without that prefix through sysconfig.\n    # Special care is needed to ensure that variable expansion works, even\n    # if the expansion uses the name without a prefix.\n    renamed_variables = (\'CFLAGS\', \'LDFLAGS\', \'CPPFLAGS\')\n\n    while len(variables) > 0:\n        for name in tuple(variables):\n            value = notdone[name]\n            m1 = _findvar1_rx.search(value)\n            m2 = _findvar2_rx.search(value)\n            if m1 and m2:\n                m = m1 if m1.start() < m2.start() else m2\n            else:\n                m = m1 if m1 else m2\n            if m is not None:\n                n = m.group(1)\n                found = True\n                if n in done:\n                    item = str(done[n])\n                elif n in notdone:\n                    # get it on a subsequent round\n                    found = False\n                elif n in os.environ:\n                    # do it like make: fall back to environment\n                    item = os.environ[n]\n\n                elif n in renamed_variables:\n                    if (name.startswith(\'PY_\') and\n                        name[3:] in renamed_variables):\n                        item = ""\n\n                    elif \'PY_\' + n in notdone:\n                        found = False\n\n                    else:\n                        item = str(done[\'PY_\' + n])\n\n                else:\n                    done[n] = item = ""\n\n                if found:\n                    after = value[m.end():]\n                    value = value[:m.start()] + item + after\n                    if "$" in after:\n                        notdone[name] = value\n                    else:\n                        try:\n                            value = int(value)\n                        except ValueError:\n                            done[name] = value.strip()\n                        else:\n                            done[name] = value\n                        variables.remove(name)\n\n                        if name.startswith(\'PY_\') \\\n                        and name[3:] in renamed_variables:\n\n                            name = name[3:]\n                            if name not in done:\n                                done[name] = value\n\n            else:\n                # bogus variable reference (e.g. "prefix=$/opt/python");\n                # just drop it since we can\'t deal\n                done[name] = value\n                variables.remove(name)\n\n    # strip spurious spaces\n    for k, v in done.items():\n        if isinstance(v, str):\n            done[k] = v.strip()\n\n    # save the results in the global dictionary\n    vars.update(done)\n    return vars\n\n\ndef get_makefile_filename():\n    """Return the path of the Makefile."""\n    if _PYTHON_BUILD:\n        return os.path.join(_sys_home or _PROJECT_BASE, "Makefile")\n    if hasattr(sys, \'abiflags\'):\n        config_dir_name = \'config-%s%s\' % (_PY_VERSION_SHORT, sys.abiflags)\n    else:\n        config_dir_name = \'config\'\n    return os.path.join(get_path(\'stdlib\'), config_dir_name, \'Makefile\')\n\ndef _generate_posix_vars():\n    """Generate the Python module containing build-time variables."""\n    import pprint\n    vars = {}\n    # load the installed Makefile:\n    makefile = get_makefile_filename()\n    try:\n        _parse_makefile(makefile, vars)\n    except OSError as e:\n        msg = "invalid Python installation: unable to open %s" % makefile\n        if hasattr(e, "strerror"):\n            msg = msg + " (%s)" % e.strerror\n        raise OSError(msg)\n    # load the installed pyconfig.h:\n    config_h = get_config_h_filename()\n    try:\n        with open(config_h) as f:\n            parse_config_h(f, vars)\n    except OSError as e:\n        msg = "invalid Python installation: unable to open %s" % config_h\n        if hasattr(e, "strerror"):\n            msg = msg + " (%s)" % e.strerror\n        raise OSError(msg)\n    # On AIX, there are wrong paths to the linker scripts in the Makefile\n    # -- these paths are relative to the Python source, but when installed\n    # the scripts are in another directory.\n    if _PYTHON_BUILD:\n        vars[\'BLDSHARED\'] = vars[\'LDSHARED\']\n\n    # There\'s a chicken-and-egg situation on OS X with regards to the\n    # _sysconfigdata module after the changes introduced by #15298:\n    # get_config_vars() is called by get_platform() as part of the\n    # `make pybuilddir.txt` target -- which is a precursor to the\n    # _sysconfigdata.py module being constructed.  Unfortunately,\n    # get_config_vars() eventually calls _init_posix(), which attempts\n    # to import _sysconfigdata, which we won\'t have built yet.  In order\n    # for _init_posix() to work, if we\'re on Darwin, just mock up the\n    # _sysconfigdata module manually and populate it with the build vars.\n    # This is more than sufficient for ensuring the subsequent call to\n    # get_platform() succeeds.\n    name = \'_sysconfigdata\'\n    if \'darwin\' in sys.platform:\n        import types\n        module = types.ModuleType(name)\n        module.build_time_vars = vars\n        sys.modules[name] = module\n\n    pybuilddir = \'build/lib.%s-%s\' % (get_platform(), sys.version[:3])\n    if hasattr(sys, "gettotalrefcount"):\n        pybuilddir += \'-pydebug\'\n    os.makedirs(pybuilddir, exist_ok=True)\n    destfile = os.path.join(pybuilddir, name + \'.py\')\n\n    with open(destfile, \'w\', encoding=\'utf8\') as f:\n        f.write(\'# system configuration generated and used by\'\n                \' the sysconfig module\\n\')\n        f.write(\'build_time_vars = \')\n        pprint.pprint(vars, stream=f)\n\n    # Create file used for sys.path fixup -- see Modules/getpath.c\n    with open(\'pybuilddir.txt\', \'w\', encoding=\'ascii\') as f:\n        f.write(pybuilddir)\n\ndef _init_posix(vars):\n    """Initialize the module as appropriate for POSIX systems."""\n    from _sysconfigdata import build_time_vars\n    vars.update(build_time_vars)\n\ndef _init_non_posix(vars):\n    """Initialize the module as appropriate for NT"""\n    # set basic install directories\n    vars[\'LIBDEST\'] = get_path(\'stdlib\')\n    vars[\'BINLIBDEST\'] = get_path(\'platstdlib\')\n    vars[\'INCLUDEPY\'] = get_path(\'include\')\n    vars[\'EXT_SUFFIX\'] = \'.pyd\'\n    vars[\'EXE\'] = \'.exe\'\n    vars[\'VERSION\'] = _PY_VERSION_SHORT_NO_DOT\n    vars[\'BINDIR\'] = os.path.dirname(_safe_realpath(sys.executable))\n\n#\n# public APIs\n#\n\n\ndef parse_config_h(fp, vars=None):\n    """Parse a config.h-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    """\n    if vars is None:\n        vars = {}\n    import re\n    define_rx = re.compile("#define ([A-Z][A-Za-z0-9_]+) (.*)\\n")\n    undef_rx = re.compile("/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]/\\n")\n\n    while True:\n        line = fp.readline()\n        if not line:\n            break\n        m = define_rx.match(line)\n        if m:\n            n, v = m.group(1, 2)\n            try:\n                v = int(v)\n            except ValueError:\n                pass\n            vars[n] = v\n        else:\n            m = undef_rx.match(line)\n            if m:\n                vars[m.group(1)] = 0\n    return vars\n\n\ndef get_config_h_filename():\n    """Return the path of pyconfig.h."""\n    if _PYTHON_BUILD:\n        if os.name == "nt":\n            inc_dir = os.path.join(_sys_home or _PROJECT_BASE, "PC")\n        else:\n            inc_dir = _sys_home or _PROJECT_BASE\n    else:\n        inc_dir = get_path(\'platinclude\')\n    return os.path.join(inc_dir, \'pyconfig.h\')\n\n\ndef get_scheme_names():\n    """Return a tuple containing the schemes names."""\n    return tuple(sorted(_INSTALL_SCHEMES))\n\n\ndef get_path_names():\n    """Return a tuple containing the paths names."""\n    return _SCHEME_KEYS\n\n\ndef get_paths(scheme=_get_default_scheme(), vars=None, expand=True):\n    """Return a mapping containing an install scheme.\n\n    ``scheme`` is the install scheme name. If not provided, it will\n    return the default scheme for the current platform.\n    """\n    if expand:\n        return _expand_vars(scheme, vars)\n    else:\n        return _INSTALL_SCHEMES[scheme]\n\n\ndef get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):\n    """Return a path corresponding to the scheme.\n\n    ``scheme`` is the install scheme name.\n    """\n    return get_paths(scheme, vars, expand)[name]\n\n\ndef get_config_vars(*args):\n    """With no arguments, return a dictionary of all configuration\n    variables relevant for the current platform.\n\n    On Unix, this means every variable defined in Python\'s installed Makefile;\n    On Windows it\'s a much smaller set.\n\n    With arguments, return a list of values that result from looking up\n    each argument in the configuration variable dictionary.\n    """\n    global _CONFIG_VARS\n    if _CONFIG_VARS is None:\n        _CONFIG_VARS = {}\n        # Normalized versions of prefix and exec_prefix are handy to have;\n        # in fact, these are the standard versions used most places in the\n        # Distutils.\n        _CONFIG_VARS[\'prefix\'] = _PREFIX\n        _CONFIG_VARS[\'exec_prefix\'] = _EXEC_PREFIX\n        _CONFIG_VARS[\'py_version\'] = _PY_VERSION\n        _CONFIG_VARS[\'py_version_short\'] = _PY_VERSION_SHORT\n        _CONFIG_VARS[\'py_version_nodot\'] = _PY_VERSION[0] + _PY_VERSION[2]\n        _CONFIG_VARS[\'installed_base\'] = _BASE_PREFIX\n        _CONFIG_VARS[\'base\'] = _PREFIX\n        _CONFIG_VARS[\'installed_platbase\'] = _BASE_EXEC_PREFIX\n        _CONFIG_VARS[\'platbase\'] = _EXEC_PREFIX\n        _CONFIG_VARS[\'projectbase\'] = _PROJECT_BASE\n        try:\n            _CONFIG_VARS[\'abiflags\'] = sys.abiflags\n        except AttributeError:\n            # sys.abiflags may not be defined on all platforms.\n            _CONFIG_VARS[\'abiflags\'] = \'\'\n\n        if os.name == \'nt\':\n            _init_non_posix(_CONFIG_VARS)\n        if os.name == \'posix\':\n            _init_posix(_CONFIG_VARS)\n        # For backward compatibility, see issue19555\n        SO = _CONFIG_VARS.get(\'EXT_SUFFIX\')\n        if SO is not None:\n            _CONFIG_VARS[\'SO\'] = SO\n        # Setting \'userbase\' is done below the call to the\n        # init function to enable using \'get_config_var\' in\n        # the init-function.\n        _CONFIG_VARS[\'userbase\'] = _getuserbase()\n\n        # Always convert srcdir to an absolute path\n        srcdir = _CONFIG_VARS.get(\'srcdir\', _PROJECT_BASE)\n        if os.name == \'posix\':\n            if _PYTHON_BUILD:\n                # If srcdir is a relative path (typically \'.\' or \'..\')\n                # then it should be interpreted relative to the directory\n                # containing Makefile.\n                base = os.path.dirname(get_makefile_filename())\n                srcdir = os.path.join(base, srcdir)\n            else:\n                # srcdir is not meaningful since the installation is\n                # spread about the filesystem.  We choose the\n                # directory containing the Makefile since we know it\n                # exists.\n                srcdir = os.path.dirname(get_makefile_filename())\n        _CONFIG_VARS[\'srcdir\'] = _safe_realpath(srcdir)\n\n        # OS X platforms require special customization to handle\n        # multi-architecture, multi-os-version installers\n        if sys.platform == \'darwin\':\n            import _osx_support\n            _osx_support.customize_config_vars(_CONFIG_VARS)\n\n        _CONFIG_VARS[\'INCLUDEPY\'] = os.path.join(_CONFIG_VARS[\'prefix\'],\n                                                 \'include\')\n\n    if args:\n        vals = []\n        for name in args:\n            vals.append(_CONFIG_VARS.get(name))\n        return vals\n    else:\n        return _CONFIG_VARS\n\n\ndef get_config_var(name):\n    """Return the value of a single variable using the dictionary returned by\n    \'get_config_vars()\'.\n\n    Equivalent to get_config_vars().get(name)\n    """\n    if name == \'SO\':\n        import warnings\n        warnings.warn(\'SO is deprecated, use EXT_SUFFIX\', DeprecationWarning, 2)\n    return get_config_vars().get(name)\n\n\ndef get_platform():\n    """Return a string that identifies the current platform.\n\n    This is used mainly to distinguish platform-specific build directories and\n    platform-specific built distributions.  Typically includes the OS name\n    and version and the architecture (as supplied by \'os.uname()\'),\n    although the exact information included depends on the OS; eg. for IRIX\n    the architecture isn\'t particularly important (IRIX only runs on SGI\n    hardware), but for Linux the kernel version isn\'t particularly\n    important.\n\n    Examples of returned values:\n       linux-i586\n       linux-alpha (?)\n       solaris-2.6-sun4u\n       irix-5.3\n       irix64-6.2\n\n    Windows will return one of:\n       win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)\n       win-ia64 (64bit Windows on Itanium)\n       win32 (all others - specifically, sys.platform is returned)\n\n    For other non-POSIX platforms, currently just returns \'sys.platform\'.\n    """\n    if os.name == \'nt\':\n        # sniff sys.version for architecture.\n        prefix = " bit ("\n        i = sys.version.find(prefix)\n        if i == -1:\n            return sys.platform\n        j = sys.version.find(")", i)\n        look = sys.version[i+len(prefix):j].lower()\n        if look == \'amd64\':\n            return \'win-amd64\'\n        if look == \'itanium\':\n            return \'win-ia64\'\n        return sys.platform\n\n    if os.name != "posix" or not hasattr(os, \'uname\'):\n        # XXX what about the architecture? NT is Intel or Alpha\n        return sys.platform\n\n    # Set for cross builds explicitly\n    if "_PYTHON_HOST_PLATFORM" in os.environ:\n        return os.environ["_PYTHON_HOST_PLATFORM"]\n\n    # Try to distinguish various flavours of Unix\n    osname, host, release, version, machine = os.uname()\n\n    # Convert the OS name to lowercase, remove \'/\' characters\n    # (to accommodate BSD/OS), and translate spaces (for "Power Macintosh")\n    osname = osname.lower().replace(\'/\', \'\')\n    machine = machine.replace(\' \', \'_\')\n    machine = machine.replace(\'/\', \'-\')\n\n    if osname[:5] == "linux":\n        # At least on Linux/Intel, \'machine\' is the processor --\n        # i386, etc.\n        # XXX what about Alpha, SPARC, etc?\n        return  "%s-%s" % (osname, machine)\n    elif osname[:5] == "sunos":\n        if release[0] >= "5":           # SunOS 5 == Solaris 2\n            osname = "solaris"\n            release = "%d.%s" % (int(release[0]) - 3, release[2:])\n            # We can\'t use "platform.architecture()[0]" because a\n            # bootstrap problem. We use a dict to get an error\n            # if some suspicious happens.\n            bitness = {2147483647:"32bit", 9223372036854775807:"64bit"}\n            machine += ".%s" % bitness[sys.maxsize]\n        # fall through to standard osname-release-machine representation\n    elif osname[:4] == "irix":              # could be "irix64"!\n        return "%s-%s" % (osname, release)\n    elif osname[:3] == "aix":\n        return "%s-%s.%s" % (osname, version, release)\n    elif osname[:6] == "cygwin":\n        osname = "cygwin"\n        import re\n        rel_re = re.compile(r\'[\\d.]+\')\n        m = rel_re.match(release)\n        if m:\n            release = m.group()\n    elif osname[:6] == "darwin":\n        import _osx_support\n        osname, release, machine = _osx_support.get_platform_osx(\n                                            get_config_vars(),\n                                            osname, release, machine)\n\n    return "%s-%s-%s" % (osname, release, machine)\n\n\ndef get_python_version():\n    return _PY_VERSION_SHORT\n\n\ndef _print_dict(title, data):\n    for index, (key, value) in enumerate(sorted(data.items())):\n        if index == 0:\n            print(\'%s: \' % (title))\n        print(\'\\t%s = "%s"\' % (key, value))\n\n\ndef _main():\n    """Display all information sysconfig detains."""\n    if \'--generate-posix-vars\' in sys.argv:\n        _generate_posix_vars()\n        return\n    print(\'Platform: "%s"\' % get_platform())\n    print(\'Python version: "%s"\' % get_python_version())\n    print(\'Current installation scheme: "%s"\' % _get_default_scheme())\n    print()\n    _print_dict(\'Paths\', get_paths())\n    print()\n    _print_dict(\'Variables\', get_config_vars())\n\n\nif __name__ == \'__main__\':\n    _main()\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'"""Access to Python\'s configuration information."""\n\nimport os\nimport sys\nfrom os.path import pardir, realpath\n\n__all__ = [\n    \'get_config_h_filename\',\n    \'get_config_var\',\n    \'get_config_vars\',\n    \'get_makefile_filename\',\n    \'get_path\',\n    \'get_path_names\',\n    \'get_paths\',\n    \'get_platform\',\n    \'get_python_version\',\n    \'get_scheme_names\',\n    \'parse_config_h\',\n]\n\n_INSTALL_SCHEMES = {\n    \'posix_prefix\': {\n        \'stdlib\': \'{installed_base}/lib/python{py_version_short}\',\n        \'platstdlib\': \'{platbase}/lib/python{py_version_short}\',\n        \'purelib\': \'{base}/lib/python{py_version_short}/site-packages\',\n        \'platlib\': \'{platbase}/lib/python{py_version_short}/site-packages\',\n        \'include\':\n            \'{installed_base}/include/python{py_version_short}{abiflags}\',\n        \'platinclude\':\n            \'{installed_platbase}/include/python{py_version_short}{abiflags}\',\n        \'scripts\': \'{base}/bin\',\n        \'data\': \'{base}\',\n        },\n    \'posix_home\': {\n        \'stdlib\': \'{installed_base}/lib/python\',\n        \'platstdlib\': \'{base}/lib/python\',\n        \'purelib\': \'{base}/lib/python\',\n        \'platlib\': \'{base}/lib/python\',\n        \'include\': \'{installed_base}/include/python\',\n        \'platinclude\': \'{installed_base}/include/python\',\n        \'scripts\': \'{base}/bin\',\n        \'data\': \'{base}\',\n        },\n    \'pypy\': {\n        \'stdlib\': \'{installed_base}/lib-python\',\n        \'platstdlib\': \'{base}/lib-python\',\n        \'purelib\': \'{base}/site-packages\',\n        \'platlib\': \'{base}/site-packages\',\n        \'include\': \'{installed_base}/include\',\n        \'platinclude\': \'{installed_base}/include\',\n        \'scripts\': \'{base}/bin\',\n        \'data\'   : \'{base}\',\n        },\n    \'nt\': {\n        \'stdlib\': \'{installed_base}/Lib\',\n        \'platstdlib\': \'{base}/Lib\',\n        \'purelib\': \'{base}/Lib/site-packages\',\n        \'platlib\': \'{base}/Lib/site-packages\',\n        \'include\': \'{installed_base}/Include\',\n        \'platinclude\': \'{installed_base}/Include\',\n        \'scripts\': \'{base}/Scripts\',\n        \'data\': \'{base}\',\n        },\n    \'nt_user\': {\n        \'stdlib\': \'{userbase}/Python{py_version_nodot}\',\n        \'platstdlib\': \'{userbase}/Python{py_version_nodot}\',\n        \'purelib\': \'{userbase}/Python{py_version_nodot}/site-packages\',\n        \'platlib\': \'{userbase}/Python{py_version_nodot}/site-packages\',\n        \'include\': \'{userbase}/Python{py_version_nodot}/Include\',\n        \'scripts\': \'{userbase}/Python{py_version_nodot}/Scripts\',\n        \'data\': \'{userbase}\',\n        },\n    \'posix_user\': {\n        \'stdlib\': \'{userbase}/lib/python{py_version_short}\',\n        \'platstdlib\': \'{userbase}/lib/python{py_version_short}\',\n        \'purelib\': \'{userbase}/lib/python{py_version_short}/site-packages\',\n        \'platlib\': \'{userbase}/lib/python{py_version_short}/site-packages\',\n        \'include\': \'{userbase}/include/python{py_version_short}\',\n        \'scripts\': \'{userbase}/bin\',\n        \'data\': \'{userbase}\',\n        },\n    \'osx_framework_user\': {\n        \'stdlib\': \'{userbase}/lib/python\',\n        \'platstdlib\': \'{userbase}/lib/python\',\n        \'purelib\': \'{userbase}/lib/python/site-packages\',\n        \'platlib\': \'{userbase}/lib/python/site-packages\',\n        \'include\': \'{userbase}/include\',\n        \'scripts\': \'{userbase}/bin\',\n        \'data\': \'{userbase}\',\n        },\n    }\n\n_SCHEME_KEYS = (\'stdlib\', \'platstdlib\', \'purelib\', \'platlib\', \'include\',\n                \'scripts\', \'data\')\n\n # FIXME don\'t rely on sys.version here, its format is an implementation detail\n # of CPython, use sys.version_info or sys.hexversion\n_PY_VERSION = sys.version.split()[0]\n_PY_VERSION_SHORT = sys.version[:3]\n_PY_VERSION_SHORT_NO_DOT = _PY_VERSION[0] + _PY_VERSION[2]\n_PREFIX = os.path.normpath(sys.prefix)\n_BASE_PREFIX = os.path.normpath(sys.base_prefix)\n_EXEC_PREFIX = os.path.normpath(sys.exec_prefix)\n_BASE_EXEC_PREFIX = os.path.normpath(sys.base_exec_prefix)\n_CONFIG_VARS = None\n_USER_BASE = None\n\n\ndef _safe_realpath(path):\n    try:\n        return realpath(path)\n    except OSError:\n        return path\n\nif sys.executable:\n    _PROJECT_BASE = os.path.dirname(_safe_realpath(sys.executable))\nelse:\n    # sys.executable can be empty if argv[0] has been changed and Python is\n    # unable to retrieve the real program name\n    _PROJECT_BASE = _safe_realpath(os.getcwd())\n\nif (os.name == \'nt\' and\n    _PROJECT_BASE.lower().endswith((\'\\\\pcbuild\\\\win32\', \'\\\\pcbuild\\\\amd64\'))):\n    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir, pardir))\n\n# set for cross builds\nif "_PYTHON_PROJECT_BASE" in os.environ:\n    _PROJECT_BASE = _safe_realpath(os.environ["_PYTHON_PROJECT_BASE"])\n\ndef _is_python_source_dir(d):\n    for fn in ("Setup.dist", "Setup.local"):\n        if os.path.isfile(os.path.join(d, "Modules", fn)):\n            return True\n    return False\n\n_sys_home = getattr(sys, \'_home\', None)\nif (_sys_home and os.name == \'nt\' and\n    _sys_home.lower().endswith((\'\\\\pcbuild\\\\win32\', \'\\\\pcbuild\\\\amd64\'))):\n    _sys_home = os.path.dirname(os.path.dirname(_sys_home))\ndef is_python_build(check_home=False):\n    if check_home and _sys_home:\n        return _is_python_source_dir(_sys_home)\n    return _is_python_source_dir(_PROJECT_BASE)\n\n_PYTHON_BUILD = is_python_build(True)\n\nif _PYTHON_BUILD:\n    for scheme in (\'posix_prefix\', \'posix_home\'):\n        _INSTALL_SCHEMES[scheme][\'include\'] = \'{srcdir}/Include\'\n        _INSTALL_SCHEMES[scheme][\'platinclude\'] = \'{projectbase}/.\'\n\n\ndef _subst_vars(s, local_vars):\n    try:\n        return s.format(**local_vars)\n    except KeyError:\n        try:\n            return s.format(**os.environ)\n        except KeyError as var:\n            raise AttributeError(\'{%s}\' % var)\n\ndef _extend_dict(target_dict, other_dict):\n    target_keys = target_dict.keys()\n    for key, value in other_dict.items():\n        if key in target_keys:\n            continue\n        target_dict[key] = value\n\n\ndef _expand_vars(scheme, vars):\n    res = {}\n    if vars is None:\n        vars = {}\n    _extend_dict(vars, get_config_vars())\n\n    for key, value in _INSTALL_SCHEMES[scheme].items():\n        if os.name in (\'posix\', \'nt\'):\n            value = os.path.expanduser(value)\n        res[key] = os.path.normpath(_subst_vars(value, vars))\n    return res\n\n\ndef _get_default_scheme():\n    if \'__pypy__\' in sys.builtin_module_names:\n        return \'pypy\'\n    elif os.name == \'posix\':\n        # the default scheme for posix is posix_prefix\n        return \'posix_prefix\'\n    return os.name\n\n\ndef _getuserbase():\n    env_base = os.environ.get("PYTHONUSERBASE", None)\n\n    def joinuser(*args):\n        return os.path.expanduser(os.path.join(*args))\n\n    if os.name == "nt":\n        base = os.environ.get("APPDATA") or "~"\n        if env_base:\n            return env_base\n        else:\n            return joinuser(base, "Python")\n\n    if sys.platform == "darwin":\n        framework = get_config_var("PYTHONFRAMEWORK")\n        if framework:\n            if env_base:\n                return env_base\n            else:\n                return joinuser("~", "Library", framework, "%d.%d" %\n                                sys.version_info[:2])\n\n    if env_base:\n        return env_base\n    else:\n        return joinuser("~", ".local")\n\n\ndef _parse_makefile(filename, vars=None):\n    """Parse a Makefile-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    """\n    # Regexes needed for parsing Makefile (and similar syntaxes,\n    # like old-style Setup files).\n    import re\n    _variable_rx = re.compile("([a-zA-Z][a-zA-Z0-9_]+)\\s*=\\s*(.*)")\n    _findvar1_rx = re.compile(r"\\$\\(([A-Za-z][A-Za-z0-9_]*)\\)")\n    _findvar2_rx = re.compile(r"\\${([A-Za-z][A-Za-z0-9_]*)}")\n\n    if vars is None:\n        vars = {}\n    done = {}\n    notdone = {}\n\n    with open(filename, errors="surrogateescape") as f:\n        lines = f.readlines()\n\n    for line in lines:\n        if line.startswith(\'#\') or line.strip() == \'\':\n            continue\n        m = _variable_rx.match(line)\n        if m:\n            n, v = m.group(1, 2)\n            v = v.strip()\n            # `$$\' is a literal `$\' in make\n            tmpv = v.replace(\'$$\', \'\')\n\n            if "$" in tmpv:\n                notdone[n] = v\n            else:\n                try:\n                    v = int(v)\n                except ValueError:\n                    # insert literal `$\'\n                    done[n] = v.replace(\'$$\', \'$\')\n                else:\n                    done[n] = v\n\n    # do variable interpolation here\n    variables = list(notdone.keys())\n\n    # Variables with a \'PY_\' prefix in the makefile. These need to\n    # be made available without that prefix through sysconfig.\n    # Special care is needed to ensure that variable expansion works, even\n    # if the expansion uses the name without a prefix.\n    renamed_variables = (\'CFLAGS\', \'LDFLAGS\', \'CPPFLAGS\')\n\n    while len(variables) > 0:\n        for name in tuple(variables):\n            value = notdone[name]\n            m1 = _findvar1_rx.search(value)\n            m2 = _findvar2_rx.search(value)\n            if m1 and m2:\n                m = m1 if m1.start() < m2.start() else m2\n            else:\n                m = m1 if m1 else m2\n            if m is not None:\n                n = m.group(1)\n                found = True\n                if n in done:\n                    item = str(done[n])\n                elif n in notdone:\n                    # get it on a subsequent round\n                    found = False\n                elif n in os.environ:\n                    # do it like make: fall back to environment\n                    item = os.environ[n]\n\n                elif n in renamed_variables:\n                    if (name.startswith(\'PY_\') and\n                        name[3:] in renamed_variables):\n                        item = ""\n\n                    elif \'PY_\' + n in notdone:\n                        found = False\n\n                    else:\n                        item = str(done[\'PY_\' + n])\n\n                else:\n                    done[n] = item = ""\n\n                if found:\n                    after = value[m.end():]\n                    value = value[:m.start()] + item + after\n                    if "$" in after:\n                        notdone[name] = value\n                    else:\n                        try:\n                            value = int(value)\n                        except ValueError:\n                            done[name] = value.strip()\n                        else:\n                            done[name] = value\n                        variables.remove(name)\n\n                        if name.startswith(\'PY_\') \\\n                        and name[3:] in renamed_variables:\n\n                            name = name[3:]\n                            if name not in done:\n                                done[name] = value\n\n            else:\n                # bogus variable reference (e.g. "prefix=$/opt/python");\n                # just drop it since we can\'t deal\n                done[name] = value\n                variables.remove(name)\n\n    # strip spurious spaces\n    for k, v in done.items():\n        if isinstance(v, str):\n            done[k] = v.strip()\n\n    # save the results in the global dictionary\n    vars.update(done)\n    return vars\n\n\ndef get_makefile_filename():\n    """Return the path of the Makefile."""\n    if _PYTHON_BUILD:\n        return os.path.join(_sys_home or _PROJECT_BASE, "Makefile")\n    if hasattr(sys, \'abiflags\'):\n        config_dir_name = \'config-%s%s\' % (_PY_VERSION_SHORT, sys.abiflags)\n    else:\n        config_dir_name = \'config\'\n    return os.path.join(get_path(\'stdlib\'), config_dir_name, \'Makefile\')\n\ndef _generate_posix_vars():\n    """Generate the Python module containing build-time variables."""\n    import pprint\n    vars = {}\n    # load the installed Makefile:\n    makefile = get_makefile_filename()\n    try:\n        _parse_makefile(makefile, vars)\n    except OSError as e:\n        msg = "invalid Python installation: unable to open %s" % makefile\n        if hasattr(e, "strerror"):\n            msg = msg + " (%s)" % e.strerror\n        raise OSError(msg)\n    # load the installed pyconfig.h:\n    config_h = get_config_h_filename()\n    try:\n        with open(config_h) as f:\n            parse_config_h(f, vars)\n    except OSError as e:\n        msg = "invalid Python installation: unable to open %s" % config_h\n        if hasattr(e, "strerror"):\n            msg = msg + " (%s)" % e.strerror\n        raise OSError(msg)\n    # On AIX, there are wrong paths to the linker scripts in the Makefile\n    # -- these paths are relative to the Python source, but when installed\n    # the scripts are in another directory.\n    if _PYTHON_BUILD:\n        vars[\'BLDSHARED\'] = vars[\'LDSHARED\']\n\n    # There\'s a chicken-and-egg situation on OS X with regards to the\n    # _sysconfigdata module after the changes introduced by #15298:\n    # get_config_vars() is called by get_platform() as part of the\n    # `make pybuilddir.txt` target -- which is a precursor to the\n    # _sysconfigdata.py module being constructed.  Unfortunately,\n    # get_config_vars() eventually calls _init_posix(), which attempts\n    # to import _sysconfigdata, which we won\'t have built yet.  In order\n    # for _init_posix() to work, if we\'re on Darwin, just mock up the\n    # _sysconfigdata module manually and populate it with the build vars.\n    # This is more than sufficient for ensuring the subsequent call to\n    # get_platform() succeeds.\n    name = \'_sysconfigdata\'\n    if \'darwin\' in sys.platform:\n        import types\n        module = types.ModuleType(name)\n        module.build_time_vars = vars\n        sys.modules[name] = module\n\n    pybuilddir = \'build/lib.%s-%s\' % (get_platform(), sys.version[:3])\n    if hasattr(sys, "gettotalrefcount"):\n        pybuilddir += \'-pydebug\'\n    os.makedirs(pybuilddir, exist_ok=True)\n    destfile = os.path.join(pybuilddir, name + \'.py\')\n\n    with open(destfile, \'w\', encoding=\'utf8\') as f:\n        f.write(\'# system configuration generated and used by\'\n                \' the sysconfig module\\n\')\n        f.write(\'build_time_vars = \')\n        pprint.pprint(vars, stream=f)\n\n    # Create file used for sys.path fixup -- see Modules/getpath.c\n    with open(\'pybuilddir.txt\', \'w\', encoding=\'ascii\') as f:\n        f.write(pybuilddir)\n\ndef _init_posix(vars):\n    """Initialize the module as appropriate for POSIX systems."""\n    from _sysconfigdata import build_time_vars\n    vars.update(build_time_vars)\n\ndef _init_non_posix(vars):\n    """Initialize the module as appropriate for NT"""\n    # set basic install directories\n    vars[\'LIBDEST\'] = get_path(\'stdlib\')\n    vars[\'BINLIBDEST\'] = get_path(\'platstdlib\')\n    vars[\'INCLUDEPY\'] = get_path(\'include\')\n    vars[\'EXT_SUFFIX\'] = \'.pyd\'\n    vars[\'EXE\'] = \'.exe\'\n    vars[\'VERSION\'] = _PY_VERSION_SHORT_NO_DOT\n    vars[\'BINDIR\'] = os.path.dirname(_safe_realpath(sys.executable))\n\n#\n# public APIs\n#\n\n\ndef parse_config_h(fp, vars=None):\n    """Parse a config.h-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    """\n    if vars is None:\n        vars = {}\n    import re\n    define_rx = re.compile("#define ([A-Z][A-Za-z0-9_]+) (.*)\\n")\n    undef_rx = re.compile("/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]/\\n")\n\n    while True:\n        line = fp.readline()\n        if not line:\n            break\n        m = define_rx.match(line)\n        if m:\n            n, v = m.group(1, 2)\n            try:\n                v = int(v)\n            except ValueError:\n                pass\n            vars[n] = v\n        else:\n            m = undef_rx.match(line)\n            if m:\n                vars[m.group(1)] = 0\n    return vars\n\n\ndef get_config_h_filename():\n    """Return the path of pyconfig.h."""\n    if _PYTHON_BUILD:\n        if os.name == "nt":\n            inc_dir = os.path.join(_sys_home or _PROJECT_BASE, "PC")\n        else:\n            inc_dir = _sys_home or _PROJECT_BASE\n    else:\n        inc_dir = get_path(\'platinclude\')\n    return os.path.join(inc_dir, \'pyconfig.h\')\n\n\ndef get_scheme_names():\n    """Return a tuple containing the schemes names."""\n    return tuple(sorted(_INSTALL_SCHEMES))\n\n\ndef get_path_names():\n    """Return a tuple containing the paths names."""\n    return _SCHEME_KEYS\n\n\ndef get_paths(scheme=_get_default_scheme(), vars=None, expand=True):\n    """Return a mapping containing an install scheme.\n\n    ``scheme`` is the install scheme name. If not provided, it will\n    return the default scheme for the current platform.\n    """\n    if expand:\n        return _expand_vars(scheme, vars)\n    else:\n        return _INSTALL_SCHEMES[scheme]\n\n\ndef get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):\n    """Return a path corresponding to the scheme.\n\n    ``scheme`` is the install scheme name.\n    """\n    return get_paths(scheme, vars, expand)[name]\n\n\ndef get_config_vars(*args):\n    """With no arguments, return a dictionary of all configuration\n    variables relevant for the current platform.\n\n    On Unix, this means every variable defined in Python\'s installed Makefile;\n    On Windows it\'s a much smaller set.\n\n    With arguments, return a list of values that result from looking up\n    each argument in the configuration variable dictionary.\n    """\n    global _CONFIG_VARS\n    if _CONFIG_VARS is None:\n        _CONFIG_VARS = {}\n        # Normalized versions of prefix and exec_prefix are handy to have;\n        # in fact, these are the standard versions used most places in the\n        # Distutils.\n        _CONFIG_VARS[\'prefix\'] = _PREFIX\n        _CONFIG_VARS[\'exec_prefix\'] = _EXEC_PREFIX\n        _CONFIG_VARS[\'py_version\'] = _PY_VERSION\n        _CONFIG_VARS[\'py_version_short\'] = _PY_VERSION_SHORT\n        _CONFIG_VARS[\'py_version_nodot\'] = _PY_VERSION[0] + _PY_VERSION[2]\n        _CONFIG_VARS[\'installed_base\'] = _BASE_PREFIX\n        _CONFIG_VARS[\'base\'] = _PREFIX\n        _CONFIG_VARS[\'installed_platbase\'] = _BASE_EXEC_PREFIX\n        _CONFIG_VARS[\'platbase\'] = _EXEC_PREFIX\n        _CONFIG_VARS[\'projectbase\'] = _PROJECT_BASE\n        try:\n            _CONFIG_VARS[\'abiflags\'] = sys.abiflags\n        except AttributeError:\n            # sys.abiflags may not be defined on all platforms.\n            _CONFIG_VARS[\'abiflags\'] = \'\'\n\n        if os.name == \'nt\':\n            _init_non_posix(_CONFIG_VARS)\n        if os.name == \'posix\':\n            _init_posix(_CONFIG_VARS)\n        # For backward compatibility, see issue19555\n        SO = _CONFIG_VARS.get(\'EXT_SUFFIX\')\n        if SO is not None:\n            _CONFIG_VARS[\'SO\'] = SO\n        # Setting \'userbase\' is done below the call to the\n        # init function to enable using \'get_config_var\' in\n        # the init-function.\n        _CONFIG_VARS[\'userbase\'] = _getuserbase()\n\n        # Always convert srcdir to an absolute path\n        srcdir = _CONFIG_VARS.get(\'srcdir\', _PROJECT_BASE)\n        if os.name == \'posix\':\n            if _PYTHON_BUILD:\n                # If srcdir is a relative path (typically \'.\' or \'..\')\n                # then it should be interpreted relative to the directory\n                # containing Makefile.\n                base = os.path.dirname(get_makefile_filename())\n                srcdir = os.path.join(base, srcdir)\n            else:\n                # srcdir is not meaningful since the installation is\n                # spread about the filesystem.  We choose the\n                # directory containing the Makefile since we know it\n                # exists.\n                srcdir = os.path.dirname(get_makefile_filename())\n        _CONFIG_VARS[\'srcdir\'] = _safe_realpath(srcdir)\n\n        # OS X platforms require special customization to handle\n        # multi-architecture, multi-os-version installers\n        if sys.platform == \'darwin\':\n            import _osx_support\n            _osx_support.customize_config_vars(_CONFIG_VARS)\n\n        _CONFIG_VARS[\'INCLUDEPY\'] = os.path.join(_CONFIG_VARS[\'prefix\'],\n                                                 \'include\')\n\n    if args:\n        vals = []\n        for name in args:\n            vals.append(_CONFIG_VARS.get(name))\n        return vals\n    else:\n        return _CONFIG_VARS\n\n\ndef get_config_var(name):\n    """Return the value of a single variable using the dictionary returned by\n    \'get_config_vars()\'.\n\n    Equivalent to get_config_vars().get(name)\n    """\n    if name == \'SO\':\n        import warnings\n        warnings.warn(\'SO is deprecated, use EXT_SUFFIX\', DeprecationWarning, 2)\n    return get_config_vars().get(name)\n\n\ndef get_platform():\n    """Return a string that identifies the current platform.\n\n    This is used mainly to distinguish platform-specific build directories and\n    platform-specific built distributions.  Typically includes the OS name\n    and version and the architecture (as supplied by \'os.uname()\'),\n    although the exact information included depends on the OS; eg. for IRIX\n    the architecture isn\'t particularly important (IRIX only runs on SGI\n    hardware), but for Linux the kernel version isn\'t particularly\n    important.\n\n    Examples of returned values:\n       linux-i586\n       linux-alpha (?)\n       solaris-2.6-sun4u\n       irix-5.3\n       irix64-6.2\n\n    Windows will return one of:\n       win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)\n       win-ia64 (64bit Windows on Itanium)\n       win32 (all others - specifically, sys.platform is returned)\n\n    For other non-POSIX platforms, currently just returns \'sys.platform\'.\n    """\n    if os.name == \'nt\':\n        # sniff sys.version for architecture.\n        prefix = " bit ("\n        i = sys.version.find(prefix)\n        if i == -1:\n            return sys.platform\n        j = sys.version.find(")", i)\n        look = sys.version[i+len(prefix):j].lower()\n        if look == \'amd64\':\n            return \'win-amd64\'\n        if look == \'itanium\':\n            return \'win-ia64\'\n        return sys.platform\n\n    if os.name != "posix" or not hasattr(os, \'uname\'):\n        # XXX what about the architecture? NT is Intel or Alpha\n        return sys.platform\n\n    # Set for cross builds explicitly\n    if "_PYTHON_HOST_PLATFORM" in os.environ:\n        return os.environ["_PYTHON_HOST_PLATFORM"]\n\n    # Try to distinguish various flavours of Unix\n    osname, host, release, version, machine = os.uname()\n\n    # Convert the OS name to lowercase, remove \'/\' characters\n    # (to accommodate BSD/OS), and translate spaces (for "Power Macintosh")\n    osname = osname.lower().replace(\'/\', \'\')\n    machine = machine.replace(\' \', \'_\')\n    machine = machine.replace(\'/\', \'-\')\n\n    if osname[:5] == "linux":\n        # At least on Linux/Intel, \'machine\' is the processor --\n        # i386, etc.\n        # XXX what about Alpha, SPARC, etc?\n        return  "%s-%s" % (osname, machine)\n    elif osname[:5] == "sunos":\n        if release[0] >= "5":           # SunOS 5 == Solaris 2\n            osname = "solaris"\n            release = "%d.%s" % (int(release[0]) - 3, release[2:])\n            # We can\'t use "platform.architecture()[0]" because a\n            # bootstrap problem. We use a dict to get an error\n            # if some suspicious happens.\n            bitness = {2147483647:"32bit", 9223372036854775807:"64bit"}\n            machine += ".%s" % bitness[sys.maxsize]\n        # fall through to standard osname-release-machine representation\n    elif osname[:4] == "irix":              # could be "irix64"!\n        return "%s-%s" % (osname, release)\n    elif osname[:3] == "aix":\n        return "%s-%s.%s" % (osname, version, release)\n    elif osname[:6] == "cygwin":\n        osname = "cygwin"\n        import re\n        rel_re = re.compile(r\'[\\d.]+\')\n        m = rel_re.match(release)\n        if m:\n            release = m.group()\n    elif osname[:6] == "darwin":\n        import _osx_support\n        osname, release, machine = _osx_support.get_platform_osx(\n                                            get_config_vars(),\n                                            osname, release, machine)\n\n    return "%s-%s-%s" % (osname, release, machine)\n\n\ndef get_python_version():\n    return _PY_VERSION_SHORT\n\n\ndef _print_dict(title, data):\n    for index, (key, value) in enumerate(sorted(data.items())):\n        if index == 0:\n            print(\'%s: \' % (title))\n        print(\'\\t%s = "%s"\' % (key, value))\n\n\ndef _main():\n    """Display all information sysconfig detains."""\n    if \'--generate-posix-vars\' in sys.argv:\n        _generate_posix_vars()\n        return\n    print(\'Platform: "%s"\' % get_platform())\n    print(\'Python version: "%s"\' % get_python_version())\n    print(\'Current installation scheme: "%s"\' % _get_default_scheme())\n    print()\n    _print_dict(\'Paths\', get_paths())\n    print()\n    _print_dict(\'Variables\', get_config_vars())\n\n\nif __name__ == \'__main__\':\n    _main()\n', resulttype=None
dump b'"""Access to Python\'s configuration information."""\n\nimport os\nimport sys\nfrom os.path import pardir, realpath\n\n__all__ = [\n    \'get_config_h_filename\',\n    \'get_config_var\',\n    \'get_config_vars\',\n    \'get_makefile_filename\',\n    \'get_path\',\n    \'get_path_names\',\n    \'get_paths\',\n    \'get_platform\',\n    \'get_python_version\',\n    \'get_scheme_names\',\n    \'parse_config_h\',\n]\n\n_INSTALL_SCHEMES = {\n    \'posix_prefix\': {\n        \'stdlib\': \'{installed_base}/lib/python{py_version_short}\',\n        \'platstdlib\': \'{platbase}/lib/python{py_version_short}\',\n        \'purelib\': \'{base}/lib/python{py_version_short}/site-packages\',\n        \'platlib\': \'{platbase}/lib/python{py_version_short}/site-packages\',\n        \'include\':\n            \'{installed_base}/include/python{py_version_short}{abiflags}\',\n        \'platinclude\':\n            \'{installed_platbase}/include/python{py_version_short}{abiflags}\',\n        \'scripts\': \'{base}/bin\',\n        \'data\': \'{base}\',\n        },\n    \'posix_home\': {\n        \'stdlib\': \'{installed_base}/lib/python\',\n        \'platstdlib\': \'{base}/lib/python\',\n        \'purelib\': \'{base}/lib/python\',\n        \'platlib\': \'{base}/lib/python\',\n        \'include\': \'{installed_base}/include/python\',\n        \'platinclude\': \'{installed_base}/include/python\',\n        \'scripts\': \'{base}/bin\',\n        \'data\': \'{base}\',\n        },\n    \'pypy\': {\n        \'stdlib\': \'{installed_base}/lib-python\',\n        \'platstdlib\': \'{base}/lib-python\',\n        \'purelib\': \'{base}/site-packages\',\n        \'platlib\': \'{base}/site-packages\',\n        \'include\': \'{installed_base}/include\',\n        \'platinclude\': \'{installed_base}/include\',\n        \'scripts\': \'{base}/bin\',\n        \'data\'   : \'{base}\',\n        },\n    \'nt\': {\n        \'stdlib\': \'{installed_base}/Lib\',\n        \'platstdlib\': \'{base}/Lib\',\n        \'purelib\': \'{base}/Lib/site-packages\',\n        \'platlib\': \'{base}/Lib/site-packages\',\n        \'include\': \'{installed_base}/Include\',\n        \'platinclude\': \'{installed_base}/Include\',\n        \'scripts\': \'{base}/Scripts\',\n        \'data\': \'{base}\',\n        },\n    \'nt_user\': {\n        \'stdlib\': \'{userbase}/Python{py_version_nodot}\',\n        \'platstdlib\': \'{userbase}/Python{py_version_nodot}\',\n        \'purelib\': \'{userbase}/Python{py_version_nodot}/site-packages\',\n        \'platlib\': \'{userbase}/Python{py_version_nodot}/site-packages\',\n        \'include\': \'{userbase}/Python{py_version_nodot}/Include\',\n        \'scripts\': \'{userbase}/Python{py_version_nodot}/Scripts\',\n        \'data\': \'{userbase}\',\n        },\n    \'posix_user\': {\n        \'stdlib\': \'{userbase}/lib/python{py_version_short}\',\n        \'platstdlib\': \'{userbase}/lib/python{py_version_short}\',\n        \'purelib\': \'{userbase}/lib/python{py_version_short}/site-packages\',\n        \'platlib\': \'{userbase}/lib/python{py_version_short}/site-packages\',\n        \'include\': \'{userbase}/include/python{py_version_short}\',\n        \'scripts\': \'{userbase}/bin\',\n        \'data\': \'{userbase}\',\n        },\n    \'osx_framework_user\': {\n        \'stdlib\': \'{userbase}/lib/python\',\n        \'platstdlib\': \'{userbase}/lib/python\',\n        \'purelib\': \'{userbase}/lib/python/site-packages\',\n        \'platlib\': \'{userbase}/lib/python/site-packages\',\n        \'include\': \'{userbase}/include\',\n        \'scripts\': \'{userbase}/bin\',\n        \'data\': \'{userbase}\',\n        },\n    }\n\n_SCHEME_KEYS = (\'stdlib\', \'platstdlib\', \'purelib\', \'platlib\', \'include\',\n                \'scripts\', \'data\')\n\n # FIXME don\'t rely on sys.version here, its format is an implementation detail\n # of CPython, use sys.version_info or sys.hexversion\n_PY_VERSION = sys.version.split()[0]\n_PY_VERSION_SHORT = sys.version[:3]\n_PY_VERSION_SHORT_NO_DOT = _PY_VERSION[0] + _PY_VERSION[2]\n_PREFIX = os.path.normpath(sys.prefix)\n_BASE_PREFIX = os.path.normpath(sys.base_prefix)\n_EXEC_PREFIX = os.path.normpath(sys.exec_prefix)\n_BASE_EXEC_PREFIX = os.path.normpath(sys.base_exec_prefix)\n_CONFIG_VARS = None\n_USER_BASE = None\n\n\ndef _safe_realpath(path):\n    try:\n        return realpath(path)\n    except OSError:\n        return path\n\nif sys.executable:\n    _PROJECT_BASE = os.path.dirname(_safe_realpath(sys.executable))\nelse:\n    # sys.executable can be empty if argv[0] has been changed and Python is\n    # unable to retrieve the real program name\n    _PROJECT_BASE = _safe_realpath(os.getcwd())\n\nif (os.name == \'nt\' and\n    _PROJECT_BASE.lower().endswith((\'\\\\pcbuild\\\\win32\', \'\\\\pcbuild\\\\amd64\'))):\n    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir, pardir))\n\n# set for cross builds\nif "_PYTHON_PROJECT_BASE" in os.environ:\n    _PROJECT_BASE = _safe_realpath(os.environ["_PYTHON_PROJECT_BASE"])\n\ndef _is_python_source_dir(d):\n    for fn in ("Setup.dist", "Setup.local"):\n        if os.path.isfile(os.path.join(d, "Modules", fn)):\n            return True\n    return False\n\n_sys_home = getattr(sys, \'_home\', None)\nif (_sys_home and os.name == \'nt\' and\n    _sys_home.lower().endswith((\'\\\\pcbuild\\\\win32\', \'\\\\pcbuild\\\\amd64\'))):\n    _sys_home = os.path.dirname(os.path.dirname(_sys_home))\ndef is_python_build(check_home=False):\n    if check_home and _sys_home:\n        return _is_python_source_dir(_sys_home)\n    return _is_python_source_dir(_PROJECT_BASE)\n\n_PYTHON_BUILD = is_python_build(True)\n\nif _PYTHON_BUILD:\n    for scheme in (\'posix_prefix\', \'posix_home\'):\n        _INSTALL_SCHEMES[scheme][\'include\'] = \'{srcdir}/Include\'\n        _INSTALL_SCHEMES[scheme][\'platinclude\'] = \'{projectbase}/.\'\n\n\ndef _subst_vars(s, local_vars):\n    try:\n        return s.format(**local_vars)\n    except KeyError:\n        try:\n            return s.format(**os.environ)\n        except KeyError as var:\n            raise AttributeError(\'{%s}\' % var)\n\ndef _extend_dict(target_dict, other_dict):\n    target_keys = target_dict.keys()\n    for key, value in other_dict.items():\n        if key in target_keys:\n            continue\n        target_dict[key] = value\n\n\ndef _expand_vars(scheme, vars):\n    res = {}\n    if vars is None:\n        vars = {}\n    _extend_dict(vars, get_config_vars())\n\n    for key, value in _INSTALL_SCHEMES[scheme].items():\n        if os.name in (\'posix\', \'nt\'):\n            value = os.path.expanduser(value)\n        res[key] = os.path.normpath(_subst_vars(value, vars))\n    return res\n\n\ndef _get_default_scheme():\n    if \'__pypy__\' in sys.builtin_module_names:\n        return \'pypy\'\n    elif os.name == \'posix\':\n        # the default scheme for posix is posix_prefix\n        return \'posix_prefix\'\n    return os.name\n\n\ndef _getuserbase():\n    env_base = os.environ.get("PYTHONUSERBASE", None)\n\n    def joinuser(*args):\n        return os.path.expanduser(os.path.join(*args))\n\n    if os.name == "nt":\n        base = os.environ.get("APPDATA") or "~"\n        if env_base:\n            return env_base\n        else:\n            return joinuser(base, "Python")\n\n    if sys.platform == "darwin":\n        framework = get_config_var("PYTHONFRAMEWORK")\n        if framework:\n            if env_base:\n                return env_base\n            else:\n                return joinuser("~", "Library", framework, "%d.%d" %\n                                sys.version_info[:2])\n\n    if env_base:\n        return env_base\n    else:\n        return joinuser("~", ".local")\n\n\ndef _parse_makefile(filename, vars=None):\n    """Parse a Makefile-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    """\n    # Regexes needed for parsing Makefile (and similar syntaxes,\n    # like old-style Setup files).\n    import re\n    _variable_rx = re.compile("([a-zA-Z][a-zA-Z0-9_]+)\\s*=\\s*(.*)")\n    _findvar1_rx = re.compile(r"\\$\\(([A-Za-z][A-Za-z0-9_]*)\\)")\n    _findvar2_rx = re.compile(r"\\${([A-Za-z][A-Za-z0-9_]*)}")\n\n    if vars is None:\n        vars = {}\n    done = {}\n    notdone = {}\n\n    with open(filename, errors="surrogateescape") as f:\n        lines = f.readlines()\n\n    for line in lines:\n        if line.startswith(\'#\') or line.strip() == \'\':\n            continue\n        m = _variable_rx.match(line)\n        if m:\n            n, v = m.group(1, 2)\n            v = v.strip()\n            # `$$\' is a literal `$\' in make\n            tmpv = v.replace(\'$$\', \'\')\n\n            if "$" in tmpv:\n                notdone[n] = v\n            else:\n                try:\n                    v = int(v)\n                except ValueError:\n                    # insert literal `$\'\n                    done[n] = v.replace(\'$$\', \'$\')\n                else:\n                    done[n] = v\n\n    # do variable interpolation here\n    variables = list(notdone.keys())\n\n    # Variables with a \'PY_\' prefix in the makefile. These need to\n    # be made available without that prefix through sysconfig.\n    # Special care is needed to ensure that variable expansion works, even\n    # if the expansion uses the name without a prefix.\n    renamed_variables = (\'CFLAGS\', \'LDFLAGS\', \'CPPFLAGS\')\n\n    while len(variables) > 0:\n        for name in tuple(variables):\n            value = notdone[name]\n            m1 = _findvar1_rx.search(value)\n            m2 = _findvar2_rx.search(value)\n            if m1 and m2:\n                m = m1 if m1.start() < m2.start() else m2\n            else:\n                m = m1 if m1 else m2\n            if m is not None:\n                n = m.group(1)\n                found = True\n                if n in done:\n                    item = str(done[n])\n                elif n in notdone:\n                    # get it on a subsequent round\n                    found = False\n                elif n in os.environ:\n                    # do it like make: fall back to environment\n                    item = os.environ[n]\n\n                elif n in renamed_variables:\n                    if (name.startswith(\'PY_\') and\n                        name[3:] in renamed_variables):\n                        item = ""\n\n                    elif \'PY_\' + n in notdone:\n                        found = False\n\n                    else:\n                        item = str(done[\'PY_\' + n])\n\n                else:\n                    done[n] = item = ""\n\n                if found:\n                    after = value[m.end():]\n                    value = value[:m.start()] + item + after\n                    if "$" in after:\n                        notdone[name] = value\n                    else:\n                        try:\n                            value = int(value)\n                        except ValueError:\n                            done[name] = value.strip()\n                        else:\n                            done[name] = value\n                        variables.remove(name)\n\n                        if name.startswith(\'PY_\') \\\n                        and name[3:] in renamed_variables:\n\n                            name = name[3:]\n                            if name not in done:\n                                done[name] = value\n\n            else:\n                # bogus variable reference (e.g. "prefix=$/opt/python");\n                # just drop it since we can\'t deal\n                done[name] = value\n                variables.remove(name)\n\n    # strip spurious spaces\n    for k, v in done.items():\n        if isinstance(v, str):\n            done[k] = v.strip()\n\n    # save the results in the global dictionary\n    vars.update(done)\n    return vars\n\n\ndef get_makefile_filename():\n    """Return the path of the Makefile."""\n    if _PYTHON_BUILD:\n        return os.path.join(_sys_home or _PROJECT_BASE, "Makefile")\n    if hasattr(sys, \'abiflags\'):\n        config_dir_name = \'config-%s%s\' % (_PY_VERSION_SHORT, sys.abiflags)\n    else:\n        config_dir_name = \'config\'\n    return os.path.join(get_path(\'stdlib\'), config_dir_name, \'Makefile\')\n\ndef _generate_posix_vars():\n    """Generate the Python module containing build-time variables."""\n    import pprint\n    vars = {}\n    # load the installed Makefile:\n    makefile = get_makefile_filename()\n    try:\n        _parse_makefile(makefile, vars)\n    except OSError as e:\n        msg = "invalid Python installation: unable to open %s" % makefile\n        if hasattr(e, "strerror"):\n            msg = msg + " (%s)" % e.strerror\n        raise OSError(msg)\n    # load the installed pyconfig.h:\n    config_h = get_config_h_filename()\n    try:\n        with open(config_h) as f:\n            parse_config_h(f, vars)\n    except OSError as e:\n        msg = "invalid Python installation: unable to open %s" % config_h\n        if hasattr(e, "strerror"):\n            msg = msg + " (%s)" % e.strerror\n        raise OSError(msg)\n    # On AIX, there are wrong paths to the linker scripts in the Makefile\n    # -- these paths are relative to the Python source, but when installed\n    # the scripts are in another directory.\n    if _PYTHON_BUILD:\n        vars[\'BLDSHARED\'] = vars[\'LDSHARED\']\n\n    # There\'s a chicken-and-egg situation on OS X with regards to the\n    # _sysconfigdata module after the changes introduced by #15298:\n    # get_config_vars() is called by get_platform() as part of the\n    # `make pybuilddir.txt` target -- which is a precursor to the\n    # _sysconfigdata.py module being constructed.  Unfortunately,\n    # get_config_vars() eventually calls _init_posix(), which attempts\n    # to import _sysconfigdata, which we won\'t have built yet.  In order\n    # for _init_posix() to work, if we\'re on Darwin, just mock up the\n    # _sysconfigdata module manually and populate it with the build vars.\n    # This is more than sufficient for ensuring the subsequent call to\n    # get_platform() succeeds.\n    name = \'_sysconfigdata\'\n    if \'darwin\' in sys.platform:\n        import types\n        module = types.ModuleType(name)\n        module.build_time_vars = vars\n        sys.modules[name] = module\n\n    pybuilddir = \'build/lib.%s-%s\' % (get_platform(), sys.version[:3])\n    if hasattr(sys, "gettotalrefcount"):\n        pybuilddir += \'-pydebug\'\n    os.makedirs(pybuilddir, exist_ok=True)\n    destfile = os.path.join(pybuilddir, name + \'.py\')\n\n    with open(destfile, \'w\', encoding=\'utf8\') as f:\n        f.write(\'# system configuration generated and used by\'\n                \' the sysconfig module\\n\')\n        f.write(\'build_time_vars = \')\n        pprint.pprint(vars, stream=f)\n\n    # Create file used for sys.path fixup -- see Modules/getpath.c\n    with open(\'pybuilddir.txt\', \'w\', encoding=\'ascii\') as f:\n        f.write(pybuilddir)\n\ndef _init_posix(vars):\n    """Initialize the module as appropriate for POSIX systems."""\n    from _sysconfigdata import build_time_vars\n    vars.update(build_time_vars)\n\ndef _init_non_posix(vars):\n    """Initialize the module as appropriate for NT"""\n    # set basic install directories\n    vars[\'LIBDEST\'] = get_path(\'stdlib\')\n    vars[\'BINLIBDEST\'] = get_path(\'platstdlib\')\n    vars[\'INCLUDEPY\'] = get_path(\'include\')\n    vars[\'EXT_SUFFIX\'] = \'.pyd\'\n    vars[\'EXE\'] = \'.exe\'\n    vars[\'VERSION\'] = _PY_VERSION_SHORT_NO_DOT\n    vars[\'BINDIR\'] = os.path.dirname(_safe_realpath(sys.executable))\n\n#\n# public APIs\n#\n\n\ndef parse_config_h(fp, vars=None):\n    """Parse a config.h-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    """\n    if vars is None:\n        vars = {}\n    import re\n    define_rx = re.compile("#define ([A-Z][A-Za-z0-9_]+) (.*)\\n")\n    undef_rx = re.compile("/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]/\\n")\n\n    while True:\n        line = fp.readline()\n        if not line:\n            break\n        m = define_rx.match(line)\n        if m:\n            n, v = m.group(1, 2)\n            try:\n                v = int(v)\n            except ValueError:\n                pass\n            vars[n] = v\n        else:\n            m = undef_rx.match(line)\n            if m:\n                vars[m.group(1)] = 0\n    return vars\n\n\ndef get_config_h_filename():\n    """Return the path of pyconfig.h."""\n    if _PYTHON_BUILD:\n        if os.name == "nt":\n            inc_dir = os.path.join(_sys_home or _PROJECT_BASE, "PC")\n        else:\n            inc_dir = _sys_home or _PROJECT_BASE\n    else:\n        inc_dir = get_path(\'platinclude\')\n    return os.path.join(inc_dir, \'pyconfig.h\')\n\n\ndef get_scheme_names():\n    """Return a tuple containing the schemes names."""\n    return tuple(sorted(_INSTALL_SCHEMES))\n\n\ndef get_path_names():\n    """Return a tuple containing the paths names."""\n    return _SCHEME_KEYS\n\n\ndef get_paths(scheme=_get_default_scheme(), vars=None, expand=True):\n    """Return a mapping containing an install scheme.\n\n    ``scheme`` is the install scheme name. If not provided, it will\n    return the default scheme for the current platform.\n    """\n    if expand:\n        return _expand_vars(scheme, vars)\n    else:\n        return _INSTALL_SCHEMES[scheme]\n\n\ndef get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):\n    """Return a path corresponding to the scheme.\n\n    ``scheme`` is the install scheme name.\n    """\n    return get_paths(scheme, vars, expand)[name]\n\n\ndef get_config_vars(*args):\n    """With no arguments, return a dictionary of all configuration\n    variables relevant for the current platform.\n\n    On Unix, this means every variable defined in Python\'s installed Makefile;\n    On Windows it\'s a much smaller set.\n\n    With arguments, return a list of values that result from looking up\n    each argument in the configuration variable dictionary.\n    """\n    global _CONFIG_VARS\n    if _CONFIG_VARS is None:\n        _CONFIG_VARS = {}\n        # Normalized versions of prefix and exec_prefix are handy to have;\n        # in fact, these are the standard versions used most places in the\n        # Distutils.\n        _CONFIG_VARS[\'prefix\'] = _PREFIX\n        _CONFIG_VARS[\'exec_prefix\'] = _EXEC_PREFIX\n        _CONFIG_VARS[\'py_version\'] = _PY_VERSION\n        _CONFIG_VARS[\'py_version_short\'] = _PY_VERSION_SHORT\n        _CONFIG_VARS[\'py_version_nodot\'] = _PY_VERSION[0] + _PY_VERSION[2]\n        _CONFIG_VARS[\'installed_base\'] = _BASE_PREFIX\n        _CONFIG_VARS[\'base\'] = _PREFIX\n        _CONFIG_VARS[\'installed_platbase\'] = _BASE_EXEC_PREFIX\n        _CONFIG_VARS[\'platbase\'] = _EXEC_PREFIX\n        _CONFIG_VARS[\'projectbase\'] = _PROJECT_BASE\n        try:\n            _CONFIG_VARS[\'abiflags\'] = sys.abiflags\n        except AttributeError:\n            # sys.abiflags may not be defined on all platforms.\n            _CONFIG_VARS[\'abiflags\'] = \'\'\n\n        if os.name == \'nt\':\n            _init_non_posix(_CONFIG_VARS)\n        if os.name == \'posix\':\n            _init_posix(_CONFIG_VARS)\n        # For backward compatibility, see issue19555\n        SO = _CONFIG_VARS.get(\'EXT_SUFFIX\')\n        if SO is not None:\n            _CONFIG_VARS[\'SO\'] = SO\n        # Setting \'userbase\' is done below the call to the\n        # init function to enable using \'get_config_var\' in\n        # the init-function.\n        _CONFIG_VARS[\'userbase\'] = _getuserbase()\n\n        # Always convert srcdir to an absolute path\n        srcdir = _CONFIG_VARS.get(\'srcdir\', _PROJECT_BASE)\n        if os.name == \'posix\':\n            if _PYTHON_BUILD:\n                # If srcdir is a relative path (typically \'.\' or \'..\')\n                # then it should be interpreted relative to the directory\n                # containing Makefile.\n                base = os.path.dirname(get_makefile_filename())\n                srcdir = os.path.join(base, srcdir)\n            else:\n                # srcdir is not meaningful since the installation is\n                # spread about the filesystem.  We choose the\n                # directory containing the Makefile since we know it\n                # exists.\n                srcdir = os.path.dirname(get_makefile_filename())\n        _CONFIG_VARS[\'srcdir\'] = _safe_realpath(srcdir)\n\n        # OS X platforms require special customization to handle\n        # multi-architecture, multi-os-version installers\n        if sys.platform == \'darwin\':\n            import _osx_support\n            _osx_support.customize_config_vars(_CONFIG_VARS)\n\n        _CONFIG_VARS[\'INCLUDEPY\'] = os.path.join(_CONFIG_VARS[\'prefix\'],\n                                                 \'include\')\n\n    if args:\n        vals = []\n        for name in args:\n            vals.append(_CONFIG_VARS.get(name))\n        return vals\n    else:\n        return _CONFIG_VARS\n\n\ndef get_config_var(name):\n    """Return the value of a single variable using the dictionary returned by\n    \'get_config_vars()\'.\n\n    Equivalent to get_config_vars().get(name)\n    """\n    if name == \'SO\':\n        import warnings\n        warnings.warn(\'SO is deprecated, use EXT_SUFFIX\', DeprecationWarning, 2)\n    return get_config_vars().get(name)\n\n\ndef get_platform():\n    """Return a string that identifies the current platform.\n\n    This is used mainly to distinguish platform-specific build directories and\n    platform-specific built distributions.  Typically includes the OS name\n    and version and the architecture (as supplied by \'os.uname()\'),\n    although the exact information included depends on the OS; eg. for IRIX\n    the architecture isn\'t particularly important (IRIX only runs on SGI\n    hardware), but for Linux the kernel version isn\'t particularly\n    important.\n\n    Examples of returned values:\n       linux-i586\n       linux-alpha (?)\n       solaris-2.6-sun4u\n       irix-5.3\n       irix64-6.2\n\n    Windows will return one of:\n       win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)\n       win-ia64 (64bit Windows on Itanium)\n       win32 (all others - specifically, sys.platform is returned)\n\n    For other non-POSIX platforms, currently just returns \'sys.platform\'.\n    """\n    if os.name == \'nt\':\n        # sniff sys.version for architecture.\n        prefix = " bit ("\n        i = sys.version.find(prefix)\n        if i == -1:\n            return sys.platform\n        j = sys.version.find(")", i)\n        look = sys.version[i+len(prefix):j].lower()\n        if look == \'amd64\':\n            return \'win-amd64\'\n        if look == \'itanium\':\n            return \'win-ia64\'\n        return sys.platform\n\n    if os.name != "posix" or not hasattr(os, \'uname\'):\n        # XXX what about the architecture? NT is Intel or Alpha\n        return sys.platform\n\n    # Set for cross builds explicitly\n    if "_PYTHON_HOST_PLATFORM" in os.environ:\n        return os.environ["_PYTHON_HOST_PLATFORM"]\n\n    # Try to distinguish various flavours of Unix\n    osname, host, release, version, machine = os.uname()\n\n    # Convert the OS name to lowercase, remove \'/\' characters\n    # (to accommodate BSD/OS), and translate spaces (for "Power Macintosh")\n    osname = osname.lower().replace(\'/\', \'\')\n    machine = machine.replace(\' \', \'_\')\n    machine = machine.replace(\'/\', \'-\')\n\n    if osname[:5] == "linux":\n        # At least on Linux/Intel, \'machine\' is the processor --\n        # i386, etc.\n        # XXX what about Alpha, SPARC, etc?\n        return  "%s-%s" % (osname, machine)\n    elif osname[:5] == "sunos":\n        if release[0] >= "5":           # SunOS 5 == Solaris 2\n            osname = "solaris"\n            release = "%d.%s" % (int(release[0]) - 3, release[2:])\n            # We can\'t use "platform.architecture()[0]" because a\n            # bootstrap problem. We use a dict to get an error\n            # if some suspicious happens.\n            bitness = {2147483647:"32bit", 9223372036854775807:"64bit"}\n            machine += ".%s" % bitness[sys.maxsize]\n        # fall through to standard osname-release-machine representation\n    elif osname[:4] == "irix":              # could be "irix64"!\n        return "%s-%s" % (osname, release)\n    elif osname[:3] == "aix":\n        return "%s-%s.%s" % (osname, version, release)\n    elif osname[:6] == "cygwin":\n        osname = "cygwin"\n        import re\n        rel_re = re.compile(r\'[\\d.]+\')\n        m = rel_re.match(release)\n        if m:\n            release = m.group()\n    elif osname[:6] == "darwin":\n        import _osx_support\n        osname, release, machine = _osx_support.get_platform_osx(\n                                            get_config_vars(),\n                                            osname, release, machine)\n\n    return "%s-%s-%s" % (osname, release, machine)\n\n\ndef get_python_version():\n    return _PY_VERSION_SHORT\n\n\ndef _print_dict(title, data):\n    for index, (key, value) in enumerate(sorted(data.items())):\n        if index == 0:\n            print(\'%s: \' % (title))\n        print(\'\\t%s = "%s"\' % (key, value))\n\n\ndef _main():\n    """Display all information sysconfig detains."""\n    if \'--generate-posix-vars\' in sys.argv:\n        _generate_posix_vars()\n        return\n    print(\'Platform: "%s"\' % get_platform())\n    print(\'Python version: "%s"\' % get_python_version())\n    print(\'Current installation scheme: "%s"\' % _get_default_scheme())\n    print()\n    _print_dict(\'Paths\', get_paths())\n    print()\n    _print_dict(\'Variables\', get_config_vars())\n\n\nif __name__ == \'__main__\':\n    _main()\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=74, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=74, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 74, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 74, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 74, type <class 'int'>
Dump int (long) 74
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 24831, type <class 'int'>
Dump int (long) 24831
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 24831
Write message g=<_io.BufferedWriter name=4>, msg=24831, resulttype=None
dump 24831, type <class 'int'>
Dump int (long) 24831
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 1)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/sysconfig.py',))
['', 'bin', 'lib-python', '3', 'sysconfig.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3/sysconfig.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=75, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=75, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=24831, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 75, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 75, 1, 1, 0, 0, 24831, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 75, type <class 'int'>
Dump int (long) 75
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 24831, type <class 'int'>
Dump int (long) 24831
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/__pycache__',))
['', 'bin', 'lib-python', '3', '__pycache__']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=76, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=76, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 76, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 76, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 76, type <class 'int'>
Dump int (long) 76
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_mkdir'
Start b'll_os.ll_os_mkdir'((b'/bin/lib-python/3/__pycache__', 511))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((1,)) complete. Writing back Operation not permitted
Write message g=<_io.BufferedWriter name=4>, msg=Operation not permitted, resulttype=None
dump Operation not permitted, type <class 'str'>
Fnname b'll_os.ll_os_getcwd'
Start b'll_os.ll_os_getcwd'(())
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_getcwd'(()) complete. Writing back /tmp
Write message g=<_io.BufferedWriter name=4>, msg=/tmp, resulttype=None
dump /tmp, type <class 'str'>
Fnname b'll_os.ll_os_lstat'
Start b'll_os.ll_os_lstat'((b'/tmp',))
['', 'tmp']
checking 
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lstat'((b'/tmp',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=2, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=2, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 2, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 2, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 2, type <class 'int'>
Dump int (long) 2
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/tmp/Modules/Setup.dist',))
['', 'tmp', 'Modules', 'Setup.dist']
checking 
checking tmp
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f332f98>
checking Modules
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f332f98> []
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/tmp/Modules/Setup.local',))
['', 'tmp', 'Modules', 'Setup.local']
checking 
checking tmp
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f332f98>
checking Modules
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f332f98> []
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/_sysconfigdata.py',))
['', 'bin', 'lib_pypy', '_sysconfigdata.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy/_sysconfigdata.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=77, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=77, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 77, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 77, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 77, type <class 'int'>
Dump int (long) 77
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 259, type <class 'int'>
Dump int (long) 259
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/_sysconfigdata.py',))
['', 'bin', 'lib_pypy', '_sysconfigdata.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy/_sysconfigdata.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=78, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=78, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 78, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 78, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 78, type <class 'int'>
Dump int (long) 78
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 259, type <class 'int'>
Dump int (long) 259
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib_pypy/__pycache__/_sysconfigdata.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib_pypy', '__pycache__', '_sysconfigdata.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy> ['audioop.py', 'cffi', 'cffi.egg-info', 'ctypes_config_cache', 'ctypes_support.py', 'future_builtins.py', 'greenlet.egg-info', 'greenlet.py', 'grp.py', 'identity_dict.py', 'marshal.py', 'msvcrt.py', 'pwd.py', 'pyrepl', 'readline.egg-info', 'readline.py', 'resource.py', 'stackless.py', 'syslog.py', 'testcapi_long.h', 'tputil.py', '_audioop_build.py', '_cffi_ssl', '_codecs_cn.py', '_codecs_hk.py', '_codecs_iso2022.py', '_codecs_jp.py', '_codecs_kr.py', '_codecs_tw.py', '_collections.py', '_csv.py', '_ctypes', '_ctypes_test.c', '_ctypes_test.py', '_curses.py', '_curses_build.py', '_curses_panel.py', '_dbm.py', '_decimal.py', '_decimal_build.py', '_ffi.py', '_functools.py', '_gdbm.py', '_gdbm_build.py', '_hashlib', '_libmpdec', '_lzma.py', '_lzma_build.py', '_marshal.py', '_md5.py', '_pwdgrp_build.py', '_pypy_collections.py', '_pypy_interact.py', '_pypy_irc_topic.py', '_pypy_testcapi.py', '_pypy_wait.py', '_pypy_winbase_build.py', '_pypy_winbase_cffi.py', '_resource_build.py', '_scproxy.py', '_sha1.py', '_sha256.py', '_sha512.py', '_sqlite3.py', '_sqlite3_build.py', '_ssl', '_ssl_build.py', '_stat.py', '_structseq.py', '_sysconfigdata.py', '_syslog_build.py', '_testcapi.py', '_testcapimodule.c', '_testmultiphase.c', '_testmultiphase.py', '_tkinter', '_winapi.py', '__init__.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib_pypy/_sysconfigdata.py', 524288, 438))
['', 'bin', 'lib_pypy', '_sysconfigdata.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib_pypy/_sysconfigdata.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=79, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=79, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 79, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 79, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 79, type <class 'int'>
Dump int (long) 79
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 259, type <class 'int'>
Dump int (long) 259
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=79, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=79, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 79, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 79, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 79, type <class 'int'>
Dump int (long) 79
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 259, type <class 'int'>
Dump int (long) 259
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b'import _imp\n\nso_ext = _imp.extension_suffixes()[0]\n\nbuild_time_vars = {\n    "EXT_SUFFIX": so_ext,\n    "SHLIB_SUFFIX": so_ext,\n    "SOABI": \'-\'.join(so_ext.split(\'.\')[1].split(\'-\')[:2]),\n    "SO": so_ext  # deprecated in Python 3, for backward compatibility\n}\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'import _imp\n\nso_ext = _imp.extension_suffixes()[0]\n\nbuild_time_vars = {\n    "EXT_SUFFIX": so_ext,\n    "SHLIB_SUFFIX": so_ext,\n    "SOABI": \'-\'.join(so_ext.split(\'.\')[1].split(\'-\')[:2]),\n    "SO": so_ext  # deprecated in Python 3, for backward compatibility\n}\n', resulttype=None
dump b'import _imp\n\nso_ext = _imp.extension_suffixes()[0]\n\nbuild_time_vars = {\n    "EXT_SUFFIX": so_ext,\n    "SHLIB_SUFFIX": so_ext,\n    "SOABI": \'-\'.join(so_ext.split(\'.\')[1].split(\'-\')[:2]),\n    "SO": so_ext  # deprecated in Python 3, for backward compatibility\n}\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=79, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=79, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 79, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 79, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 79, type <class 'int'>
Dump int (long) 79
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 259, type <class 'int'>
Dump int (long) 259
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 259
Write message g=<_io.BufferedWriter name=4>, msg=259, resulttype=None
dump 259, type <class 'int'>
Dump int (long) 259
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/_sysconfigdata.py',))
['', 'bin', 'lib_pypy', '_sysconfigdata.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy/_sysconfigdata.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=80, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=80, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=259, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 80, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 80, 1, 1, 0, 0, 259, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 80, type <class 'int'>
Dump int (long) 80
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 259, type <class 'int'>
Dump int (long) 259
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/__pycache__',))
['', 'bin', 'lib_pypy', '__pycache__']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_mkdir'
Start b'll_os.ll_os_mkdir'((b'/bin/lib_pypy/__pycache__', 511))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((1,)) complete. Writing back Operation not permitted
Write message g=<_io.BufferedWriter name=4>, msg=Operation not permitted, resulttype=None
dump Operation not permitted, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/pwd.py',))
['', 'bin', 'lib_pypy', 'pwd.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy/pwd.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=81, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=81, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 81, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 81, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 81, type <class 'int'>
Dump int (long) 81
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3300, type <class 'int'>
Dump int (long) 3300
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/pwd.py',))
['', 'bin', 'lib_pypy', 'pwd.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy/pwd.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=82, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=82, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 82, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 82, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 82, type <class 'int'>
Dump int (long) 82
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3300, type <class 'int'>
Dump int (long) 3300
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib_pypy/__pycache__/pwd.pypy3-59.pyc', 524288, 438))
['', 'bin', 'lib_pypy', '__pycache__', 'pwd.pypy3-59.pyc']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
checking __pycache__
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy> ['audioop.py', 'cffi', 'cffi.egg-info', 'ctypes_config_cache', 'ctypes_support.py', 'future_builtins.py', 'greenlet.egg-info', 'greenlet.py', 'grp.py', 'identity_dict.py', 'marshal.py', 'msvcrt.py', 'pwd.py', 'pyrepl', 'readline.egg-info', 'readline.py', 'resource.py', 'stackless.py', 'syslog.py', 'testcapi_long.h', 'tputil.py', '_audioop_build.py', '_cffi_ssl', '_codecs_cn.py', '_codecs_hk.py', '_codecs_iso2022.py', '_codecs_jp.py', '_codecs_kr.py', '_codecs_tw.py', '_collections.py', '_csv.py', '_ctypes', '_ctypes_test.c', '_ctypes_test.py', '_curses.py', '_curses_build.py', '_curses_panel.py', '_dbm.py', '_decimal.py', '_decimal_build.py', '_ffi.py', '_functools.py', '_gdbm.py', '_gdbm_build.py', '_hashlib', '_libmpdec', '_lzma.py', '_lzma_build.py', '_marshal.py', '_md5.py', '_pwdgrp_build.py', '_pypy_collections.py', '_pypy_interact.py', '_pypy_irc_topic.py', '_pypy_testcapi.py', '_pypy_wait.py', '_pypy_winbase_build.py', '_pypy_winbase_cffi.py', '_resource_build.py', '_scproxy.py', '_sha1.py', '_sha256.py', '_sha512.py', '_sqlite3.py', '_sqlite3_build.py', '_ssl', '_ssl_build.py', '_stat.py', '_structseq.py', '_sysconfigdata.py', '_syslog_build.py', '_testcapi.py', '_testcapimodule.c', '_testmultiphase.c', '_testmultiphase.py', '_tkinter', '_winapi.py', '__init__.py']
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_open'
Start b'll_os.ll_os_open'((b'/bin/lib_pypy/pwd.py', 524288, 438))
['', 'bin', 'lib_pypy', 'pwd.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_open'((b'/bin/lib_pypy/pwd.py', 524288, 438)) complete. Writing back 3
Write message g=<_io.BufferedWriter name=4>, msg=3, resulttype=None
dump 3, type <class 'int'>
Dump int (long) 3
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=83, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=83, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 83, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 83, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 83, type <class 'int'>
Dump int (long) 83
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3300, type <class 'int'>
Dump int (long) 3300
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=83, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=83, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 83, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 83, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 83, type <class 'int'>
Dump int (long) 83
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3300, type <class 'int'>
Dump int (long) 3300
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 0
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b'# indirectly based on ctypes implementation: Victor Stinner, 2008-05-08\n"""\nThis module provides access to the Unix password database.\nIt is available on all Unix versions.\n\nPassword database entries are reported as 7-tuples containing the following\nitems from the password database (see `<pwd.h>\'), in order:\npw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell.\nThe uid and gid items are integers, all others are strings. An\nexception is raised if the entry asked for cannot be found.\n"""\n\nfrom _pwdgrp_cffi import ffi, lib\nimport _structseq\n\ntry: from __pypy__ import builtinify\nexcept ImportError: builtinify = lambda f: f\n\n\nclass struct_passwd(metaclass=_structseq.structseqtype):\n    """\n    pwd.struct_passwd: Results from getpw*() routines.\n\n    This object may be accessed either as a tuple of\n      (pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell)\n    or via the object attributes as named in the above tuple.\n    """\n    name = "pwd.struct_passwd"\n\n    pw_name = _structseq.structseqfield(0)\n    pw_passwd = _structseq.structseqfield(1)\n    pw_uid = _structseq.structseqfield(2)\n    pw_gid = _structseq.structseqfield(3)\n    pw_gecos = _structseq.structseqfield(4)\n    pw_dir = _structseq.structseqfield(5)\n    pw_shell = _structseq.structseqfield(6)\n\n\ndef _mkpwent(pw):\n    return struct_passwd([\n        ffi.string(pw.pw_name),\n        ffi.string(pw.pw_passwd),\n        pw.pw_uid,\n        pw.pw_gid,\n        ffi.string(pw.pw_gecos),\n        ffi.string(pw.pw_dir),\n        ffi.string(pw.pw_shell)])\n\n@builtinify\ndef getpwuid(uid):\n    """\n    getpwuid(uid) -> (pw_name,pw_passwd,pw_uid,\n                      pw_gid,pw_gecos,pw_dir,pw_shell)\n    Return the password database entry for the given numeric user ID.\n    See pwd.__doc__ for more on password database entries.\n    """\n    pw = lib.getpwuid(uid)\n    if not pw:\n        raise KeyError("getpwuid(): uid not found: %s" % uid)\n    return _mkpwent(pw)\n\n@builtinify\ndef getpwnam(name):\n    """\n    getpwnam(name) -> (pw_name,pw_passwd,pw_uid,\n                        pw_gid,pw_gecos,pw_dir,pw_shell)\n    Return the password database entry for the given user name.\n    See pwd.__doc__ for more on password database entries.\n    """\n    if not isinstance(name, basestring):\n        raise TypeError("expected string")\n    name = str(name)\n    pw = lib.getpwnam(name)\n    if not pw:\n        raise KeyError("getpwname(): name not found: %s" % name)\n    return _mkpwent(pw)\n\n@builtinify\ndef getpwall():\n    """\n    getpwall() -> list_of_entries\n    Return a list of all available password database entries, in arbitrary order.\n    See pwd.__doc__ for more on password database entries.\n    """\n    users = []\n    lib.setpwent()\n    while True:\n        pw = lib.getpwent()\n        if not pw:\n            break\n        users.append(_mkpwent(pw))\n    lib.endpwent()\n    return users\n\n__all__ = (\'struct_passwd\', \'getpwuid\', \'getpwnam\', \'getpwall\')\n\nif __name__ == "__main__":\n# Uncomment next line to test CPython implementation\n#    from pwd import getpwuid, getpwnam, getpwall\n    from os import getuid\n    uid = getuid()\n    pw = getpwuid(uid)\n    print("uid %s: %s" % (pw.pw_uid, pw))\n    name = pw.pw_name\n    print("name %r: %s" % (name, getpwnam(name)))\n    print("All:")\n    for pw in getpwall():\n        print(pw)\n'
Write message g=<_io.BufferedWriter name=4>, msg=b'# indirectly based on ctypes implementation: Victor Stinner, 2008-05-08\n"""\nThis module provides access to the Unix password database.\nIt is available on all Unix versions.\n\nPassword database entries are reported as 7-tuples containing the following\nitems from the password database (see `<pwd.h>\'), in order:\npw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell.\nThe uid and gid items are integers, all others are strings. An\nexception is raised if the entry asked for cannot be found.\n"""\n\nfrom _pwdgrp_cffi import ffi, lib\nimport _structseq\n\ntry: from __pypy__ import builtinify\nexcept ImportError: builtinify = lambda f: f\n\n\nclass struct_passwd(metaclass=_structseq.structseqtype):\n    """\n    pwd.struct_passwd: Results from getpw*() routines.\n\n    This object may be accessed either as a tuple of\n      (pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell)\n    or via the object attributes as named in the above tuple.\n    """\n    name = "pwd.struct_passwd"\n\n    pw_name = _structseq.structseqfield(0)\n    pw_passwd = _structseq.structseqfield(1)\n    pw_uid = _structseq.structseqfield(2)\n    pw_gid = _structseq.structseqfield(3)\n    pw_gecos = _structseq.structseqfield(4)\n    pw_dir = _structseq.structseqfield(5)\n    pw_shell = _structseq.structseqfield(6)\n\n\ndef _mkpwent(pw):\n    return struct_passwd([\n        ffi.string(pw.pw_name),\n        ffi.string(pw.pw_passwd),\n        pw.pw_uid,\n        pw.pw_gid,\n        ffi.string(pw.pw_gecos),\n        ffi.string(pw.pw_dir),\n        ffi.string(pw.pw_shell)])\n\n@builtinify\ndef getpwuid(uid):\n    """\n    getpwuid(uid) -> (pw_name,pw_passwd,pw_uid,\n                      pw_gid,pw_gecos,pw_dir,pw_shell)\n    Return the password database entry for the given numeric user ID.\n    See pwd.__doc__ for more on password database entries.\n    """\n    pw = lib.getpwuid(uid)\n    if not pw:\n        raise KeyError("getpwuid(): uid not found: %s" % uid)\n    return _mkpwent(pw)\n\n@builtinify\ndef getpwnam(name):\n    """\n    getpwnam(name) -> (pw_name,pw_passwd,pw_uid,\n                        pw_gid,pw_gecos,pw_dir,pw_shell)\n    Return the password database entry for the given user name.\n    See pwd.__doc__ for more on password database entries.\n    """\n    if not isinstance(name, basestring):\n        raise TypeError("expected string")\n    name = str(name)\n    pw = lib.getpwnam(name)\n    if not pw:\n        raise KeyError("getpwname(): name not found: %s" % name)\n    return _mkpwent(pw)\n\n@builtinify\ndef getpwall():\n    """\n    getpwall() -> list_of_entries\n    Return a list of all available password database entries, in arbitrary order.\n    See pwd.__doc__ for more on password database entries.\n    """\n    users = []\n    lib.setpwent()\n    while True:\n        pw = lib.getpwent()\n        if not pw:\n            break\n        users.append(_mkpwent(pw))\n    lib.endpwent()\n    return users\n\n__all__ = (\'struct_passwd\', \'getpwuid\', \'getpwnam\', \'getpwall\')\n\nif __name__ == "__main__":\n# Uncomment next line to test CPython implementation\n#    from pwd import getpwuid, getpwnam, getpwall\n    from os import getuid\n    uid = getuid()\n    pw = getpwuid(uid)\n    print("uid %s: %s" % (pw.pw_uid, pw))\n    name = pw.pw_name\n    print("name %r: %s" % (name, getpwnam(name)))\n    print("All:")\n    for pw in getpwall():\n        print(pw)\n', resulttype=None
dump b'# indirectly based on ctypes implementation: Victor Stinner, 2008-05-08\n"""\nThis module provides access to the Unix password database.\nIt is available on all Unix versions.\n\nPassword database entries are reported as 7-tuples containing the following\nitems from the password database (see `<pwd.h>\'), in order:\npw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell.\nThe uid and gid items are integers, all others are strings. An\nexception is raised if the entry asked for cannot be found.\n"""\n\nfrom _pwdgrp_cffi import ffi, lib\nimport _structseq\n\ntry: from __pypy__ import builtinify\nexcept ImportError: builtinify = lambda f: f\n\n\nclass struct_passwd(metaclass=_structseq.structseqtype):\n    """\n    pwd.struct_passwd: Results from getpw*() routines.\n\n    This object may be accessed either as a tuple of\n      (pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell)\n    or via the object attributes as named in the above tuple.\n    """\n    name = "pwd.struct_passwd"\n\n    pw_name = _structseq.structseqfield(0)\n    pw_passwd = _structseq.structseqfield(1)\n    pw_uid = _structseq.structseqfield(2)\n    pw_gid = _structseq.structseqfield(3)\n    pw_gecos = _structseq.structseqfield(4)\n    pw_dir = _structseq.structseqfield(5)\n    pw_shell = _structseq.structseqfield(6)\n\n\ndef _mkpwent(pw):\n    return struct_passwd([\n        ffi.string(pw.pw_name),\n        ffi.string(pw.pw_passwd),\n        pw.pw_uid,\n        pw.pw_gid,\n        ffi.string(pw.pw_gecos),\n        ffi.string(pw.pw_dir),\n        ffi.string(pw.pw_shell)])\n\n@builtinify\ndef getpwuid(uid):\n    """\n    getpwuid(uid) -> (pw_name,pw_passwd,pw_uid,\n                      pw_gid,pw_gecos,pw_dir,pw_shell)\n    Return the password database entry for the given numeric user ID.\n    See pwd.__doc__ for more on password database entries.\n    """\n    pw = lib.getpwuid(uid)\n    if not pw:\n        raise KeyError("getpwuid(): uid not found: %s" % uid)\n    return _mkpwent(pw)\n\n@builtinify\ndef getpwnam(name):\n    """\n    getpwnam(name) -> (pw_name,pw_passwd,pw_uid,\n                        pw_gid,pw_gecos,pw_dir,pw_shell)\n    Return the password database entry for the given user name.\n    See pwd.__doc__ for more on password database entries.\n    """\n    if not isinstance(name, basestring):\n        raise TypeError("expected string")\n    name = str(name)\n    pw = lib.getpwnam(name)\n    if not pw:\n        raise KeyError("getpwname(): name not found: %s" % name)\n    return _mkpwent(pw)\n\n@builtinify\ndef getpwall():\n    """\n    getpwall() -> list_of_entries\n    Return a list of all available password database entries, in arbitrary order.\n    See pwd.__doc__ for more on password database entries.\n    """\n    users = []\n    lib.setpwent()\n    while True:\n        pw = lib.getpwent()\n        if not pw:\n            break\n        users.append(_mkpwent(pw))\n    lib.endpwent()\n    return users\n\n__all__ = (\'struct_passwd\', \'getpwuid\', \'getpwnam\', \'getpwall\')\n\nif __name__ == "__main__":\n# Uncomment next line to test CPython implementation\n#    from pwd import getpwuid, getpwnam, getpwall\n    from os import getuid\n    uid = getuid()\n    pw = getpwuid(uid)\n    print("uid %s: %s" % (pw.pw_uid, pw))\n    name = pw.pw_name\n    print("name %r: %s" % (name, getpwnam(name)))\n    print("All:")\n    for pw in getpwall():\n        print(pw)\n', type <class 'bytes'>
Fnname b'll_os.ll_os_fstat'
Start b'll_os.ll_os_fstat'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_fstat'((3,)) complete. Writing back os.stat_result(st_mode=33188, st_ino=83, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=83, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 83, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 83, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 83, type <class 'int'>
Dump int (long) 83
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3300, type <class 'int'>
Dump int (long) 3300
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_lseek'
Start b'll_os.ll_os_lseek'((3, 0, 1))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_lseek'((3, 0, 1)) complete. Writing back 3300
Write message g=<_io.BufferedWriter name=4>, msg=3300, resulttype=None
dump 3300, type <class 'int'>
Dump int (long) 3300
Fnname b'll_os.ll_os_read'
Start b'll_os.ll_os_read'((3, 8192))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_read'((3, 8192)) complete. Writing back b''
Write message g=<_io.BufferedWriter name=4>, msg=b'', resulttype=None
dump b'', type <class 'bytes'>
Fnname b'll_os.ll_os_close'
Start b'll_os.ll_os_close'((3,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_close'((3,)) complete. Writing back None
Write message g=<_io.BufferedWriter name=4>, msg=None, resulttype=None
dump None, type <class 'NoneType'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/pwd.py',))
['', 'bin', 'lib_pypy', 'pwd.py']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy/pwd.py',)) complete. Writing back os.stat_result(st_mode=33188, st_ino=84, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=33188, st_ino=84, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=3300, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (33188, 84, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (33188, 84, 1, 1, 0, 0, 3300, 0.0, 0.0, 0.0) b'('
10 items.
dump 33188, type <class 'int'>
Dump int (long) 33188
dump 84, type <class 'int'>
Dump int (long) 84
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 3300, type <class 'int'>
Dump int (long) 3300
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy/__pycache__',))
['', 'bin', 'lib_pypy', '__pycache__']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib_pypy
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib_pypy>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_mkdir'
Start b'll_os.ll_os_mkdir'((b'/bin/lib_pypy/__pycache__', 511))
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((1,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((1,)) complete. Writing back Operation not permitted
Write message g=<_io.BufferedWriter name=4>, msg=Operation not permitted, resulttype=None
dump Operation not permitted, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=85, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=85, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 85, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 85, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 85, type <class 'int'>
Dump int (long) 85
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/lib-tk',))
['', 'bin', 'lib-python', '3', 'lib-tk']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/lib-tk',))
['', 'bin', 'lib-python', '3', 'lib-tk']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/plat-linux2',))
['', 'bin', 'lib-python', '3', 'plat-linux2']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3/plat-linux2',))
['', 'bin', 'lib-python', '3', 'plat-linux2']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
checking 3
get dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python> ['2.7', '3', 'conftest.py', 'stdlib-upgrade.txt', 'stdlib-version.txt', 'win32-failures.txt']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python/3>
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Write message g=<_io.BufferedWriter name=4>, msg=2, resulttype=None
dump 2, type <class 'int'>
Dump int (long) 2
Fnname b'll_os.ll_os_strerror'
Start b'll_os.ll_os_strerror'((2,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_strerror'((2,)) complete. Writing back No such file or directory
Write message g=<_io.BufferedWriter name=4>, msg=No such file or directory, resulttype=None
dump No such file or directory, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=86, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=86, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 86, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 86, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 86, type <class 'int'>
Dump int (long) 86
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_write'
Start b'll_os.ll_os_write'((2, b"'import site' failed\n"))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_write'((2, b"'import site' failed\n")) complete. Writing back 21
Write message g=<_io.BufferedWriter name=4>, msg=21, resulttype=None
dump 21, type <class 'int'>
Dump int (long) 21
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=87, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=87, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 87, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 87, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 87, type <class 'int'>
Dump int (long) 87
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib_pypy',))
['', 'bin', 'lib_pypy']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib_pypy',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=5, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 5, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 5, type <class 'int'>
Dump int (long) 5
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/bin/lib-python/3',))
['', 'bin', 'lib-python', '3']
checking 
checking bin
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f2860863978> ['dev', 'bin', 'tmp']
dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50>
checking lib-python
get dirnode <rpython.translator.sandbox.vfs.Dir object at 0x7f285f309c50> ['lib-python', 'lib_pypy', 'pypy3-c']
dirnode <RealDir /mnt/c/Users/seth_/Professional/dev/pypy_35/pypy3-v5.9.0-src/lib-python>
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/bin/lib-python/3',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=88, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=88, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 88, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 88, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 88, type <class 'int'>
Dump int (long) 88
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((0,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((0,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_write'
Start b'll_os.ll_os_write'((2, b'Python 3.5.3 (d72f9800a42b46a8056951b1da2426d2c2d8d502, Dec 04 2017, 03:56:26)\n[PyPy 5.9.0-beta0 with GCC 5.4.0 20160609] on linux'))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_write'((2, b'Python 3.5.3 (d72f9800a42b46a8056951b1da2426d2c2d8d502, Dec 04 2017, 03:56:26)\n[PyPy 5.9.0-beta0 with GCC 5.4.0 20160609] on linux')) complete. Writing back 130
Write message g=<_io.BufferedWriter name=4>, msg=130, resulttype=None
dump 130, type <class 'int'>
Dump int (long) 130
Fnname b'll_os.ll_os_write'
Start b'll_os.ll_os_write'((2, b'\n'))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_write'((2, b'\n')) complete. Writing back 1
Write message g=<_io.BufferedWriter name=4>, msg=1, resulttype=None
dump 1, type <class 'int'>
Dump int (long) 1
Fnname b'll_os.ll_os_write'
Start b'll_os.ll_os_write'((2, b'Type "help", "copyright", "credits" or "license" for more information.\n'))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_write'((2, b'Type "help", "copyright", "credits" or "license" for more information.\n')) complete. Writing back 71
Write message g=<_io.BufferedWriter name=4>, msg=71, resulttype=None
dump 71, type <class 'int'>
Dump int (long) 71
Fnname b'll_os.ll_os_isatty'
Start b'll_os.ll_os_isatty'((0,))
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_isatty'((0,)) complete. Writing back True
Write message g=<_io.BufferedWriter name=4>, msg=True, resulttype=None
dump True, type <class 'bool'>
Fnname b'll_os.ll_os_getcwd'
Start b'll_os.ll_os_getcwd'(())
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_getcwd'(()) complete. Writing back /tmp
Write message g=<_io.BufferedWriter name=4>, msg=/tmp, resulttype=None
dump /tmp, type <class 'str'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/tmp',))
['', 'tmp']
checking 
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/tmp',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=2, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=2, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 2, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 2, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 2, type <class 'int'>
Dump int (long) 2
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_stat'
Start b'll_os.ll_os_stat'((b'/tmp',))
['', 'tmp']
checking 
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_stat'((b'/tmp',)) complete. Writing back os.stat_result(st_mode=16877, st_ino=2, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0)
Write message g=<_io.BufferedWriter name=4>, msg=os.stat_result(st_mode=16877, st_ino=2, st_dev=1, st_nlink=1, st_uid=0, st_gid=0, st_size=0, st_atime=0, st_mtime=0, st_ctime=0), resulttype=<object object at 0x7f28609900e0>
dump (16877, 2, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0), type <class 'tuple'>
Dumping tuple (16877, 2, 1, 1, 0, 0, 0, 0.0, 0.0, 0.0) b'('
10 items.
dump 16877, type <class 'int'>
Dump int (long) 16877
dump 2, type <class 'int'>
Dump int (long) 2
dump 1, type <class 'int'>
Dump int (long) 1
dump 1, type <class 'int'>
Dump int (long) 1
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0, type <class 'int'>
Dump int (long) 0
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
dump 0.0, type <class 'float'>
Fnname b'll_os.ll_os_listdir'
Start b'll_os.ll_os_listdir'((b'/tmp',))
['', 'tmp']
checking 
Write message g=<_io.BufferedWriter name=4>, msg=0, resulttype=None
dump 0, type <class 'int'>
Dump int (long) 0
Request for b'll_os.ll_os_listdir'((b'/tmp',)) complete. Writing back dict_keys([])
Write message g=<_io.BufferedWriter name=4>, msg=dict_keys([]), resulttype=None
dump dict_keys([]), type <class 'dict_keys'>
